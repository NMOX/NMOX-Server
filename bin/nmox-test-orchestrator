#!/usr/bin/env bash
# NMOX Cross-Language Test Orchestrator
# Ensures X object consistency across all language implementations

set -e

# Configuration
NMOX_ROOT="$(cd "$(dirname "$0")/.." && pwd)"
TEST_RESULTS_DIR="$NMOX_ROOT/.nmox-tests"
SQUEAK_IMAGE="$NMOX_ROOT/x/lib/NMOXSqueak6.0-22148-64bit.image"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# Create test results directory
mkdir -p "$TEST_RESULTS_DIR"

# Logging
log() {
    echo "$(date '+%H:%M:%S') $1" | tee -a "$TEST_RESULTS_DIR/orchestrator.log"
    echo -e "${2:-$YELLOW}$1$NC"
}

# Test result tracking (simplified for macOS compatibility)
total_tests=0
passed_tests=0
failed_tests=0

# Record test result
record_test() {
    local test_name="$1"
    local result="$2"
    local language="$3"
    
    # Record test result (simplified logging)
    total_tests=$((total_tests + 1))
    
    if [ "$result" = "PASS" ]; then
        passed_tests=$((passed_tests + 1))
        log "  ✓ $test_name ($language)" "$GREEN"
    else
        failed_tests=$((failed_tests + 1))
        log "  ✗ $test_name ($language): $result" "$RED"
    fi
}

# Test X object basic functionality
test_x_object_basic() {
    local language="$1"
    local test_file="$TEST_RESULTS_DIR/test_basic_$language"
    
    case "$language" in
        "squeak")
            if [ -f "$SQUEAK_IMAGE" ]; then
                echo "
| x result |
x := X new.
result := x class name = 'X'.
Transcript show: (result ifTrue: ['PASS'] ifFalse: ['FAIL']).
Transcript flush.
" | squeak -headless "$SQUEAK_IMAGE" > "$test_file" 2>&1
                
                if grep -q "PASS" "$test_file"; then
                    record_test "X object creation" "PASS" "$language"
                else
                    record_test "X object creation" "FAIL" "$language"
                fi
            else
                record_test "X object creation" "SKIP - No Squeak image" "$language"
            fi
            ;;
        
        "javascript")
            cat > "$test_file.js" << 'EOF'
try {
    const fs = require('fs');
    const path = require('path');
    
    // Load NMOX implementation
    const nmoxPath = path.join(process.cwd(), 'x/lib/core/core.js');
    let result = 'FAIL';
    
    if (fs.existsSync(nmoxPath)) {
        // Basic test implementation
        class X {
            constructor() {
                this.type = 'X';
            }
        }
        
        const x = new X();
        result = (x.type === 'X') ? 'PASS' : 'FAIL';
    } else {
        result = 'SKIP - No JS implementation';
    }
    
    console.log(result);
} catch (e) {
    console.log('FAIL - ' + e.message);
}
EOF
            
            if command -v node >/dev/null 2>&1; then
                node "$test_file.js" > "$test_file" 2>&1
                local result=$(cat "$test_file")
                if [[ "$result" == "PASS" ]]; then
                    record_test "X object creation" "PASS" "$language"
                else
                    record_test "X object creation" "$result" "$language"
                fi
            else
                record_test "X object creation" "SKIP - No Node.js" "$language"
            fi
            ;;
            
        "python")
            cat > "$test_file.py" << 'EOF'
import sys
import os

try:
    # Add NMOX lib to path
    sys.path.insert(0, os.path.join(os.getcwd(), 'x/lib/core'))
    
    # Basic X object test
    class X:
        def __init__(self):
            self.type = 'X'
    
    x = X()
    result = 'PASS' if x.type == 'X' else 'FAIL'
    print(result)
    
except Exception as e:
    print(f'FAIL - {str(e)}')
EOF
            
            if command -v python3 >/dev/null 2>&1; then
                python3 "$test_file.py" > "$test_file" 2>&1
                local result=$(cat "$test_file")
                if [[ "$result" == "PASS" ]]; then
                    record_test "X object creation" "PASS" "$language"
                else
                    record_test "X object creation" "$result" "$language"
                fi
            else
                record_test "X object creation" "SKIP - No Python 3" "$language"
            fi
            ;;
            
        "rust")
            if command -v cargo >/dev/null 2>&1; then
                cat > "$test_file.rs" << 'EOF'
struct X {
    x_type: String,
}

impl X {
    fn new() -> Self {
        X {
            x_type: "X".to_string(),
        }
    }
}

fn main() {
    let x = X::new();
    if x.x_type == "X" {
        println!("PASS");
    } else {
        println!("FAIL");
    }
}
EOF
                
                rustc "$test_file.rs" -o "$test_file.bin" 2>/dev/null && \
                "$test_file.bin" > "$test_file" 2>&1
                
                local result=$(cat "$test_file" 2>/dev/null || echo "FAIL")
                if [[ "$result" == "PASS" ]]; then
                    record_test "X object creation" "PASS" "$language"
                else
                    record_test "X object creation" "$result" "$language"
                fi
                
                # Cleanup
                rm -f "$test_file.bin"
            else
                record_test "X object creation" "SKIP - No Rust" "$language"
            fi
            ;;
    esac
}

# Test HTML5 element rendering
test_html5_rendering() {
    local language="$1"
    local test_file="$TEST_RESULTS_DIR/test_html5_$language"
    
    case "$language" in
        "squeak")
            if [ -f "$SQUEAK_IMAGE" ]; then
                echo "
| div result |
div := X div: 'Hello World'.
result := div asString includesSubstring: '<div>Hello World</div>'.
Transcript show: (result ifTrue: ['PASS'] ifFalse: ['FAIL']).
Transcript flush.
" | squeak -headless "$SQUEAK_IMAGE" > "$test_file" 2>&1
                
                if grep -q "PASS" "$test_file"; then
                    record_test "HTML5 div rendering" "PASS" "$language"
                else
                    record_test "HTML5 div rendering" "FAIL" "$language"
                fi
            else
                record_test "HTML5 div rendering" "SKIP - No Squeak image" "$language"
            fi
            ;;
            
        "javascript")
            cat > "$test_file.js" << 'EOF'
try {
    // Basic HTML5 element simulation
    class XElement {
        constructor(tag, content) {
            this.tag = tag;
            this.content = content;
        }
        
        toString() {
            return `<${this.tag}>${this.content}</${this.tag}>`;
        }
    }
    
    const div = new XElement('div', 'Hello World');
    const result = div.toString() === '<div>Hello World</div>' ? 'PASS' : 'FAIL';
    console.log(result);
} catch (e) {
    console.log('FAIL - ' + e.message);
}
EOF
            
            if command -v node >/dev/null 2>&1; then
                node "$test_file.js" > "$test_file" 2>&1
                local result=$(cat "$test_file")
                record_test "HTML5 div rendering" "$result" "$language"
            else
                record_test "HTML5 div rendering" "SKIP - No Node.js" "$language"
            fi
            ;;
            
        *)
            record_test "HTML5 div rendering" "SKIP - Not implemented" "$language"
            ;;
    esac
}

# Test performance benchmarks
test_performance() {
    local language="$1"
    local test_file="$TEST_RESULTS_DIR/test_perf_$language"
    
    case "$language" in
        "squeak")
            if [ -f "$SQUEAK_IMAGE" ]; then
                echo "
| startTime endTime result |
startTime := Time millisecondClockValue.
1 to: 1000 do: [:i | X new].
endTime := Time millisecondClockValue.
result := endTime - startTime.
Transcript show: 'TIME:'; show: result; show: 'ms'.
Transcript flush.
" | squeak -headless "$SQUEAK_IMAGE" > "$test_file" 2>&1
                
                if grep -q "TIME:" "$test_file"; then
                    local time=$(grep "TIME:" "$test_file" | sed 's/.*TIME:\([0-9]*\)ms.*/\1/')
                    record_test "Performance (1000 X objects)" "${time}ms" "$language"
                else
                    record_test "Performance (1000 X objects)" "FAIL" "$language"
                fi
            else
                record_test "Performance (1000 X objects)" "SKIP - No Squeak image" "$language"
            fi
            ;;
            
        "javascript")
            cat > "$test_file.js" << 'EOF'
try {
    class X {
        constructor() {
            this.type = 'X';
        }
    }
    
    const start = Date.now();
    for (let i = 0; i < 1000; i++) {
        new X();
    }
    const end = Date.now();
    
    console.log(`TIME:${end - start}ms`);
} catch (e) {
    console.log('FAIL - ' + e.message);
}
EOF
            
            if command -v node >/dev/null 2>&1; then
                node "$test_file.js" > "$test_file" 2>&1
                if grep -q "TIME:" "$test_file"; then
                    local time=$(grep "TIME:" "$test_file" | sed 's/.*TIME:\([0-9]*\)ms.*/\1/')
                    record_test "Performance (1000 X objects)" "${time}ms" "$language"
                else
                    record_test "Performance (1000 X objects)" "FAIL" "$language"
                fi
            else
                record_test "Performance (1000 X objects)" "SKIP - No Node.js" "$language"
            fi
            ;;
            
        *)
            record_test "Performance (1000 X objects)" "SKIP - Not implemented" "$language"
            ;;
    esac
}

# Generate test report
generate_report() {
    local report_file="$TEST_RESULTS_DIR/test_report.html"
    
    cat > "$report_file" << EOF
<!DOCTYPE html>
<html>
<head>
    <title>NMOX Cross-Language Test Report</title>
    <style>
        body { font-family: monospace; margin: 20px; background: #1a1a1a; color: #00ff00; }
        .header { color: #ffff00; font-size: 1.2em; margin-bottom: 20px; }
        .summary { background: #2a2a2a; padding: 10px; margin: 10px 0; border-radius: 5px; }
        .pass { color: #00ff00; }
        .fail { color: #ff0000; }
        .skip { color: #ffff00; }
        table { border-collapse: collapse; width: 100%; margin: 20px 0; }
        th, td { border: 1px solid #333; padding: 8px; text-align: left; }
        th { background: #333; }
    </style>
</head>
<body>
    <div class="header">NMOX Cross-Language Test Report</div>
    <div class="header">Generated: $(date)</div>
    
    <div class="summary">
        <strong>Test Summary:</strong><br>
        Total Tests: $total_tests<br>
        <span class="pass">Passed: $passed_tests</span><br>
        <span class="fail">Failed: $failed_tests</span><br>
        <span class="skip">Skipped: $((total_tests - passed_tests - failed_tests))</span><br>
        Success Rate: $(( passed_tests * 100 / total_tests ))%
    </div>
    
    <table>
        <tr>
            <th>Test</th>
            <th>Squeak</th>
            <th>JavaScript</th>
            <th>Python</th>
            <th>Rust</th>
        </tr>
EOF

    # Add test results to table
    for test_name in "X object creation" "HTML5 div rendering" "Performance (1000 X objects)"; do
        echo "        <tr>" >> "$report_file"
        echo "            <td>$test_name</td>" >> "$report_file"
        
        for lang in "squeak" "javascript" "python" "rust"; do
            local key="$test_name:$lang"
            local result="${test_results[$key]:-N/A}"
            local class="skip"
            
            if [[ "$result" == "PASS" ]]; then
                class="pass"
            elif [[ "$result" == "FAIL"* ]]; then
                class="fail"
            fi
            
            echo "            <td class=\"$class\">$result</td>" >> "$report_file"
        done
        
        echo "        </tr>" >> "$report_file"
    done
    
    cat >> "$report_file" << EOF
    </table>
    
    <div class="summary">
        <strong>System Information:</strong><br>
        OS: $(uname -s)<br>
        Architecture: $(uname -m)<br>
        NMOX Version: $(cat "$NMOX_ROOT/x/bin/nmox" 2>/dev/null | grep -o 'v[0-9]*' || echo "Unknown")<br>
        Test Duration: $(date -r "$TEST_RESULTS_DIR/orchestrator.log" '+%H:%M:%S' 2>/dev/null || echo "Unknown")
    </div>
</body>
</html>
EOF

    log "Test report generated: $report_file" "$GREEN"
}

# Main execution
main() {
    log "Starting NMOX Cross-Language Test Orchestrator" "$GREEN"
    log "Testing X object consistency across all implementations" "$YELLOW"
    
    # Clear previous results
    rm -f "$TEST_RESULTS_DIR"/*.log "$TEST_RESULTS_DIR"/test_*
    
    # Test languages
    local languages=("squeak" "javascript" "python" "rust")
    
    for lang in "${languages[@]}"; do
        log "Testing $lang implementation..." "$BLUE"
        
        test_x_object_basic "$lang"
        test_html5_rendering "$lang"
        test_performance "$lang"
        
        echo ""
    done
    
    # Generate report
    generate_report
    
    # Summary
    log "Test orchestration completed!" "$GREEN"
    log "Results: $passed_tests passed, $failed_tests failed, $((total_tests - passed_tests - failed_tests)) skipped" "$YELLOW"
    
    # Return appropriate exit code
    [ $failed_tests -eq 0 ]
}

# Run main function
main "$@"