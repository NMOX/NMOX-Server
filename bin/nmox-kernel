#!/bin/bash
# NMOX Development Kernel
# Multi-language development environment manager

set -e

# Configuration
NMOX_ROOT="$(cd "$(dirname "$0")/.." && pwd)"
SQUEAK_IMAGE="$NMOX_ROOT/x/lib/NMOXSqueak6.0-22148-64bit.image"
KERNEL_STATE_DIR="$NMOX_ROOT/.nmox-kernel"
KERNEL_LOG="$KERNEL_STATE_DIR/kernel.log"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# Ensure state directory exists
mkdir -p "$KERNEL_STATE_DIR"

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') $1" >> "$KERNEL_LOG"
    echo -e "${2:-$YELLOW}$1$NC"
}

# Show help
show_help() {
    cat << EOF
${GREEN}NMOX Development Kernel${NC}
${YELLOW}Multi-language development environment manager${NC}

Usage: nmox-kernel [COMMAND] [OPTIONS]

Commands:
  ${GREEN}start${NC}         Start the development kernel
  ${GREEN}stop${NC}          Stop the development kernel
  ${GREEN}status${NC}        Show kernel status
  ${GREEN}repl [LANG]${NC}   Open REPL for specified language
  ${GREEN}exec [LANG]${NC}   Execute code in specified language
  ${GREEN}bridge${NC}        Show cross-language bridge status
  ${GREEN}monitor${NC}       Show real-time performance monitoring
  ${GREEN}logs${NC}          Show kernel logs

Languages supported:
  ${BLUE}squeak${NC}        Squeak Smalltalk (live programming environment)
  ${BLUE}rust${NC}          Rust (with WASM support)
  ${BLUE}javascript${NC}    JavaScript/Node.js
  ${BLUE}python${NC}        Python 3
  ${BLUE}wasm${NC}          WebAssembly modules

Examples:
  nmox-kernel start
  nmox-kernel repl squeak
  nmox-kernel exec javascript "console.log('Hello NMOX')"
  nmox-kernel monitor
EOF
}

# Check if kernel is running
is_kernel_running() {
    [ -f "$KERNEL_STATE_DIR/kernel.pid" ] && kill -0 "$(cat "$KERNEL_STATE_DIR/kernel.pid")" 2>/dev/null
}

# Start kernel
start_kernel() {
    if is_kernel_running; then
        log "Kernel already running (PID: $(cat "$KERNEL_STATE_DIR/kernel.pid"))" "$GREEN"
        return 0
    fi

    log "Starting NMOX Development Kernel..." "$GREEN"
    
    # Create background process for kernel
    (
        echo $$ > "$KERNEL_STATE_DIR/kernel.pid"
        trap 'rm -f "$KERNEL_STATE_DIR/kernel.pid"' EXIT
        
        # Initialize language runtimes
        log "Initializing language runtimes..." "$YELLOW"
        
        # Check Squeak availability
        if [ -f "$SQUEAK_IMAGE" ]; then
            echo "squeak:ready" > "$KERNEL_STATE_DIR/runtime-squeak"
        else
            echo "squeak:unavailable" > "$KERNEL_STATE_DIR/runtime-squeak"
        fi
        
        # Check other runtimes
        command -v cargo >/dev/null 2>&1 && echo "rust:ready" > "$KERNEL_STATE_DIR/runtime-rust" || echo "rust:unavailable" > "$KERNEL_STATE_DIR/runtime-rust"
        command -v node >/dev/null 2>&1 && echo "javascript:ready" > "$KERNEL_STATE_DIR/runtime-javascript" || echo "javascript:unavailable" > "$KERNEL_STATE_DIR/runtime-javascript"
        command -v python3 >/dev/null 2>&1 && echo "python:ready" > "$KERNEL_STATE_DIR/runtime-python" || echo "python:unavailable" > "$KERNEL_STATE_DIR/runtime-python"
        
        log "Kernel started successfully" "$GREEN"
        
        # Keep kernel alive
        while true; do
            sleep 10
            echo "$(date '+%Y-%m-%d %H:%M:%S') kernel:heartbeat" >> "$KERNEL_LOG"
        done
    ) &
    
    sleep 1
    log "Kernel started in background" "$GREEN"
}

# Stop kernel
stop_kernel() {
    if ! is_kernel_running; then
        log "Kernel not running" "$YELLOW"
        return 0
    fi
    
    local pid=$(cat "$KERNEL_STATE_DIR/kernel.pid")
    log "Stopping kernel (PID: $pid)..." "$YELLOW"
    
    kill "$pid" 2>/dev/null || true
    rm -f "$KERNEL_STATE_DIR/kernel.pid"
    rm -f "$KERNEL_STATE_DIR/runtime-"*
    
    log "Kernel stopped" "$GREEN"
}

# Show kernel status
show_status() {
    if is_kernel_running; then
        log "Kernel Status: ${GREEN}RUNNING${NC} (PID: $(cat "$KERNEL_STATE_DIR/kernel.pid"))"
    else
        log "Kernel Status: ${RED}STOPPED${NC}"
        return 0
    fi
    
    echo ""
    echo "${YELLOW}Language Runtime Status:${NC}"
    
    for runtime_file in "$KERNEL_STATE_DIR/runtime-"*; do
        if [ -f "$runtime_file" ]; then
            local lang=$(basename "$runtime_file" | sed 's/runtime-//')
            local status=$(cat "$runtime_file" | cut -d: -f2)
            local color="${GREEN}"
            [ "$status" = "unavailable" ] && color="${RED}"
            echo -e "  ${BLUE}$lang${NC}: ${color}$status${NC}"
        fi
    done
}

# Open REPL for specified language
open_repl() {
    local lang="$1"
    
    if ! is_kernel_running; then
        log "Starting kernel first..." "$YELLOW"
        start_kernel
        sleep 2
    fi
    
    case "$lang" in
        "squeak")
            if [ -f "$SQUEAK_IMAGE" ]; then
                log "Opening Squeak Smalltalk workspace..." "$GREEN"
                squeak "$SQUEAK_IMAGE" &
            else
                log "Squeak image not found at $SQUEAK_IMAGE" "$RED"
                exit 1
            fi
            ;;
        "rust")
            if command -v cargo >/dev/null 2>&1; then
                log "Opening Rust REPL..." "$GREEN"
                cd "$NMOX_ROOT/x/lib/wasm"
                cargo run --bin repl 2>/dev/null || echo "println!(\"Rust REPL - implement cargo run --bin repl\");" | rustc -
            else
                log "Rust/Cargo not available" "$RED"
                exit 1
            fi
            ;;
        "javascript")
            if command -v node >/dev/null 2>&1; then
                log "Opening Node.js REPL..." "$GREEN"
                echo "console.log('NMOX JavaScript Environment Ready');"
                node -e "require('repl').start('nmox-js> ')"
            else
                log "Node.js not available" "$RED"
                exit 1
            fi
            ;;
        "python")
            if command -v python3 >/dev/null 2>&1; then
                log "Opening Python REPL..." "$GREEN"
                echo "print('NMOX Python Environment Ready')"
                python3 -c "
import sys
sys.path.insert(0, '$NMOX_ROOT/x/lib/core')
import code
code.interact(banner='NMOX Python Environment', local=globals())
"
            else
                log "Python 3 not available" "$RED"
                exit 1
            fi
            ;;
        *)
            log "Unknown language: $lang" "$RED"
            echo "Supported languages: squeak, rust, javascript, python"
            exit 1
            ;;
    esac
}

# Execute code in specified language
exec_code() {
    local lang="$1"
    local code="$2"
    
    if ! is_kernel_running; then
        start_kernel
        sleep 1
    fi
    
    case "$lang" in
        "squeak")
            echo "$code" | squeak -headless "$SQUEAK_IMAGE"
            ;;
        "rust")
            echo "$code" | rustc --edition 2021 -o /tmp/nmox-rust-exec - && /tmp/nmox-rust-exec
            ;;
        "javascript")
            echo "$code" | node
            ;;
        "python")
            echo "$code" | python3
            ;;
        *)
            log "Unknown language: $lang" "$RED"
            exit 1
            ;;
    esac
}

# Show bridge status
show_bridge() {
    log "Cross-Language Bridge Status:" "$YELLOW"
    echo ""
    echo "X Object implementations available:"
    
    for core_file in "$NMOX_ROOT/x/lib/core/core."*; do
        if [ -f "$core_file" ]; then
            local ext=$(basename "$core_file" | cut -d. -f2)
            echo -e "  ${BLUE}$ext${NC}: ${GREEN}Available${NC}"
        fi
    done
    
    echo ""
    echo "WebAssembly modules:"
    find "$NMOX_ROOT/x/lib/wasm" -name "*.wasm" 2>/dev/null | while read -r wasm_file; do
        local name=$(basename "$wasm_file" .wasm)
        echo -e "  ${BLUE}$name${NC}: ${GREEN}Built${NC}"
    done
}

# Show real-time monitoring
show_monitor() {
    log "Starting real-time performance monitor..." "$GREEN"
    echo "Press Ctrl+C to stop monitoring"
    echo ""
    
    while true; do
        clear
        echo -e "${GREEN}NMOX Performance Monitor${NC}"
        echo "$(date)"
        echo ""
        
        # System resources
        echo -e "${YELLOW}System Resources:${NC}"
        if command -v top >/dev/null 2>&1; then
            top -l 1 -n 0 | grep "CPU usage\|PhysMem" || true
        fi
        
        # Kernel status
        echo ""
        echo -e "${YELLOW}Kernel Status:${NC}"
        if is_kernel_running; then
            echo -e "  Status: ${GREEN}Running${NC}"
            echo "  PID: $(cat "$KERNEL_STATE_DIR/kernel.pid")"
            echo "  Uptime: $(ps -o etime= -p "$(cat "$KERNEL_STATE_DIR/kernel.pid")" 2>/dev/null | tr -d ' ' || echo 'Unknown')"
        else
            echo -e "  Status: ${RED}Stopped${NC}"
        fi
        
        # Recent log entries
        echo ""
        echo -e "${YELLOW}Recent Activity:${NC}"
        if [ -f "$KERNEL_LOG" ]; then
            tail -n 5 "$KERNEL_LOG" 2>/dev/null || echo "No recent activity"
        fi
        
        sleep 5
    done
}

# Show logs
show_logs() {
    if [ -f "$KERNEL_LOG" ]; then
        tail -f "$KERNEL_LOG"
    else
        log "No kernel logs found" "$YELLOW"
    fi
}

# Main command handling
case "${1:-help}" in
    "start")
        start_kernel
        ;;
    "stop")
        stop_kernel
        ;;
    "status")
        show_status
        ;;
    "repl")
        open_repl "${2:-squeak}"
        ;;
    "exec")
        exec_code "$2" "$3"
        ;;
    "bridge")
        show_bridge
        ;;
    "monitor")
        show_monitor
        ;;
    "logs")
        show_logs
        ;;
    "help"|*)
        show_help
        ;;
esac