From vanessa@codefrau.net Tue Oct 15 00:01:51 2024
From: Vanessa Freudenberg <vanessa@codefrau.net>
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] Re: the form projector
Date: Mon, 14 Oct 2024 17:01:30 -0700
Message-ID:
 <CAOWGXNCprr29De1_phAMDov+Q2b9EfS-cuHRs6umo=Lo5AeLEA@mail.gmail.com>
In-Reply-To: <3754f3cacb84fccc86030ea678eabb1b@mail.msen.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============2643433728401653400=="

--===============2643433728401653400==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

So itâ€™s like WarpBlt but with perspective correction? Possibly the
primitive just needs one more argument?

Vanessa

On Mon, Oct 14, 2024 at 15:48 <lewis(a)mail.msen.com> wrote:

> I love it :-)
>
> Dave
>
>
> On 2024-10-14 18:25, Lauren Pullen wrote:
>
> Hi List,
>
> I'm not sure what to even call this, so I went with "Form Projector".
> You tell it where each corner of a form should end up on a canvas,
> clockwise from 0(a)0 on the form, and it makes it happen.  I piggybacked
> it onto PolygonMorph for demonstration.
>
> I made it to do 2-point perspective transforms, but you can see from
> images 2 and 3 that there's no requirement the destination corners also
> wind clockwise.  Look at that beautiful hyperbolic saddle in #3!
>
> I'll probably add it to the RayCaster project on squeaksource under the
> package name FormProjector once I test it further.
>
> Squeak-dev mailing list -- squeak-dev(a)lists.squeakfoundation.org
> To unsubscribe send an email to
> squeak-dev-leave(a)lists.squeakfoundation.org
>
> Squeak-dev mailing list -- squeak-dev(a)lists.squeakfoundation.org
> To unsubscribe send an email to
> squeak-dev-leave(a)lists.squeakfoundation.org



--===============2643433728401653400==
Content-Type: text/html
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="attachment.html"
MIME-Version: 1.0

PGRpdiBkaXI9ImF1dG8iPlNvIGl04oCZcyBsaWtlIFdhcnBCbHQgYnV0IHdpdGggcGVyc3BlY3Rp
dmUgY29ycmVjdGlvbj8gUG9zc2libHkgdGhlIHByaW1pdGl2ZSBqdXN0IG5lZWRzIG9uZSBtb3Jl
IGFyZ3VtZW50PzwvZGl2PjxkaXYgZGlyPSJhdXRvIj48YnI+PC9kaXY+PGRpdiBkaXI9ImF1dG8i
PlZhbmVzc2E8L2Rpdj48ZGl2Pjxicj48ZGl2IGNsYXNzPSJnbWFpbF9xdW90ZSI+PGRpdiBkaXI9
Imx0ciIgY2xhc3M9ImdtYWlsX2F0dHIiPk9uIE1vbiwgT2N0IDE0LCAyMDI0IGF0IDE1OjQ4ICZs
dDs8YSBocmVmPSJtYWlsdG86bGV3aXNAbWFpbC5tc2VuLmNvbSI+bGV3aXNAbWFpbC5tc2VuLmNv
bTwvYT4mZ3Q7IHdyb3RlOjxicj48L2Rpdj48YmxvY2txdW90ZSBjbGFzcz0iZ21haWxfcXVvdGUi
IHN0eWxlPSJtYXJnaW46MHB4IDBweCAwcHggMC44ZXg7Ym9yZGVyLWxlZnQtd2lkdGg6MXB4O2Jv
cmRlci1sZWZ0LXN0eWxlOnNvbGlkO3BhZGRpbmctbGVmdDoxZXg7Ym9yZGVyLWxlZnQtY29sb3I6
cmdiKDIwNCwyMDQsMjA0KSI+PGRpdiBzdHlsZT0iZm9udC1zaXplOjEwcHQ7Zm9udC1mYW1pbHk6
VmVyZGFuYSxHZW5ldmEsc2Fucy1zZXJpZiI+CjxwIHN0eWxlPSJmb250LWZhbWlseTpWZXJkYW5h
LEdlbmV2YSxzYW5zLXNlcmlmIj5JIGxvdmUgaXQgOi0pPC9wPgo8cCBzdHlsZT0iZm9udC1mYW1p
bHk6VmVyZGFuYSxHZW5ldmEsc2Fucy1zZXJpZiI+RGF2ZTwvcD48L2Rpdj48ZGl2IHN0eWxlPSJm
b250LXNpemU6MTBwdDtmb250LWZhbWlseTpWZXJkYW5hLEdlbmV2YSxzYW5zLXNlcmlmIj4KPGRp
diBpZD0ibV8tMTQwODMyMDY4Mjg2MzA4Njc5OXNpZ25hdHVyZSIgc3R5bGU9ImZvbnQtZmFtaWx5
OlZlcmRhbmEsR2VuZXZhLHNhbnMtc2VyaWYiPjwvZGl2Pgo8cCBzdHlsZT0iZm9udC1mYW1pbHk6
VmVyZGFuYSxHZW5ldmEsc2Fucy1zZXJpZiI+PGJyPjwvcD4KPHAgaWQ9Im1fLTE0MDgzMjA2ODI4
NjMwODY3OTlyZXBseS1pbnRybyIgc3R5bGU9ImZvbnQtZmFtaWx5OlZlcmRhbmEsR2VuZXZhLHNh
bnMtc2VyaWYiPk9uIDIwMjQtMTAtMTQgMTg6MjUsIExhdXJlbiBQdWxsZW4gd3JvdGU6PC9wPgo8
YmxvY2txdW90ZSB0eXBlPSJjaXRlIiBzdHlsZT0icGFkZGluZzowcHggMC40ZW07Ym9yZGVyLWxl
ZnQtd2lkdGg6MnB4O2JvcmRlci1sZWZ0LXN0eWxlOnNvbGlkO21hcmdpbjowcHg7Zm9udC1mYW1p
bHk6VmVyZGFuYSxHZW5ldmEsc2Fucy1zZXJpZjtib3JkZXItbGVmdC1jb2xvcjpyZ2IoMTYsMTYs
MjU1KSI+CjxkaXYgc3R5bGU9Im1hcmdpbjowcHg7cGFkZGluZzowcHg7Zm9udC1mYW1pbHk6bW9u
b3NwYWNlIj5IaSBMaXN0LDxicj48YnI+SSYjMzk7bSBub3Qgc3VyZSB3aGF0IHRvIGV2ZW4gY2Fs
bCB0aGlzLCBzbyBJIHdlbnQgd2l0aCAmcXVvdDtGb3JtIFByb2plY3RvciZxdW90Oy48YnI+WW91
IHRlbGwgaXQgd2hlcmUgZWFjaCBjb3JuZXIgb2YgYSBmb3JtIHNob3VsZCBlbmQgdXAgb24gYSBj
YW52YXMsPGJyPmNsb2Nrd2lzZSBmcm9tIDBAMCBvbiB0aGUgZm9ybSwgYW5kIGl0IG1ha2VzIGl0
IGhhcHBlbi7CoCBJIHBpZ2d5YmFja2VkPGJyPml0IG9udG8gUG9seWdvbk1vcnBoIGZvciBkZW1v
bnN0cmF0aW9uLjxicj48YnI+SSBtYWRlIGl0IHRvIGRvIDItcG9pbnQgcGVyc3BlY3RpdmUgdHJh
bnNmb3JtcywgYnV0IHlvdSBjYW4gc2VlIGZyb208YnI+aW1hZ2VzIDIgYW5kIDMgdGhhdCB0aGVy
ZSYjMzk7cyBubyByZXF1aXJlbWVudCB0aGUgZGVzdGluYXRpb24gY29ybmVycyBhbHNvPGJyPndp
bmQgY2xvY2t3aXNlLsKgIExvb2sgYXQgdGhhdCBiZWF1dGlmdWwgaHlwZXJib2xpYyBzYWRkbGUg
aW4gIzMhPGJyPjxicj5JJiMzOTtsbCBwcm9iYWJseSBhZGQgaXQgdG8gdGhlIFJheUNhc3RlciBw
cm9qZWN0IG9uIHNxdWVha3NvdXJjZSB1bmRlciB0aGU8YnI+cGFja2FnZSBuYW1lIEZvcm1Qcm9q
ZWN0b3Igb25jZSBJIHRlc3QgaXQgZnVydGhlci48L2Rpdj4KPGJyPgo8ZGl2IHN0eWxlPSJtYXJn
aW46MHB4O3BhZGRpbmc6MHB4O2ZvbnQtZmFtaWx5Om1vbm9zcGFjZSI+U3F1ZWFrLWRldiBtYWls
aW5nIGxpc3QgLS0gPGEgaHJlZj0ibWFpbHRvOnNxdWVhay1kZXZAbGlzdHMuc3F1ZWFrZm91bmRh
dGlvbi5vcmciIHRhcmdldD0iX2JsYW5rIiBzdHlsZT0iZm9udC1mYW1pbHk6bW9ub3NwYWNlIj5z
cXVlYWstZGV2QGxpc3RzLnNxdWVha2ZvdW5kYXRpb24ub3JnPC9hPjxicj5UbyB1bnN1YnNjcmli
ZSBzZW5kIGFuIGVtYWlsIHRvIDxhIGhyZWY9Im1haWx0bzpzcXVlYWstZGV2LWxlYXZlQGxpc3Rz
LnNxdWVha2ZvdW5kYXRpb24ub3JnIiB0YXJnZXQ9Il9ibGFuayIgc3R5bGU9ImZvbnQtZmFtaWx5
Om1vbm9zcGFjZSI+c3F1ZWFrLWRldi1sZWF2ZUBsaXN0cy5zcXVlYWtmb3VuZGF0aW9uLm9yZzwv
YT48L2Rpdj4KPC9ibG9ja3F1b3RlPgo8L2Rpdj4KU3F1ZWFrLWRldiBtYWlsaW5nIGxpc3QgLS0g
PGEgaHJlZj0ibWFpbHRvOnNxdWVhay1kZXZAbGlzdHMuc3F1ZWFrZm91bmRhdGlvbi5vcmciIHRh
cmdldD0iX2JsYW5rIj5zcXVlYWstZGV2QGxpc3RzLnNxdWVha2ZvdW5kYXRpb24ub3JnPC9hPjxi
cj4KVG8gdW5zdWJzY3JpYmUgc2VuZCBhbiBlbWFpbCB0byA8YSBocmVmPSJtYWlsdG86c3F1ZWFr
LWRldi1sZWF2ZUBsaXN0cy5zcXVlYWtmb3VuZGF0aW9uLm9yZyIgdGFyZ2V0PSJfYmxhbmsiPnNx
dWVhay1kZXYtbGVhdmVAbGlzdHMuc3F1ZWFrZm91bmRhdGlvbi5vcmc8L2E+PC9ibG9ja3F1b3Rl
PjwvZGl2PjwvZGl2Pgo=

--===============2643433728401653400==--


From eliot.miranda@gmail.com Tue Oct 15 00:39:59 2024
From: Eliot Miranda <eliot.miranda@gmail.com>
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] Deleting the initial SetCurrentDirectory invocation on
 Windows on start-up
Date: Mon, 14 Oct 2024 17:39:34 -0700
Message-ID:
 <CAC20JE1BcmcxmMm5GJtwhBNEGS-Xn-MG-X+-FK2Zeo638Ox07A@mail.gmail.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============2295274143857060683=="

--===============2295274143857060683==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit

Hi All,

    I am proposing to delete the initial setting of the VM's working
directory on WIndows.  Only on WIndows on start-up the VM sets the VM
process's working directory to that containing the image file. None of the
other platforms do this anymore, although it did happen on Mac at one
point.  Most applications don't care if this is done; they use facilities
such as FileDirectory, and the "FileDirectory default" directory is set by
accessing a primitive that answers the image path. Some applications care
very much, and they c are that the directory is *not* changed on startup.
It is to stop inconveniencing such applications that I am proposing the
change.

AFAICT the image is unaffected by running in a different directory, but I
wanted to check with Windows users to see if there are strong contrary
opinions.  P{l4ase let me know ASAP.

I am currently making the following changes:

- The initial Windows SetCurrentDirectory invocation done in sqMain will be
ifdeffed out (it is already excluded in Newspeak VM builds), so people
insisting on this can build their own VM and define something on the
command line to include the code

- the FIlePlugin is being extended with two new primitives,
primitiveGetWorkingDirectory and primitiveSetWorkingDirectory, which answer
the working directory as a UTF8 string, and set it from a UTF8 string,
respectively.

Let me know very soon iof and how you'll be affected by this if it will
affect you negatively.
_,,,^..^,,,_
best, Eliot



--===============2295274143857060683==
Content-Type: text/html
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="attachment.html"
MIME-Version: 1.0

PGRpdiBkaXI9Imx0ciI+PGRpdiBkaXI9Imx0ciI+PGRpdiBjbGFzcz0iZ21haWxfZGVmYXVsdCIg
c3R5bGU9ImZvbnQtc2l6ZTpzbWFsbCI+SGkgQWxsLDwvZGl2PjxkaXYgY2xhc3M9ImdtYWlsX2Rl
ZmF1bHQiIHN0eWxlPSJmb250LXNpemU6c21hbGwiPjxicj48L2Rpdj48ZGl2IGNsYXNzPSJnbWFp
bF9kZWZhdWx0IiBzdHlsZT0iZm9udC1zaXplOnNtYWxsIj7CoCDCoCBJIGFtIHByb3Bvc2luZyB0
byBkZWxldGUgdGhlIGluaXRpYWwgc2V0dGluZyBvZiB0aGUgVk0mIzM5O3Mgd29ya2luZyBkaXJl
Y3Rvcnkgb24gV0luZG93cy7CoCBPbmx5IG9uIFdJbmRvd3Mgb24gc3RhcnQtdXAgdGhlIFZNIHNl
dHMgdGhlIFZNIHByb2Nlc3MmIzM5O3Mgd29ya2luZyBkaXJlY3RvcnkgdG8gdGhhdMKgY29udGFp
bmluZyB0aGUgaW1hZ2UgZmlsZS4gTm9uZSBvZiB0aGUgb3RoZXIgcGxhdGZvcm1zwqBkbyB0aGlz
IGFueW1vcmUsIGFsdGhvdWdoIGl0IGRpZCBoYXBwZW4gb27CoE1hYyBhdMKgb25lIHBvaW50LsKg
IE1vc3QgYXBwbGljYXRpb25zIGRvbiYjMzk7dCBjYXJlIGlmIHRoaXMgaXMgZG9uZTsgdGhleSB1
c2UgZmFjaWxpdGllcyBzdWNoIGFzIEZpbGVEaXJlY3RvcnksIGFuZCB0aGUgJnF1b3Q7RmlsZURp
cmVjdG9yeSBkZWZhdWx0JnF1b3Q7IGRpcmVjdG9yeSBpcyBzZXQgYnkgYWNjZXNzaW5nIGEgcHJp
bWl0aXZlIHRoYXQgYW5zd2VycyB0aGUgaW1hZ2UgcGF0aC4gU29tZSBhcHBsaWNhdGlvbnMgY2Fy
ZSB2ZXJ5IG11Y2gsIGFuZCB0aGV5IGMgYXJlwqB0aGF0IHRoZSBkaXJlY3RvcnkgaXMgKm5vdCog
Y2hhbmdlZCBvbiBzdGFydHVwLiBJdCBpcyB0byBzdG9wIGluY29udmVuaWVuY2luZyBzdWNoIGFw
cGxpY2F0aW9ucyB0aGF0IEkgYW0gcHJvcG9zaW5nIHRoZSBjaGFuZ2UuPC9kaXY+PGRpdiBjbGFz
cz0iZ21haWxfZGVmYXVsdCIgc3R5bGU9ImZvbnQtc2l6ZTpzbWFsbCI+PGJyPjwvZGl2PjxkaXYg
Y2xhc3M9ImdtYWlsX2RlZmF1bHQiIHN0eWxlPSJmb250LXNpemU6c21hbGwiPkFGQUlDVCB0aGUg
aW1hZ2UgaXMgdW5hZmZlY3RlZCBieSBydW5uaW5nIGluIGEgZGlmZmVyZW50IGRpcmVjdG9yeSwg
YnV0IEkgd2FudGVkIHRvIGNoZWNrIHdpdGggV2luZG93cyB1c2VycyB0byBzZWUgaWYgdGhlcmUg
YXJlIHN0cm9uZ8KgY29udHJhcnkgb3BpbmlvbnMuwqAgUHtsNGFzZSBsZXQgbWUga25vdyBBU0FQ
LjwvZGl2PjxkaXYgY2xhc3M9ImdtYWlsX2RlZmF1bHQiIHN0eWxlPSJmb250LXNpemU6c21hbGwi
Pjxicj48L2Rpdj48ZGl2IGNsYXNzPSJnbWFpbF9kZWZhdWx0IiBzdHlsZT0iZm9udC1zaXplOnNt
YWxsIj5JIGFtIGN1cnJlbnRseSBtYWtpbmcgdGhlIGZvbGxvd2luZyBjaGFuZ2VzOjwvZGl2Pjxk
aXYgY2xhc3M9ImdtYWlsX2RlZmF1bHQiIHN0eWxlPSJmb250LXNpemU6c21hbGwiPjxicj48L2Rp
dj48ZGl2IGNsYXNzPSJnbWFpbF9kZWZhdWx0IiBzdHlsZT0iZm9udC1zaXplOnNtYWxsIj4tIFRo
ZSBpbml0aWFsIFdpbmRvd3PCoFNldEN1cnJlbnREaXJlY3RvcnkgaW52b2NhdGlvbiBkb25lIGlu
IHNxTWFpbiB3aWxsIGJlIGlmZGVmZmVkIG91dCAoaXQgaXMgYWxyZWFkeSBleGNsdWRlZCBpbiBO
ZXdzcGVhayBWTSBidWlsZHMpLCBzbyBwZW9wbGUgaW5zaXN0aW5nIG9uIHRoaXMgY2FuIGJ1aWxk
IHRoZWlyIG93biBWTSBhbmQgZGVmaW5lIHNvbWV0aGluZyBvbiB0aGUgY29tbWFuZCBsaW5lIHRv
IGluY2x1ZGUgdGhlIGNvZGU8L2Rpdj48ZGl2IGNsYXNzPSJnbWFpbF9kZWZhdWx0IiBzdHlsZT0i
Zm9udC1zaXplOnNtYWxsIj48YnI+PC9kaXY+PGRpdiBjbGFzcz0iZ21haWxfZGVmYXVsdCIgc3R5
bGU9ImZvbnQtc2l6ZTpzbWFsbCI+LSB0aGUgRklsZVBsdWdpbiBpcyBiZWluZyBleHRlbmRlZCB3
aXRowqB0d28gbmV3IHByaW1pdGl2ZXMsIHByaW1pdGl2ZUdldFdvcmtpbmdEaXJlY3RvcnkgYW5k
IHByaW1pdGl2ZVNldFdvcmtpbmdEaXJlY3RvcnksIHdoaWNoIGFuc3dlciB0aGUgd29ya2luZyBk
aXJlY3RvcnkgYXMgYSBVVEY4IHN0cmluZywgYW5kIHNldCBpdCBmcm9tIGEgVVRGOCBzdHJpbmcs
IHJlc3BlY3RpdmVseS48L2Rpdj48ZGl2IGNsYXNzPSJnbWFpbF9kZWZhdWx0IiBzdHlsZT0iZm9u
dC1zaXplOnNtYWxsIj48YnI+PC9kaXY+PGRpdiBjbGFzcz0iZ21haWxfZGVmYXVsdCIgc3R5bGU9
ImZvbnQtc2l6ZTpzbWFsbCI+TGV0IG1lIGtub3cgdmVyeSBzb29uIGlvZiBhbmQgaG93IHlvdSYj
Mzk7bGwgYmUgYWZmZWN0ZWQgYnkgdGhpcyBpZiBpdCB3aWxsIGFmZmVjdCB5b3UgbmVnYXRpdmVs
eS48L2Rpdj48ZGl2IGRpcj0ibHRyIiBjbGFzcz0iZ21haWxfc2lnbmF0dXJlIiBkYXRhLXNtYXJ0
bWFpbD0iZ21haWxfc2lnbmF0dXJlIj48ZGl2IGRpcj0ibHRyIj48ZGl2PjxzcGFuIHN0eWxlPSJm
b250LXNpemU6c21hbGw7Ym9yZGVyLWNvbGxhcHNlOnNlcGFyYXRlIj48ZGl2Pl8sLCxeLi5eLCws
Xzxicj48L2Rpdj48ZGl2PmJlc3QswqBFbGlvdDwvZGl2Pjwvc3Bhbj48L2Rpdj48L2Rpdj48L2Rp
dj48L2Rpdj4KPC9kaXY+Cg==

--===============2295274143857060683==--


From eliot.miranda@gmail.com Tue Oct 15 00:42:49 2024
From: Eliot Miranda <eliot.miranda@gmail.com>
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] Re: The Inbox: Compiler-eem.508.mcz
Date: Mon, 14 Oct 2024 17:42:23 -0700
Message-ID:
 <CAC20JE1S25G0pyGF5dUfTxKPUoYUnB4miV6E3vmt2tp-Ta8RSA@mail.gmail.com>
In-Reply-To: <1728946444-278069@mid.hostedemail.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============0001566919659058530=="

--===============0001566919659058530==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

On Mon, Oct 14, 2024 at 3:54â€¯PM <lewis(a)mail.msen.com> wrote:

> I have to confess that I have not put any time into trying this, but based
> on the explanations in the commit notice this should be a very worthwhile
> update, and I hope it finds its way into trunk soon. I would anticipate
> that it will also be beneficial for C code generation in VMMaker, where
> method comments get translated into C comments in the generated code.
>

I'm liking it so far. If no one objects I'll likely move it into trunk at
the end of the week. Certainly it results in more comments making it into
VMMaker's generated code.

>
> Dave
>
> ---
> Sent from Squeak Inbox Talk
>
> On 2024-10-12T21:10:59+00:00, commits(a)source.squeak.org wrote:
>
> > A new version of Compiler was added to project The Inbox:
> > http://source.squeak.org/inbox/Compiler-eem.508.mcz
> >
> > ==================== Summary ====================
> >
> > Name: Compiler-eem.508
> > Author: eem
> > Time: 12 October 2024, 2:10:57.018117 pm
> > UUID: 0354bd98-8234-4170-8b32-5a1845079c3f
> > Ancestors: Compiler-eem.507
> >
> > Improve the handling of comments, within the existing interpretation of
> comments, whcih is that they trail statements.
> > - If a comment is clearly associated with the following statement
> (because there is a newline between the end of the statement and the start
> of the comment) then ascribe the comment to a CommentNode which is inserted
> into the parse tree before the next statement.
> > - print a comment belonging to a block immediately before the block, not
> after its arguments and temporaries.
> > - add a preference to define how comments are printed in
> pretty-printing. The old implementation broke comments at word boundaries
> after 450 points in the defaut font. This somewhat arbitrary value doesn't
> work well with high-resolution displays with a scale factor and results in
> comments getting broken many times, typically ending up elongated. The
> preference defines the number of points at which to break comments at word
> boundaries, and if it is zero then comments are not broken.
> >
> > With these changes and the preference set to zero pretty printing
> methods with comments seems much improved. Comments intended to belong to
> the next statement are printed before that next statement. Comments before
> blocks are printed before blocks not within them.
> >
> > Submitted for review & storage.
> >
> > =============== Diff against Compiler-eem.507 ===============
> >
> > Item was changed:
> >   ----- Method: BlockNode>>printOn:indent: (in category 'printing') -----
> >   printOn: aStream indent: level
> >
> >       "statements size <= 1 ifFalse: [aStream crtab: level]."
> > +     comment ifNotNil:
> > +             [self printCommentOn: aStream indent: level.
> > +              aStream crtab: level].
> >       aStream nextPut: $[.
> >       self printArgumentsOn: aStream indent: level.
> >       (self printTemporaries: temporaries on: aStream doPrior: [])
> ifTrue:
> >               ["If >0 temps and >1 statement, put all statements on
> separate lines"
> >                statements size > 1
> >                       ifTrue: [aStream crtab: level]
> >                       ifFalse: [aStream space]].
> >       self printStatementsOn: aStream indent: level.
> >       aStream nextPut: $]!
> >
> > Item was changed:
> >   ----- Method: BlockNode>>printStatementsOn:indent: (in category
> 'printing') -----
> >   printStatementsOn: aStream indent: levelOrZero
> >       | len shown thisStatement level |
> >       level := 1 max: levelOrZero.
> > -     comment ifNotNil:
> > -             [self printCommentOn: aStream indent: level.
> > -             aStream crtab: level].
> >       len := shown := statements size.
> >       (levelOrZero = 0 "top level" and: [statements last isReturnSelf])
> >               ifTrue: [shown := 1 max: shown - 1]
> >               ifFalse: ["should a trailing nil be printed or not? Not if
> it is an implicit result, not if the last statement answers nil."
> >                               ((arguments size > 0 and: [len = 0])
> >                                or: [((statements at: len) isJust:
> NodeNil)
> >                                       and: [len = 1
> >                                               or: [len > 1
> >                                                       and: [(statements
> at: len - 1) isMessageNode
> >                                                       and: [(statements
> at: len - 1) isNilIf
> >                                                               or:
> [(statements at: len - 1) isOptimizedWhileLoop]]]]]])
> >                                       ifTrue: [shown := shown - 1]].
> >       1 to: shown do:
> >               [:i |
> >               thisStatement := statements at: i.
> >               thisStatement printOn: aStream indent: level.
> >               i < shown ifTrue: [aStream nextPut: $.; crtab: level].
> >               (thisStatement comment ~~ nil and: [thisStatement comment
> size > 0])
> >                       ifTrue:
> >                               [i = shown ifTrue: [aStream crtab: level].
> >                               thisStatement printCommentOn: aStream
> indent: level.
> >                               i < shown ifTrue: [aStream crtab: level]]]!
> >
> > Item was added:
> > + ----- Method:
> CommentNode>>analyseTempsWithin:rootNode:assignmentPools: (in category
> 'closure analysis') -----
> > + analyseTempsWithin: scopeBlock rootNode: rootNode assignmentPools:
> assignmentPools!
> >
> > Item was added:
> > + ----- Method: CommentNode>>emitCodeForEffect:encoder: (in category
> 'code generation') -----
> > + emitCodeForEffect: stack encoder: encoder
> > +     "this is a noop"!
> >
> > Item was added:
> > + ----- Method: CommentNode>>emitCodeForValue:encoder: (in category
> 'code generation') -----
> > + emitCodeForValue: stack encoder: encoder
> > +     self shouldNotImplement!
> >
> > Item was added:
> > + ----- Method: CommentNode>>sizeCodeForEffect: (in category 'code
> generation') -----
> > + sizeCodeForEffect: encoder
> > +     ^0!
> >
> > Item was added:
> > + ----- Method: CommentNode>>sizeCodeForLoad:forValue: (in category
> 'code generation') -----
> > + sizeCodeForLoad: encoder forValue: forValue
> > +     self shouldNotImplement!
> >
> > Item was added:
> > + ----- Method: CommentNode>>sizeCodeForValue: (in category 'code
> generation') -----
> > + sizeCodeForValue: encoder
> > +     self shouldNotImplement!
> >
> > Item was changed:
> >   Object subclass: #ParseNode
> >       instanceVariableNames: 'comment pc'
> > +     classVariableNames: 'CodeBases CodeLimits LdFalse LdInstType
> LdLitIndType LdLitType LdMinus1 LdNil LdSelf LdSuper LdTempType
> LdThisContext LdTrue LoadLong NodeFalse NodeNil NodeSelf NodeSuper
> NodeThisContext NodeTrue PrettyPrintCommentWidth Send SendPlus SendType
> StdLiterals StdSelectors StdVariables'
> > -     classVariableNames: 'CodeBases CodeLimits LdFalse LdInstType
> LdLitIndType LdLitType LdMinus1 LdNil LdSelf LdSuper LdTempType
> LdThisContext LdTrue LoadLong NodeFalse NodeNil NodeSelf NodeSuper
> NodeThisContext NodeTrue Send SendPlus SendType StdLiterals StdSelectors
> StdVariables'
> >       poolDictionaries: ''
> >       category: 'Compiler-ParseNodes'!
> >
> >   !ParseNode commentStamp: '<historical>' prior: 0!
> >   This superclass of most compiler/decompiler classes declares common
> class variables, default messages, and the code emitters for jumps. Some of
> the class variables are initialized here; the rest are initialized in class
> VariableNode.!
> >
> > Item was added:
> > + ----- Method: ParseNode class>>prefPrettyPrintCommentWidthInPoints (in
> category 'preferences') -----
> > + prefPrettyPrintCommentWidthInPoints
> > +     "Accessor for the system-wide preference"
> > +
> > +     <preference: 'Max width in points of pretty-printed comments, if
> non-zero'
> > +             category: 'Compiler'
> > +             description: 'If non-zero, the pretty-printer will break
> comments into lines at word boundaries after this many points in the
> default font.'
> > +             type: #Number>
> > +     ^PrettyPrintCommentWidth ifNil: [0]!
> >
> > Item was changed:
> >   ----- Method: ParseNode>>printSingleComment:on:indent: (in category
> 'private') -----
> >   printSingleComment: aString on: aStream indent: indent
> >       "Print the comment string, assuming it has been indented indent
> tabs.
> > +      If the comment width preference is non-zero, break the string at
> word breaks,
> > +      given the widths in the default font, at that many points."
> > -     Break the string at word breaks, given the widths in the default
> > -     font, at 450 points."
> >
> >       | readStream word position lineBreak font wordWidth tabWidth
> spaceWidth lastChar |
> >       readStream := ReadStream on: aString.
> > +     (lineBreak := self class prefPrettyPrintCommentWidthInPoints
> isZero) ifTrue:
> > +             [[readStream skipSeparators.
> > +              aStream nextPutAll: (readStream upTo: Character cr).
> > +              readStream atEnd] whileFalse:
> > +                     [aStream crtab: indent].
> > +             ^self].
> >       font := TextStyle default defaultFont.
> >       tabWidth := TextStyle default tabWidth.
> >       spaceWidth := font widthOf: Character space.
> >       position := indent * tabWidth.
> > -     lineBreak := 450.
> >       [readStream atEnd]
> >               whileFalse:
> >                       [word := self nextWordFrom: readStream
> setCharacter: [:lc | lastChar := lc].
> >                       wordWidth := word inject: 0 into: [:width :char |
> width + (font widthOf: char)].
> >                       position := position + wordWidth.
> >                       position > lineBreak
> >                               ifTrue:
> >                                       [aStream skip: -1; crtab: indent.
> >                                       position := indent * tabWidth +
> wordWidth + spaceWidth.
> >                                       lastChar = Character cr
> >                                               ifTrue: [[readStream
> peekFor: Character tab] whileTrue].
> >                                       word isEmpty ifFalse: [aStream
> nextPutAll: word; space]]
> >                               ifFalse:
> >                                       [aStream nextPutAll: word.
> >                                       readStream atEnd
> >                                               ifFalse:
> >                                                       [position :=
> position + spaceWidth.
> >                                                       aStream space].
> >                                       lastChar = Character cr
> >                                               ifTrue:
> >                                                       [aStream skip: -1;
> crtab: indent.
> >                                                       position := indent
> * tabWidth.
> >                                                       [readStream
> peekFor: Character tab] whileTrue]]]!
> >
> > Item was changed:
> >   ----- Method: Parser>>addComment (in category 'private') -----
> >   addComment
> > +     "Take care to add the comment to the node it is associated with.
> > +      If there is a new line at the end of the current parseNode (which
> > +      ends at hereMark) then consider the comment as belong ing to the
> next statement."
> > +
> > +     | character |
> > -
> >       (parseNode ~~ nil
> > +      and: [currentComment ~~ nil]) ifTrue:
> > +             [character := hereChar == DoItCharacter
> > +                                             ifTrue: [hereChar]
> > +                                             ifFalse: [source
> originalContents at: hereMark + 1].
> > +              (character == Character cr or: [character == Character
> lf]) ifFalse:
> > -      and: [currentComment ~~ nil])
> > -             ifTrue:
> >                       [parseNode comment: currentComment.
> > +                      currentComment := nil]]!
> > -                     currentComment := nil]!
> >
> > Item was changed:
> >   ----- Method: Parser>>blockExpression (in category 'expression types')
> -----
> >   blockExpression
> >       "[ ({:var} |) (| {temps} |) (statements) ] => BlockNode."
> >
> >       | blockNode variableNodes temporaryBlockVariables start |
> >       blockNode := BlockNode new.
> > +     blockNode comment: currentComment.
> > +     currentComment := nil.
> >       variableNodes := OrderedCollection new.
> >       start := prevMark + requestorOffset.
> >       "Gather parameters."
> >       [self match: #colon] whileTrue:
> >               [variableNodes addLast: (encoder bindBlockArg: self
> argumentName within: blockNode)].
> >       (variableNodes size > 0 & (hereType ~~ #rightBracket) and: [(self
> match: #verticalBar) not]) ifTrue:
> >               [^self expected: 'Vertical bar'].
> >
> >       temporaryBlockVariables := self temporaryBlockVariablesFor:
> blockNode.
> >       self statements: variableNodes innerBlock: true blockNode:
> blockNode.
> >       blockNode temporaries: temporaryBlockVariables.
> >
> >       (self match: #rightBracket) ifFalse: [^self expected: 'Period or
> right bracket'].
> >
> >       blockNode noteSourceRangeStart: start end: self endOfLastToken
> encoder: encoder.
> >
> >       "The scope of the parameters and temporary block variables is no
> longer active."
> >       temporaryBlockVariables do: [:variable | variable scope: -1].
> >       variableNodes do: [:variable | variable scope: -1]!
> >
> > Item was changed:
> >   ----- Method: Parser>>statements:innerBlock:blockNode: (in category
> 'expression types') -----
> >   statements: argNodes innerBlock: inner blockNode: theBlockNode
> >
> > +     | stmts returns start savedComment |
> > +     inner
> > +             ifTrue: "give comment to message which has this block as
> an argument, not to this block."
> > +                     [savedComment := currentComment]
> > +             ifFalse:"give initial comment to block, since others trail
> statements"
> > +                     [theBlockNode comment: currentComment].
> > -     | stmts returns start |
> > -     "give initial comment to block, since others trail statements"
> > -     theBlockNode comment: currentComment.
> >       currentComment := nil.
> >       stmts := OrderedCollection new.
> >       returns := false.
> >       hereType ~~ #rightBracket ifTrue:
> >               [[theBlockNode startOfLastStatement: (start := self
> startOfNextToken).
> > +              currentComment ifNotNil:
> > +                     [stmts addLast: (CommentNode new comment:
> currentComment).
> > +                      currentComment := nil].
> >                 (returns := self matchReturn)
> >                       ifTrue:
> >                               [self expression ifFalse:
> >                                       [^self expected: 'Expression to
> return'].
> >                                self addComment.
> >                                stmts addLast: (parseNode isReturningIf
> >                                                               ifTrue:
> [parseNode]
> >                                                               ifFalse:
> [ReturnNode new
> >
>              expr: parseNode
> >
>              encoder: encoder
> >
>              sourceRange: (start to: self endOfLastToken)])]
> >                       ifFalse:
> >                               [self expression
> >                                       ifTrue:
> >                                               [self addComment.
> >                                               "if both branches return,
> following code is unreachable, let's avoid this.
> >                                               But only if interactive,
> we don't want to prevent loading of legacy code"
> >                                               self interactive ifTrue:
> [returns := parseNode isReturningIf].
> >                                                stmts addLast: parseNode]
> >                                       ifFalse:
> >                                               [self addComment.
> >                                                stmts size = 0 ifTrue:
> >                                                       [stmts addLast:
> >                                                               (encoder
> encodeVariable:
> >
>  (inner ifTrue: ['nil'] ifFalse: ['self']))]]].
> >                 returns ifTrue:
> >                       [self match: #period.
> >                        (hereType == #rightBracket or: [hereType ==
> #doIt]) ifFalse:
> >                               [^self expected: 'End of block']].
> >                 returns not and: [self match: #period]] whileTrue].
> >       theBlockNode
> >               arguments: argNodes
> >               statements: stmts
> >               returns: returns
> >               from: encoder.
> >       parseNode := theBlockNode.
> > +     currentComment := savedComment.
> >       ^true!
> Squeak-dev mailing list -- squeak-dev(a)lists.squeakfoundation.org
> To unsubscribe send an email to
> squeak-dev-leave(a)lists.squeakfoundation.org
>


-- 
_,,,^..^,,,_
best, Eliot



--===============0001566919659058530==
Content-Type: text/html
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="attachment.html"
MIME-Version: 1.0

PGRpdiBkaXI9Imx0ciI+PGRpdiBkaXI9Imx0ciI+PGRpdiBjbGFzcz0iZ21haWxfZGVmYXVsdCIg
c3R5bGU9ImZvbnQtc2l6ZTpzbWFsbCI+PGJyPjwvZGl2PjwvZGl2Pjxicj48ZGl2IGNsYXNzPSJn
bWFpbF9xdW90ZSI+PGRpdiBkaXI9Imx0ciIgY2xhc3M9ImdtYWlsX2F0dHIiPk9uIE1vbiwgT2N0
IDE0LCAyMDI0IGF0IDM6NTTigK9QTSAmbHQ7PGEgaHJlZj0ibWFpbHRvOmxld2lzQG1haWwubXNl
bi5jb20iPmxld2lzQG1haWwubXNlbi5jb208L2E+Jmd0OyB3cm90ZTo8YnI+PC9kaXY+PGJsb2Nr
cXVvdGUgY2xhc3M9ImdtYWlsX3F1b3RlIiBzdHlsZT0ibWFyZ2luOjBweCAwcHggMHB4IDAuOGV4
O2JvcmRlci1sZWZ0LXdpZHRoOjFweDtib3JkZXItbGVmdC1zdHlsZTpzb2xpZDtib3JkZXItbGVm
dC1jb2xvcjpyZ2IoMjA0LDIwNCwyMDQpO3BhZGRpbmctbGVmdDoxZXgiPkkgaGF2ZSB0byBjb25m
ZXNzIHRoYXQgSSBoYXZlIG5vdCBwdXQgYW55IHRpbWUgaW50byB0cnlpbmcgdGhpcywgYnV0IGJh
c2VkIG9uIHRoZSBleHBsYW5hdGlvbnMgaW4gdGhlIGNvbW1pdCBub3RpY2UgdGhpcyBzaG91bGQg
YmUgYSB2ZXJ5IHdvcnRod2hpbGUgdXBkYXRlLCBhbmQgSSBob3BlIGl0IGZpbmRzIGl0cyB3YXkg
aW50byB0cnVuayBzb29uLiBJIHdvdWxkIGFudGljaXBhdGUgdGhhdCBpdCB3aWxsIGFsc28gYmUg
YmVuZWZpY2lhbCBmb3IgQyBjb2RlIGdlbmVyYXRpb24gaW4gVk1NYWtlciwgd2hlcmUgbWV0aG9k
IGNvbW1lbnRzIGdldCB0cmFuc2xhdGVkIGludG8gQyBjb21tZW50cyBpbiB0aGUgZ2VuZXJhdGVk
IGNvZGUuPGJyPjwvYmxvY2txdW90ZT48ZGl2Pjxicj48L2Rpdj48ZGl2IGNsYXNzPSJnbWFpbF9k
ZWZhdWx0IiBzdHlsZT0iZm9udC1zaXplOnNtYWxsIj5JJiMzOTttIGxpa2luZyBpdCBzbyBmYXIu
IElmIG5vIG9uZSBvYmplY3RzIEkmIzM5O2xsIGxpa2VseSBtb3ZlIGl0IGludG8gdHJ1bmsgYXQg
dGhlIGVuZCBvZiB0aGUgd2Vlay4gQ2VydGFpbmx5IGl0IHJlc3VsdHMgaW4gbW9yZSBjb21tZW50
cyBtYWtpbmcgaXQgaW50byBWTU1ha2VyJiMzOTtzIGdlbmVyYXRlZCBjb2RlLjwvZGl2PjxibG9j
a3F1b3RlIGNsYXNzPSJnbWFpbF9xdW90ZSIgc3R5bGU9Im1hcmdpbjowcHggMHB4IDBweCAwLjhl
eDtib3JkZXItbGVmdC13aWR0aDoxcHg7Ym9yZGVyLWxlZnQtc3R5bGU6c29saWQ7Ym9yZGVyLWxl
ZnQtY29sb3I6cmdiKDIwNCwyMDQsMjA0KTtwYWRkaW5nLWxlZnQ6MWV4Ij4NCjxicj4NCkRhdmU8
YnI+DQo8YnI+DQotLS08YnI+DQpTZW50IGZyb20gU3F1ZWFrIEluYm94IFRhbGs8YnI+DQo8YnI+
DQpPbiAyMDI0LTEwLTEyVDIxOjEwOjU5KzAwOjAwLCA8YSBocmVmPSJtYWlsdG86Y29tbWl0c0Bz
b3VyY2Uuc3F1ZWFrLm9yZyIgdGFyZ2V0PSJfYmxhbmsiPmNvbW1pdHNAc291cmNlLnNxdWVhay5v
cmc8L2E+IHdyb3RlOjxicj4NCjxicj4NCiZndDsgQSBuZXcgdmVyc2lvbiBvZiBDb21waWxlciB3
YXMgYWRkZWQgdG8gcHJvamVjdCBUaGUgSW5ib3g6PGJyPg0KJmd0OyA8YSBocmVmPSJodHRwOi8v
c291cmNlLnNxdWVhay5vcmcvaW5ib3gvQ29tcGlsZXItZWVtLjUwOC5tY3oiIHJlbD0ibm9yZWZl
cnJlciIgdGFyZ2V0PSJfYmxhbmsiPmh0dHA6Ly9zb3VyY2Uuc3F1ZWFrLm9yZy9pbmJveC9Db21w
aWxlci1lZW0uNTA4Lm1jejwvYT48YnI+DQomZ3Q7IDxicj4NCiZndDsgPT09PT09PT09PT09PT09
PT09PT0gU3VtbWFyeSA9PT09PT09PT09PT09PT09PT09PTxicj4NCiZndDsgPGJyPg0KJmd0OyBO
YW1lOiBDb21waWxlci1lZW0uNTA4PGJyPg0KJmd0OyBBdXRob3I6IGVlbTxicj4NCiZndDsgVGlt
ZTogMTIgT2N0b2JlciAyMDI0LCAyOjEwOjU3LjAxODExNyBwbTxicj4NCiZndDsgVVVJRDogMDM1
NGJkOTgtODIzNC00MTcwLThiMzItNWExODQ1MDc5YzNmPGJyPg0KJmd0OyBBbmNlc3RvcnM6IENv
bXBpbGVyLWVlbS41MDc8YnI+DQomZ3Q7IDxicj4NCiZndDsgSW1wcm92ZSB0aGUgaGFuZGxpbmcg
b2YgY29tbWVudHMsIHdpdGhpbiB0aGUgZXhpc3RpbmcgaW50ZXJwcmV0YXRpb24gb2YgY29tbWVu
dHMsIHdoY2loIGlzIHRoYXQgdGhleSB0cmFpbCBzdGF0ZW1lbnRzLjxicj4NCiZndDsgLSBJZiBh
IGNvbW1lbnQgaXMgY2xlYXJseSBhc3NvY2lhdGVkIHdpdGggdGhlIGZvbGxvd2luZyBzdGF0ZW1l
bnQgKGJlY2F1c2UgdGhlcmUgaXMgYSBuZXdsaW5lIGJldHdlZW4gdGhlIGVuZCBvZiB0aGUgc3Rh
dGVtZW50IGFuZCB0aGUgc3RhcnQgb2YgdGhlIGNvbW1lbnQpIHRoZW4gYXNjcmliZSB0aGUgY29t
bWVudCB0byBhIENvbW1lbnROb2RlIHdoaWNoIGlzIGluc2VydGVkIGludG8gdGhlIHBhcnNlIHRy
ZWUgYmVmb3JlIHRoZSBuZXh0IHN0YXRlbWVudC48YnI+DQomZ3Q7IC0gcHJpbnQgYSBjb21tZW50
IGJlbG9uZ2luZyB0byBhIGJsb2NrIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgYmxvY2ssIG5vdCBh
ZnRlciBpdHMgYXJndW1lbnRzIGFuZCB0ZW1wb3Jhcmllcy48YnI+DQomZ3Q7IC0gYWRkIGEgcHJl
ZmVyZW5jZSB0byBkZWZpbmUgaG93IGNvbW1lbnRzIGFyZSBwcmludGVkIGluIHByZXR0eS1wcmlu
dGluZy4gVGhlIG9sZCBpbXBsZW1lbnRhdGlvbiBicm9rZSBjb21tZW50cyBhdCB3b3JkIGJvdW5k
YXJpZXMgYWZ0ZXIgNDUwIHBvaW50cyBpbiB0aGUgZGVmYXV0IGZvbnQuIFRoaXMgc29tZXdoYXQg
YXJiaXRyYXJ5IHZhbHVlIGRvZXNuJiMzOTt0IHdvcmsgd2VsbCB3aXRoIGhpZ2gtcmVzb2x1dGlv
biBkaXNwbGF5cyB3aXRoIGEgc2NhbGUgZmFjdG9yIGFuZCByZXN1bHRzIGluIGNvbW1lbnRzIGdl
dHRpbmcgYnJva2VuIG1hbnkgdGltZXMsIHR5cGljYWxseSBlbmRpbmcgdXAgZWxvbmdhdGVkLiBU
aGUgcHJlZmVyZW5jZSBkZWZpbmVzIHRoZSBudW1iZXIgb2YgcG9pbnRzIGF0IHdoaWNoIHRvIGJy
ZWFrIGNvbW1lbnRzIGF0IHdvcmQgYm91bmRhcmllcywgYW5kIGlmIGl0IGlzIHplcm8gdGhlbiBj
b21tZW50cyBhcmUgbm90IGJyb2tlbi48YnI+DQomZ3Q7IDxicj4NCiZndDsgV2l0aCB0aGVzZSBj
aGFuZ2VzIGFuZCB0aGUgcHJlZmVyZW5jZSBzZXQgdG8gemVybyBwcmV0dHkgcHJpbnRpbmcgbWV0
aG9kcyB3aXRoIGNvbW1lbnRzIHNlZW1zIG11Y2ggaW1wcm92ZWQuIENvbW1lbnRzIGludGVuZGVk
IHRvIGJlbG9uZyB0byB0aGUgbmV4dCBzdGF0ZW1lbnQgYXJlIHByaW50ZWQgYmVmb3JlIHRoYXQg
bmV4dCBzdGF0ZW1lbnQuIENvbW1lbnRzIGJlZm9yZSBibG9ja3MgYXJlIHByaW50ZWQgYmVmb3Jl
IGJsb2NrcyBub3Qgd2l0aGluIHRoZW0uPGJyPg0KJmd0OyA8YnI+DQomZ3Q7IFN1Ym1pdHRlZCBm
b3IgcmV2aWV3ICZhbXA7IHN0b3JhZ2UuPGJyPg0KJmd0OyA8YnI+DQomZ3Q7ID09PT09PT09PT09
PT09PSBEaWZmIGFnYWluc3QgQ29tcGlsZXItZWVtLjUwNyA9PT09PT09PT09PT09PT08YnI+DQom
Z3Q7IDxicj4NCiZndDsgSXRlbSB3YXMgY2hhbmdlZDo8YnI+DQomZ3Q7wqAgwqAtLS0tLSBNZXRo
b2Q6IEJsb2NrTm9kZSZndDsmZ3Q7cHJpbnRPbjppbmRlbnQ6IChpbiBjYXRlZ29yeSAmIzM5O3By
aW50aW5nJiMzOTspIC0tLS0tPGJyPg0KJmd0O8KgIMKgcHJpbnRPbjogYVN0cmVhbSBpbmRlbnQ6
IGxldmVsPGJyPg0KJmd0O8KgIMKgPGJyPg0KJmd0O8KgIMKgIMKgIMKgJnF1b3Q7c3RhdGVtZW50
cyBzaXplICZsdDs9IDEgaWZGYWxzZTogW2FTdHJlYW0gY3J0YWI6IGxldmVsXS4mcXVvdDs8YnI+
DQomZ3Q7ICvCoCDCoCDCoGNvbW1lbnQgaWZOb3ROaWw6IDxicj4NCiZndDsgK8KgIMKgIMKgIMKg
IMKgIMKgIMKgW3NlbGYgcHJpbnRDb21tZW50T246IGFTdHJlYW0gaW5kZW50OiBsZXZlbC48YnI+
DQomZ3Q7ICvCoCDCoCDCoCDCoCDCoCDCoCDCoCBhU3RyZWFtIGNydGFiOiBsZXZlbF0uPGJyPg0K
Jmd0O8KgIMKgIMKgIMKgYVN0cmVhbSBuZXh0UHV0OiAkWy48YnI+DQomZ3Q7wqAgwqAgwqAgwqBz
ZWxmIHByaW50QXJndW1lbnRzT246IGFTdHJlYW0gaW5kZW50OiBsZXZlbC48YnI+DQomZ3Q7wqAg
wqAgwqAgwqAoc2VsZiBwcmludFRlbXBvcmFyaWVzOiB0ZW1wb3JhcmllcyBvbjogYVN0cmVhbSBk
b1ByaW9yOiBbXSkgaWZUcnVlOjxicj4NCiZndDvCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoFsmcXVv
dDtJZiAmZ3Q7MCB0ZW1wcyBhbmQgJmd0OzEgc3RhdGVtZW50LCBwdXQgYWxsIHN0YXRlbWVudHMg
b24gc2VwYXJhdGUgbGluZXMmcXVvdDs8YnI+DQomZ3Q7wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAg
c3RhdGVtZW50cyBzaXplICZndDsgMTxicj4NCiZndDvCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDC
oCDCoCDCoCDCoGlmVHJ1ZTogW2FTdHJlYW0gY3J0YWI6IGxldmVsXTxicj4NCiZndDvCoCDCoCDC
oCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoGlmRmFsc2U6IFthU3RyZWFtIHNwYWNlXV0uPGJy
Pg0KJmd0O8KgIMKgIMKgIMKgc2VsZiBwcmludFN0YXRlbWVudHNPbjogYVN0cmVhbSBpbmRlbnQ6
IGxldmVsLjxicj4NCiZndDvCoCDCoCDCoCDCoGFTdHJlYW0gbmV4dFB1dDogJF0hPGJyPg0KJmd0
OyA8YnI+DQomZ3Q7IEl0ZW0gd2FzIGNoYW5nZWQ6PGJyPg0KJmd0O8KgIMKgLS0tLS0gTWV0aG9k
OiBCbG9ja05vZGUmZ3Q7Jmd0O3ByaW50U3RhdGVtZW50c09uOmluZGVudDogKGluIGNhdGVnb3J5
ICYjMzk7cHJpbnRpbmcmIzM5OykgLS0tLS08YnI+DQomZ3Q7wqAgwqBwcmludFN0YXRlbWVudHNP
bjogYVN0cmVhbSBpbmRlbnQ6IGxldmVsT3JaZXJvPGJyPg0KJmd0O8KgIMKgIMKgIMKgfCBsZW4g
c2hvd24gdGhpc1N0YXRlbWVudCBsZXZlbCB8PGJyPg0KJmd0O8KgIMKgIMKgIMKgbGV2ZWwgOj0g
MSBtYXg6IGxldmVsT3JaZXJvLjxicj4NCiZndDsgLcKgIMKgIMKgY29tbWVudCBpZk5vdE5pbDog
PGJyPg0KJmd0OyAtwqAgwqAgwqAgwqAgwqAgwqAgwqBbc2VsZiBwcmludENvbW1lbnRPbjogYVN0
cmVhbSBpbmRlbnQ6IGxldmVsLjxicj4NCiZndDsgLcKgIMKgIMKgIMKgIMKgIMKgIMKgYVN0cmVh
bSBjcnRhYjogbGV2ZWxdLjxicj4NCiZndDvCoCDCoCDCoCDCoGxlbiA6PSBzaG93biA6PSBzdGF0
ZW1lbnRzIHNpemUuPGJyPg0KJmd0O8KgIMKgIMKgIMKgKGxldmVsT3JaZXJvID0gMCAmcXVvdDt0
b3AgbGV2ZWwmcXVvdDsgYW5kOiBbc3RhdGVtZW50cyBsYXN0IGlzUmV0dXJuU2VsZl0pPGJyPg0K
Jmd0O8KgIMKgIMKgIMKgIMKgIMKgIMKgIMKgaWZUcnVlOiBbc2hvd24gOj0gMSBtYXg6IHNob3du
IC0gMV08YnI+DQomZ3Q7wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBpZkZhbHNlOiBbJnF1b3Q7c2hv
dWxkIGEgdHJhaWxpbmcgbmlsIGJlIHByaW50ZWQgb3Igbm90PyBOb3QgaWYgaXQgaXMgYW4gaW1w
bGljaXQgcmVzdWx0LCBub3QgaWYgdGhlIGxhc3Qgc3RhdGVtZW50IGFuc3dlcnMgbmlsLiZxdW90
Ozxicj4NCiZndDvCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDC
oCgoYXJndW1lbnRzIHNpemUgJmd0OyAwIGFuZDogW2xlbiA9IDBdKTxicj4NCiZndDvCoCDCoCDC
oCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBvcjogWygoc3RhdGVtZW50
cyBhdDogbGVuKSBpc0p1c3Q6IE5vZGVOaWwpPGJyPg0KJmd0O8KgIMKgIMKgIMKgIMKgIMKgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgYW5kOiBbbGVuID0gMTxicj4N
CiZndDvCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDC
oCDCoCDCoCDCoCDCoCDCoCDCoG9yOiBbbGVuICZndDsgMTxicj4NCiZndDvCoCDCoCDCoCDCoCDC
oCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDC
oCDCoCDCoCDCoCDCoGFuZDogWyhzdGF0ZW1lbnRzIGF0OiBsZW4gLSAxKSBpc01lc3NhZ2VOb2Rl
PGJyPg0KJmd0O8KgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgYW5kOiBbKHN0YXRlbWVudHMgYXQ6
IGxlbiAtIDEpIGlzTmlsSWY8YnI+DQomZ3Q7wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAg
wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAg
wqAgwqAgwqBvcjogWyhzdGF0ZW1lbnRzIGF0OiBsZW4gLSAxKSBpc09wdGltaXplZFdoaWxlTG9v
cF1dXV1dXSk8YnI+DQomZ3Q7wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAg
wqAgwqAgwqAgwqAgwqAgwqAgwqBpZlRydWU6IFtzaG93biA6PSBzaG93biAtIDFdXS48YnI+DQom
Z3Q7wqAgwqAgwqAgwqAxIHRvOiBzaG93biBkbzogPGJyPg0KJmd0O8KgIMKgIMKgIMKgIMKgIMKg
IMKgIMKgWzppIHwgPGJyPg0KJmd0O8KgIMKgIMKgIMKgIMKgIMKgIMKgIMKgdGhpc1N0YXRlbWVu
dCA6PSBzdGF0ZW1lbnRzIGF0OiBpLjxicj4NCiZndDvCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoHRo
aXNTdGF0ZW1lbnQgcHJpbnRPbjogYVN0cmVhbSBpbmRlbnQ6IGxldmVsLjxicj4NCiZndDvCoCDC
oCDCoCDCoCDCoCDCoCDCoCDCoGkgJmx0OyBzaG93biBpZlRydWU6IFthU3RyZWFtIG5leHRQdXQ6
ICQuOyBjcnRhYjogbGV2ZWxdLjxicj4NCiZndDvCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCh0aGlz
U3RhdGVtZW50IGNvbW1lbnQgfn4gbmlsIGFuZDogW3RoaXNTdGF0ZW1lbnQgY29tbWVudCBzaXpl
ICZndDsgMF0pPGJyPg0KJmd0O8KgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgaWZU
cnVlOiA8YnI+DQomZ3Q7wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAg
wqAgwqBbaSA9IHNob3duIGlmVHJ1ZTogW2FTdHJlYW0gY3J0YWI6IGxldmVsXS48YnI+DQomZ3Q7
wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqB0aGlzU3RhdGVt
ZW50IHByaW50Q29tbWVudE9uOiBhU3RyZWFtIGluZGVudDogbGV2ZWwuPGJyPg0KJmd0O8KgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgaSAmbHQ7IHNob3duIGlm
VHJ1ZTogW2FTdHJlYW0gY3J0YWI6IGxldmVsXV1dITxicj4NCiZndDsgPGJyPg0KJmd0OyBJdGVt
IHdhcyBhZGRlZDo8YnI+DQomZ3Q7ICsgLS0tLS0gTWV0aG9kOiBDb21tZW50Tm9kZSZndDsmZ3Q7
YW5hbHlzZVRlbXBzV2l0aGluOnJvb3ROb2RlOmFzc2lnbm1lbnRQb29sczogKGluIGNhdGVnb3J5
ICYjMzk7Y2xvc3VyZSBhbmFseXNpcyYjMzk7KSAtLS0tLTxicj4NCiZndDsgKyBhbmFseXNlVGVt
cHNXaXRoaW46IHNjb3BlQmxvY2sgcm9vdE5vZGU6IHJvb3ROb2RlIGFzc2lnbm1lbnRQb29sczog
YXNzaWdubWVudFBvb2xzITxicj4NCiZndDsgPGJyPg0KJmd0OyBJdGVtIHdhcyBhZGRlZDo8YnI+
DQomZ3Q7ICsgLS0tLS0gTWV0aG9kOiBDb21tZW50Tm9kZSZndDsmZ3Q7ZW1pdENvZGVGb3JFZmZl
Y3Q6ZW5jb2RlcjogKGluIGNhdGVnb3J5ICYjMzk7Y29kZSBnZW5lcmF0aW9uJiMzOTspIC0tLS0t
PGJyPg0KJmd0OyArIGVtaXRDb2RlRm9yRWZmZWN0OiBzdGFjayBlbmNvZGVyOiBlbmNvZGVyPGJy
Pg0KJmd0OyArwqAgwqAgwqAmcXVvdDt0aGlzIGlzIGEgbm9vcCZxdW90OyE8YnI+DQomZ3Q7IDxi
cj4NCiZndDsgSXRlbSB3YXMgYWRkZWQ6PGJyPg0KJmd0OyArIC0tLS0tIE1ldGhvZDogQ29tbWVu
dE5vZGUmZ3Q7Jmd0O2VtaXRDb2RlRm9yVmFsdWU6ZW5jb2RlcjogKGluIGNhdGVnb3J5ICYjMzk7
Y29kZSBnZW5lcmF0aW9uJiMzOTspIC0tLS0tPGJyPg0KJmd0OyArIGVtaXRDb2RlRm9yVmFsdWU6
IHN0YWNrIGVuY29kZXI6IGVuY29kZXI8YnI+DQomZ3Q7ICvCoCDCoCDCoHNlbGYgc2hvdWxkTm90
SW1wbGVtZW50ITxicj4NCiZndDsgPGJyPg0KJmd0OyBJdGVtIHdhcyBhZGRlZDo8YnI+DQomZ3Q7
ICsgLS0tLS0gTWV0aG9kOiBDb21tZW50Tm9kZSZndDsmZ3Q7c2l6ZUNvZGVGb3JFZmZlY3Q6IChp
biBjYXRlZ29yeSAmIzM5O2NvZGUgZ2VuZXJhdGlvbiYjMzk7KSAtLS0tLTxicj4NCiZndDsgKyBz
aXplQ29kZUZvckVmZmVjdDogZW5jb2Rlcjxicj4NCiZndDsgK8KgIMKgIMKgXjAhPGJyPg0KJmd0
OyA8YnI+DQomZ3Q7IEl0ZW0gd2FzIGFkZGVkOjxicj4NCiZndDsgKyAtLS0tLSBNZXRob2Q6IENv
bW1lbnROb2RlJmd0OyZndDtzaXplQ29kZUZvckxvYWQ6Zm9yVmFsdWU6IChpbiBjYXRlZ29yeSAm
IzM5O2NvZGUgZ2VuZXJhdGlvbiYjMzk7KSAtLS0tLTxicj4NCiZndDsgKyBzaXplQ29kZUZvckxv
YWQ6IGVuY29kZXIgZm9yVmFsdWU6IGZvclZhbHVlPGJyPg0KJmd0OyArwqAgwqAgwqBzZWxmIHNo
b3VsZE5vdEltcGxlbWVudCE8YnI+DQomZ3Q7IDxicj4NCiZndDsgSXRlbSB3YXMgYWRkZWQ6PGJy
Pg0KJmd0OyArIC0tLS0tIE1ldGhvZDogQ29tbWVudE5vZGUmZ3Q7Jmd0O3NpemVDb2RlRm9yVmFs
dWU6IChpbiBjYXRlZ29yeSAmIzM5O2NvZGUgZ2VuZXJhdGlvbiYjMzk7KSAtLS0tLTxicj4NCiZn
dDsgKyBzaXplQ29kZUZvclZhbHVlOiBlbmNvZGVyPGJyPg0KJmd0OyArwqAgwqAgwqBzZWxmIHNo
b3VsZE5vdEltcGxlbWVudCE8YnI+DQomZ3Q7IDxicj4NCiZndDsgSXRlbSB3YXMgY2hhbmdlZDo8
YnI+DQomZ3Q7wqAgwqBPYmplY3Qgc3ViY2xhc3M6ICNQYXJzZU5vZGU8YnI+DQomZ3Q7wqAgwqAg
wqAgwqBpbnN0YW5jZVZhcmlhYmxlTmFtZXM6ICYjMzk7Y29tbWVudCBwYyYjMzk7PGJyPg0KJmd0
OyArwqAgwqAgwqBjbGFzc1ZhcmlhYmxlTmFtZXM6ICYjMzk7Q29kZUJhc2VzIENvZGVMaW1pdHMg
TGRGYWxzZSBMZEluc3RUeXBlIExkTGl0SW5kVHlwZSBMZExpdFR5cGUgTGRNaW51czEgTGROaWwg
TGRTZWxmIExkU3VwZXIgTGRUZW1wVHlwZSBMZFRoaXNDb250ZXh0IExkVHJ1ZSBMb2FkTG9uZyBO
b2RlRmFsc2UgTm9kZU5pbCBOb2RlU2VsZiBOb2RlU3VwZXIgTm9kZVRoaXNDb250ZXh0IE5vZGVU
cnVlIFByZXR0eVByaW50Q29tbWVudFdpZHRoIFNlbmQgU2VuZFBsdXMgU2VuZFR5cGUgU3RkTGl0
ZXJhbHMgU3RkU2VsZWN0b3JzIFN0ZFZhcmlhYmxlcyYjMzk7PGJyPg0KJmd0OyAtwqAgwqAgwqBj
bGFzc1ZhcmlhYmxlTmFtZXM6ICYjMzk7Q29kZUJhc2VzIENvZGVMaW1pdHMgTGRGYWxzZSBMZElu
c3RUeXBlIExkTGl0SW5kVHlwZSBMZExpdFR5cGUgTGRNaW51czEgTGROaWwgTGRTZWxmIExkU3Vw
ZXIgTGRUZW1wVHlwZSBMZFRoaXNDb250ZXh0IExkVHJ1ZSBMb2FkTG9uZyBOb2RlRmFsc2UgTm9k
ZU5pbCBOb2RlU2VsZiBOb2RlU3VwZXIgTm9kZVRoaXNDb250ZXh0IE5vZGVUcnVlIFNlbmQgU2Vu
ZFBsdXMgU2VuZFR5cGUgU3RkTGl0ZXJhbHMgU3RkU2VsZWN0b3JzIFN0ZFZhcmlhYmxlcyYjMzk7
PGJyPg0KJmd0O8KgIMKgIMKgIMKgcG9vbERpY3Rpb25hcmllczogJiMzOTsmIzM5Ozxicj4NCiZn
dDvCoCDCoCDCoCDCoGNhdGVnb3J5OiAmIzM5O0NvbXBpbGVyLVBhcnNlTm9kZXMmIzM5OyE8YnI+
DQomZ3Q7wqAgwqA8YnI+DQomZ3Q7wqAgwqAhUGFyc2VOb2RlIGNvbW1lbnRTdGFtcDogJiMzOTsm
bHQ7aGlzdG9yaWNhbCZndDsmIzM5OyBwcmlvcjogMCE8YnI+DQomZ3Q7wqAgwqBUaGlzIHN1cGVy
Y2xhc3Mgb2YgbW9zdCBjb21waWxlci9kZWNvbXBpbGVyIGNsYXNzZXMgZGVjbGFyZXMgY29tbW9u
IGNsYXNzIHZhcmlhYmxlcywgZGVmYXVsdCBtZXNzYWdlcywgYW5kIHRoZSBjb2RlIGVtaXR0ZXJz
IGZvciBqdW1wcy4gU29tZSBvZiB0aGUgY2xhc3MgdmFyaWFibGVzIGFyZSBpbml0aWFsaXplZCBo
ZXJlOyB0aGUgcmVzdCBhcmUgaW5pdGlhbGl6ZWQgaW4gY2xhc3MgVmFyaWFibGVOb2RlLiE8YnI+
DQomZ3Q7IDxicj4NCiZndDsgSXRlbSB3YXMgYWRkZWQ6PGJyPg0KJmd0OyArIC0tLS0tIE1ldGhv
ZDogUGFyc2VOb2RlIGNsYXNzJmd0OyZndDtwcmVmUHJldHR5UHJpbnRDb21tZW50V2lkdGhJblBv
aW50cyAoaW4gY2F0ZWdvcnkgJiMzOTtwcmVmZXJlbmNlcyYjMzk7KSAtLS0tLTxicj4NCiZndDsg
KyBwcmVmUHJldHR5UHJpbnRDb21tZW50V2lkdGhJblBvaW50czxicj4NCiZndDsgK8KgIMKgIMKg
JnF1b3Q7QWNjZXNzb3IgZm9yIHRoZSBzeXN0ZW0td2lkZSBwcmVmZXJlbmNlJnF1b3Q7PGJyPg0K
Jmd0OyArwqAgwqAgwqA8YnI+DQomZ3Q7ICvCoCDCoCDCoCZsdDtwcmVmZXJlbmNlOiAmIzM5O01h
eCB3aWR0aCBpbiBwb2ludHMgb2YgcHJldHR5LXByaW50ZWQgY29tbWVudHMsIGlmIG5vbi16ZXJv
JiMzOTs8YnI+DQomZ3Q7ICvCoCDCoCDCoCDCoCDCoCDCoCDCoGNhdGVnb3J5OiAmIzM5O0NvbXBp
bGVyJiMzOTs8YnI+DQomZ3Q7ICvCoCDCoCDCoCDCoCDCoCDCoCDCoGRlc2NyaXB0aW9uOiAmIzM5
O0lmIG5vbi16ZXJvLCB0aGUgcHJldHR5LXByaW50ZXIgd2lsbCBicmVhayBjb21tZW50cyBpbnRv
IGxpbmVzIGF0IHdvcmQgYm91bmRhcmllcyBhZnRlciB0aGlzIG1hbnkgcG9pbnRzIGluIHRoZSBk
ZWZhdWx0IGZvbnQuJiMzOTs8YnI+DQomZ3Q7ICvCoCDCoCDCoCDCoCDCoCDCoCDCoHR5cGU6ICNO
dW1iZXImZ3Q7PGJyPg0KJmd0OyArwqAgwqAgwqBeUHJldHR5UHJpbnRDb21tZW50V2lkdGggaWZO
aWw6IFswXSE8YnI+DQomZ3Q7IDxicj4NCiZndDsgSXRlbSB3YXMgY2hhbmdlZDo8YnI+DQomZ3Q7
wqAgwqAtLS0tLSBNZXRob2Q6IFBhcnNlTm9kZSZndDsmZ3Q7cHJpbnRTaW5nbGVDb21tZW50Om9u
OmluZGVudDogKGluIGNhdGVnb3J5ICYjMzk7cHJpdmF0ZSYjMzk7KSAtLS0tLTxicj4NCiZndDvC
oCDCoHByaW50U2luZ2xlQ29tbWVudDogYVN0cmluZyBvbjogYVN0cmVhbSBpbmRlbnQ6IGluZGVu
dCA8YnI+DQomZ3Q7wqAgwqAgwqAgwqAmcXVvdDtQcmludCB0aGUgY29tbWVudCBzdHJpbmcsIGFz
c3VtaW5nIGl0IGhhcyBiZWVuIGluZGVudGVkIGluZGVudCB0YWJzLjxicj4NCiZndDsgK8KgIMKg
IMKgIElmIHRoZSBjb21tZW50IHdpZHRoIHByZWZlcmVuY2UgaXMgbm9uLXplcm8sIGJyZWFrIHRo
ZSBzdHJpbmcgYXQgd29yZCBicmVha3MsPGJyPg0KJmd0OyArwqAgwqAgwqAgZ2l2ZW4gdGhlIHdp
ZHRocyBpbiB0aGUgZGVmYXVsdCBmb250LCBhdCB0aGF0IG1hbnkgcG9pbnRzLiZxdW90Ozxicj4N
CiZndDsgLcKgIMKgIMKgQnJlYWsgdGhlIHN0cmluZyBhdCB3b3JkIGJyZWFrcywgZ2l2ZW4gdGhl
IHdpZHRocyBpbiB0aGUgZGVmYXVsdDxicj4NCiZndDsgLcKgIMKgIMKgZm9udCwgYXQgNDUwIHBv
aW50cy4mcXVvdDs8YnI+DQomZ3Q7wqAgwqA8YnI+DQomZ3Q7wqAgwqAgwqAgwqB8IHJlYWRTdHJl
YW0gd29yZCBwb3NpdGlvbiBsaW5lQnJlYWsgZm9udCB3b3JkV2lkdGggdGFiV2lkdGggc3BhY2VX
aWR0aCBsYXN0Q2hhciB8PGJyPg0KJmd0O8KgIMKgIMKgIMKgcmVhZFN0cmVhbSA6PSBSZWFkU3Ry
ZWFtIG9uOiBhU3RyaW5nLjxicj4NCiZndDsgK8KgIMKgIMKgKGxpbmVCcmVhayA6PSBzZWxmIGNs
YXNzIHByZWZQcmV0dHlQcmludENvbW1lbnRXaWR0aEluUG9pbnRzIGlzWmVybykgaWZUcnVlOjxi
cj4NCiZndDsgK8KgIMKgIMKgIMKgIMKgIMKgIMKgW1tyZWFkU3RyZWFtIHNraXBTZXBhcmF0b3Jz
Ljxicj4NCiZndDsgK8KgIMKgIMKgIMKgIMKgIMKgIMKgIGFTdHJlYW0gbmV4dFB1dEFsbDogKHJl
YWRTdHJlYW0gdXBUbzogQ2hhcmFjdGVyIGNyKS48YnI+DQomZ3Q7ICvCoCDCoCDCoCDCoCDCoCDC
oCDCoCByZWFkU3RyZWFtIGF0RW5kXSB3aGlsZUZhbHNlOjxicj4NCiZndDsgK8KgIMKgIMKgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgW2FTdHJlYW0gY3J0YWI6IGluZGVudF0uPGJyPg0KJmd0OyAr
wqAgwqAgwqAgwqAgwqAgwqAgwqBec2VsZl0uPGJyPg0KJmd0O8KgIMKgIMKgIMKgZm9udCA6PSBU
ZXh0U3R5bGUgZGVmYXVsdCBkZWZhdWx0Rm9udC48YnI+DQomZ3Q7wqAgwqAgwqAgwqB0YWJXaWR0
aCA6PSBUZXh0U3R5bGUgZGVmYXVsdCB0YWJXaWR0aC48YnI+DQomZ3Q7wqAgwqAgwqAgwqBzcGFj
ZVdpZHRoIDo9IGZvbnQgd2lkdGhPZjogQ2hhcmFjdGVyIHNwYWNlLjxicj4NCiZndDvCoCDCoCDC
oCDCoHBvc2l0aW9uIDo9IGluZGVudCAqIHRhYldpZHRoLjxicj4NCiZndDsgLcKgIMKgIMKgbGlu
ZUJyZWFrIDo9IDQ1MC48YnI+DQomZ3Q7wqAgwqAgwqAgwqBbcmVhZFN0cmVhbSBhdEVuZF08YnI+
DQomZ3Q7wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqB3aGlsZUZhbHNlOiA8YnI+DQomZ3Q7wqAgwqAg
wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBbd29yZCA6PSBzZWxmIG5leHRXb3JkRnJvbTog
cmVhZFN0cmVhbSBzZXRDaGFyYWN0ZXI6IFs6bGMgfCBsYXN0Q2hhciA6PSBsY10uPGJyPg0KJmd0
O8KgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgd29yZFdpZHRoIDo9IHdvcmQgaW5q
ZWN0OiAwIGludG86IFs6d2lkdGggOmNoYXIgfCB3aWR0aCArIChmb250IHdpZHRoT2Y6IGNoYXIp
XS48YnI+DQomZ3Q7wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBwb3NpdGlvbiA6
PSBwb3NpdGlvbiArIHdvcmRXaWR0aC48YnI+DQomZ3Q7wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAg
wqAgwqAgwqAgwqBwb3NpdGlvbiAmZ3Q7IGxpbmVCcmVhazxicj4NCiZndDvCoCDCoCDCoCDCoCDC
oCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoGlmVHJ1ZTogPGJyPg0KJmd0O8KgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgW2FT
dHJlYW0gc2tpcDogLTE7IGNydGFiOiBpbmRlbnQuPGJyPg0KJmd0O8KgIMKgIMKgIMKgIMKgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgcG9zaXRpb24gOj0gaW5k
ZW50ICogdGFiV2lkdGggKyB3b3JkV2lkdGggKyBzcGFjZVdpZHRoLjxicj4NCiZndDvCoCDCoCDC
oCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoGxhc3RD
aGFyID0gQ2hhcmFjdGVyIGNyPGJyPg0KJmd0O8KgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgaWZUcnVlOiBbW3JlYWRT
dHJlYW0gcGVla0ZvcjogQ2hhcmFjdGVyIHRhYl0gd2hpbGVUcnVlXS48YnI+DQomZ3Q7wqAgwqAg
wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqB3b3Jk
IGlzRW1wdHkgaWZGYWxzZTogW2FTdHJlYW0gbmV4dFB1dEFsbDogd29yZDsgc3BhY2VdXTxicj4N
CiZndDvCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoGlmRmFs
c2U6IDxicj4NCiZndDvCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDC
oCDCoCDCoCDCoCDCoCDCoFthU3RyZWFtIG5leHRQdXRBbGw6IHdvcmQuPGJyPg0KJmd0O8KgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgcmVh
ZFN0cmVhbSBhdEVuZDxicj4NCiZndDvCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDC
oCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoGlmRmFsc2U6IDxicj4NCiZndDvC
oCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDC
oCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoFtwb3NpdGlvbiA6PSBwb3NpdGlvbiArIHNwYWNlV2lk
dGguPGJyPg0KJmd0O8KgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgYVN0cmVhbSBzcGFjZV0uPGJy
Pg0KJmd0O8KgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKg
IMKgIMKgIMKgbGFzdENoYXIgPSBDaGFyYWN0ZXIgY3I8YnI+DQomZ3Q7wqAgwqAgwqAgwqAgwqAg
wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBp
ZlRydWU6IDxicj4NCiZndDvCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDC
oCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoFthU3RyZWFtIHNraXA6
IC0xOyBjcnRhYjogaW5kZW50Ljxicj4NCiZndDvCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDC
oCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoHBv
c2l0aW9uIDo9IGluZGVudCAqIHRhYldpZHRoLjxicj4NCiZndDvCoCDCoCDCoCDCoCDCoCDCoCDC
oCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDC
oCDCoCDCoFtyZWFkU3RyZWFtIHBlZWtGb3I6IENoYXJhY3RlciB0YWJdIHdoaWxlVHJ1ZV1dXSE8
YnI+DQomZ3Q7IDxicj4NCiZndDsgSXRlbSB3YXMgY2hhbmdlZDo8YnI+DQomZ3Q7wqAgwqAtLS0t
LSBNZXRob2Q6IFBhcnNlciZndDsmZ3Q7YWRkQ29tbWVudCAoaW4gY2F0ZWdvcnkgJiMzOTtwcml2
YXRlJiMzOTspIC0tLS0tPGJyPg0KJmd0O8KgIMKgYWRkQ29tbWVudDxicj4NCiZndDsgK8KgIMKg
IMKgJnF1b3Q7VGFrZSBjYXJlIHRvIGFkZCB0aGUgY29tbWVudCB0byB0aGUgbm9kZSBpdCBpcyBh
c3NvY2lhdGVkIHdpdGguPGJyPg0KJmd0OyArwqAgwqAgwqAgSWYgdGhlcmUgaXMgYSBuZXcgbGlu
ZSBhdCB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IHBhcnNlTm9kZSAod2hpY2g8YnI+DQomZ3Q7ICvC
oCDCoCDCoCBlbmRzIGF0IGhlcmVNYXJrKSB0aGVuIGNvbnNpZGVyIHRoZSBjb21tZW50IGFzIGJl
bG9uZyBpbmcgdG8gdGhlIG5leHQgc3RhdGVtZW50LiZxdW90Ozxicj4NCiZndDsgK8KgIMKgIMKg
IDxicj4NCiZndDsgK8KgIMKgIMKgfCBjaGFyYWN0ZXIgfDxicj4NCiZndDsgLSA8YnI+DQomZ3Q7
wqAgwqAgwqAgwqAocGFyc2VOb2RlIH5+IG5pbDxicj4NCiZndDsgK8KgIMKgIMKgIGFuZDogW2N1
cnJlbnRDb21tZW50IH5+IG5pbF0pIGlmVHJ1ZTogPGJyPg0KJmd0OyArwqAgwqAgwqAgwqAgwqAg
wqAgwqBbY2hhcmFjdGVyIDo9IGhlcmVDaGFyID09IERvSXRDaGFyYWN0ZXI8YnI+DQomZ3Q7ICvC
oCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDC
oCDCoCDCoCDCoGlmVHJ1ZTogW2hlcmVDaGFyXTxicj4NCiZndDsgK8KgIMKgIMKgIMKgIMKgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgaWZGYWxz
ZTogW3NvdXJjZSBvcmlnaW5hbENvbnRlbnRzIGF0OiBoZXJlTWFyayArIDFdLjxicj4NCiZndDsg
K8KgIMKgIMKgIMKgIMKgIMKgIMKgIChjaGFyYWN0ZXIgPT0gQ2hhcmFjdGVyIGNyIG9yOiBbY2hh
cmFjdGVyID09IENoYXJhY3RlciBsZl0pIGlmRmFsc2U6PGJyPg0KJmd0OyAtwqAgwqAgwqAgYW5k
OiBbY3VycmVudENvbW1lbnQgfn4gbmlsXSk8YnI+DQomZ3Q7IC3CoCDCoCDCoCDCoCDCoCDCoCDC
oGlmVHJ1ZTogPGJyPg0KJmd0O8KgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgW3Bh
cnNlTm9kZSBjb21tZW50OiBjdXJyZW50Q29tbWVudC48YnI+DQomZ3Q7ICvCoCDCoCDCoCDCoCDC
oCDCoCDCoCDCoCDCoCDCoCDCoCBjdXJyZW50Q29tbWVudCA6PSBuaWxdXSE8YnI+DQomZ3Q7IC3C
oCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoGN1cnJlbnRDb21tZW50IDo9IG5pbF0hPGJy
Pg0KJmd0OyA8YnI+DQomZ3Q7IEl0ZW0gd2FzIGNoYW5nZWQ6PGJyPg0KJmd0O8KgIMKgLS0tLS0g
TWV0aG9kOiBQYXJzZXImZ3Q7Jmd0O2Jsb2NrRXhwcmVzc2lvbiAoaW4gY2F0ZWdvcnkgJiMzOTtl
eHByZXNzaW9uIHR5cGVzJiMzOTspIC0tLS0tPGJyPg0KJmd0O8KgIMKgYmxvY2tFeHByZXNzaW9u
PGJyPg0KJmd0O8KgIMKgIMKgIMKgJnF1b3Q7WyAoezp2YXJ9IHwpICh8IHt0ZW1wc30gfCkgKHN0
YXRlbWVudHMpIF0gPSZndDsgQmxvY2tOb2RlLiZxdW90Ozxicj4NCiZndDvCoCDCoDxicj4NCiZn
dDvCoCDCoCDCoCDCoHwgYmxvY2tOb2RlIHZhcmlhYmxlTm9kZXMgdGVtcG9yYXJ5QmxvY2tWYXJp
YWJsZXMgc3RhcnQgfDxicj4NCiZndDvCoCDCoCDCoCDCoGJsb2NrTm9kZSA6PSBCbG9ja05vZGUg
bmV3Ljxicj4NCiZndDsgK8KgIMKgIMKgYmxvY2tOb2RlIGNvbW1lbnQ6IGN1cnJlbnRDb21tZW50
Ljxicj4NCiZndDsgK8KgIMKgIMKgY3VycmVudENvbW1lbnQgOj0gbmlsLjxicj4NCiZndDvCoCDC
oCDCoCDCoHZhcmlhYmxlTm9kZXMgOj0gT3JkZXJlZENvbGxlY3Rpb24gbmV3Ljxicj4NCiZndDvC
oCDCoCDCoCDCoHN0YXJ0IDo9IHByZXZNYXJrICsgcmVxdWVzdG9yT2Zmc2V0Ljxicj4NCiZndDvC
oCDCoCDCoCDCoCZxdW90O0dhdGhlciBwYXJhbWV0ZXJzLiZxdW90Ozxicj4NCiZndDvCoCDCoCDC
oCDCoFtzZWxmIG1hdGNoOiAjY29sb25dIHdoaWxlVHJ1ZTo8YnI+DQomZ3Q7wqAgwqAgwqAgwqAg
wqAgwqAgwqAgwqBbdmFyaWFibGVOb2RlcyBhZGRMYXN0OiAoZW5jb2RlciBiaW5kQmxvY2tBcmc6
IHNlbGYgYXJndW1lbnROYW1lIHdpdGhpbjogYmxvY2tOb2RlKV0uPGJyPg0KJmd0O8KgIMKgIMKg
IMKgKHZhcmlhYmxlTm9kZXMgc2l6ZSAmZ3Q7IDAgJmFtcDsgKGhlcmVUeXBlIH5+ICNyaWdodEJy
YWNrZXQpIGFuZDogWyhzZWxmIG1hdGNoOiAjdmVydGljYWxCYXIpIG5vdF0pIGlmVHJ1ZTo8YnI+
DQomZ3Q7wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBbXnNlbGYgZXhwZWN0ZWQ6ICYjMzk7VmVydGlj
YWwgYmFyJiMzOTtdLjxicj4NCiZndDvCoCDCoDxicj4NCiZndDvCoCDCoCDCoCDCoHRlbXBvcmFy
eUJsb2NrVmFyaWFibGVzIDo9IHNlbGYgdGVtcG9yYXJ5QmxvY2tWYXJpYWJsZXNGb3I6IGJsb2Nr
Tm9kZS48YnI+DQomZ3Q7wqAgwqAgwqAgwqBzZWxmIHN0YXRlbWVudHM6IHZhcmlhYmxlTm9kZXMg
aW5uZXJCbG9jazogdHJ1ZSBibG9ja05vZGU6IGJsb2NrTm9kZS48YnI+DQomZ3Q7wqAgwqAgwqAg
wqBibG9ja05vZGUgdGVtcG9yYXJpZXM6IHRlbXBvcmFyeUJsb2NrVmFyaWFibGVzLjxicj4NCiZn
dDvCoCDCoDxicj4NCiZndDvCoCDCoCDCoCDCoChzZWxmIG1hdGNoOiAjcmlnaHRCcmFja2V0KSBp
ZkZhbHNlOiBbXnNlbGYgZXhwZWN0ZWQ6ICYjMzk7UGVyaW9kIG9yIHJpZ2h0IGJyYWNrZXQmIzM5
O10uPGJyPg0KJmd0O8KgIMKgPGJyPg0KJmd0O8KgIMKgIMKgIMKgYmxvY2tOb2RlIG5vdGVTb3Vy
Y2VSYW5nZVN0YXJ0OiBzdGFydCBlbmQ6IHNlbGYgZW5kT2ZMYXN0VG9rZW4gZW5jb2RlcjogZW5j
b2Rlci48YnI+DQomZ3Q7wqAgwqA8YnI+DQomZ3Q7wqAgwqAgwqAgwqAmcXVvdDtUaGUgc2NvcGUg
b2YgdGhlIHBhcmFtZXRlcnMgYW5kIHRlbXBvcmFyeSBibG9jayB2YXJpYWJsZXMgaXMgbm8gbG9u
Z2VyIGFjdGl2ZS4mcXVvdDs8YnI+DQomZ3Q7wqAgwqAgwqAgwqB0ZW1wb3JhcnlCbG9ja1Zhcmlh
YmxlcyBkbzogWzp2YXJpYWJsZSB8IHZhcmlhYmxlIHNjb3BlOiAtMV0uPGJyPg0KJmd0O8KgIMKg
IMKgIMKgdmFyaWFibGVOb2RlcyBkbzogWzp2YXJpYWJsZSB8IHZhcmlhYmxlIHNjb3BlOiAtMV0h
PGJyPg0KJmd0OyA8YnI+DQomZ3Q7IEl0ZW0gd2FzIGNoYW5nZWQ6PGJyPg0KJmd0O8KgIMKgLS0t
LS0gTWV0aG9kOiBQYXJzZXImZ3Q7Jmd0O3N0YXRlbWVudHM6aW5uZXJCbG9jazpibG9ja05vZGU6
IChpbiBjYXRlZ29yeSAmIzM5O2V4cHJlc3Npb24gdHlwZXMmIzM5OykgLS0tLS08YnI+DQomZ3Q7
wqAgwqBzdGF0ZW1lbnRzOiBhcmdOb2RlcyBpbm5lckJsb2NrOiBpbm5lciBibG9ja05vZGU6IHRo
ZUJsb2NrTm9kZTxicj4NCiZndDvCoCDCoDxicj4NCiZndDsgK8KgIMKgIMKgfCBzdG10cyByZXR1
cm5zIHN0YXJ0IHNhdmVkQ29tbWVudCB8PGJyPg0KJmd0OyArwqAgwqAgwqBpbm5lcjxicj4NCiZn
dDsgK8KgIMKgIMKgIMKgIMKgIMKgIMKgaWZUcnVlOiAmcXVvdDtnaXZlIGNvbW1lbnQgdG8gbWVz
c2FnZSB3aGljaCBoYXMgdGhpcyBibG9jayBhcyBhbiBhcmd1bWVudCwgbm90IHRvIHRoaXMgYmxv
Y2suJnF1b3Q7PGJyPg0KJmd0OyArwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBbc2F2
ZWRDb21tZW50IDo9IGN1cnJlbnRDb21tZW50XTxicj4NCiZndDsgK8KgIMKgIMKgIMKgIMKgIMKg
IMKgaWZGYWxzZTomcXVvdDtnaXZlIGluaXRpYWwgY29tbWVudCB0byBibG9jaywgc2luY2Ugb3Ro
ZXJzIHRyYWlsIHN0YXRlbWVudHMmcXVvdDs8YnI+DQomZ3Q7ICvCoCDCoCDCoCDCoCDCoCDCoCDC
oCDCoCDCoCDCoCDCoFt0aGVCbG9ja05vZGUgY29tbWVudDogY3VycmVudENvbW1lbnRdLjxicj4N
CiZndDsgLcKgIMKgIMKgfCBzdG10cyByZXR1cm5zIHN0YXJ0IHw8YnI+DQomZ3Q7IC3CoCDCoCDC
oCZxdW90O2dpdmUgaW5pdGlhbCBjb21tZW50IHRvIGJsb2NrLCBzaW5jZSBvdGhlcnMgdHJhaWwg
c3RhdGVtZW50cyZxdW90Ozxicj4NCiZndDsgLcKgIMKgIMKgdGhlQmxvY2tOb2RlIGNvbW1lbnQ6
IGN1cnJlbnRDb21tZW50Ljxicj4NCiZndDvCoCDCoCDCoCDCoGN1cnJlbnRDb21tZW50IDo9IG5p
bC48YnI+DQomZ3Q7wqAgwqAgwqAgwqBzdG10cyA6PSBPcmRlcmVkQ29sbGVjdGlvbiBuZXcuPGJy
Pg0KJmd0O8KgIMKgIMKgIMKgcmV0dXJucyA6PSBmYWxzZS48YnI+DQomZ3Q7wqAgwqAgwqAgwqBo
ZXJlVHlwZSB+fiAjcmlnaHRCcmFja2V0IGlmVHJ1ZTo8YnI+DQomZ3Q7wqAgwqAgwqAgwqAgwqAg
wqAgwqAgwqBbW3RoZUJsb2NrTm9kZSBzdGFydE9mTGFzdFN0YXRlbWVudDogKHN0YXJ0IDo9IHNl
bGYgc3RhcnRPZk5leHRUb2tlbikuPGJyPg0KJmd0OyArwqAgwqAgwqAgwqAgwqAgwqAgwqAgY3Vy
cmVudENvbW1lbnQgaWZOb3ROaWw6PGJyPg0KJmd0OyArwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAg
wqAgwqAgwqBbc3RtdHMgYWRkTGFzdDogKENvbW1lbnROb2RlIG5ldyBjb21tZW50OiBjdXJyZW50
Q29tbWVudCkuPGJyPg0KJmd0OyArwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgY3Vy
cmVudENvbW1lbnQgOj0gbmlsXS48YnI+DQomZ3Q7wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAo
cmV0dXJucyA6PSBzZWxmIG1hdGNoUmV0dXJuKTxicj4NCiZndDvCoCDCoCDCoCDCoCDCoCDCoCDC
oCDCoCDCoCDCoCDCoCDCoGlmVHJ1ZTogPGJyPg0KJmd0O8KgIMKgIMKgIMKgIMKgIMKgIMKgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgW3NlbGYgZXhwcmVzc2lvbiBpZkZhbHNlOjxicj4NCiZn
dDvCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDC
oCDCoFtec2VsZiBleHBlY3RlZDogJiMzOTtFeHByZXNzaW9uIHRvIHJldHVybiYjMzk7XS48YnI+
DQomZ3Q7wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgc2Vs
ZiBhZGRDb21tZW50Ljxicj4NCiZndDvCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDC
oCDCoCDCoCDCoCDCoCBzdG10cyBhZGRMYXN0OiAocGFyc2VOb2RlIGlzUmV0dXJuaW5nSWY8YnI+
DQomZ3Q7wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAg
wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBpZlRydWU6IFtwYXJz
ZU5vZGVdPGJyPg0KJmd0O8KgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgaWZG
YWxzZTogW1JldHVybk5vZGUgbmV3PGJyPg0KJmd0O8KgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgZXhwcjogcGFy
c2VOb2RlPGJyPg0KJmd0O8KgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgZW5jb2RlcjogZW5jb2Rlcjxicj4NCiZn
dDvCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDC
oCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDC
oCDCoCDCoCDCoCDCoCDCoCDCoHNvdXJjZVJhbmdlOiAoc3RhcnQgdG86IHNlbGYgZW5kT2ZMYXN0
VG9rZW4pXSldPGJyPg0KJmd0O8KgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgaWZG
YWxzZTogPGJyPg0KJmd0O8KgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKg
IMKgIMKgW3NlbGYgZXhwcmVzc2lvbjxicj4NCiZndDvCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDC
oCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoGlmVHJ1ZTogPGJyPg0KJmd0O8KgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKg
IMKgIMKgIMKgW3NlbGYgYWRkQ29tbWVudC48YnI+DQomZ3Q7wqAgwqAgwqAgwqAgwqAgwqAgwqAg
wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAmcXVvdDtp
ZiBib3RoIGJyYW5jaGVzIHJldHVybiwgZm9sbG93aW5nIGNvZGUgaXMgdW5yZWFjaGFibGUsIGxl
dCYjMzk7cyBhdm9pZCB0aGlzLjxicj4NCiZndDvCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDC
oCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoEJ1dCBvbmx5IGlmIGlu
dGVyYWN0aXZlLCB3ZSBkb24mIzM5O3Qgd2FudCB0byBwcmV2ZW50IGxvYWRpbmcgb2YgbGVnYWN5
IGNvZGUmcXVvdDs8YnI+DQomZ3Q7wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAg
wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBzZWxmIGludGVyYWN0aXZlIGlmVHJ1
ZTogW3JldHVybnMgOj0gcGFyc2VOb2RlIGlzUmV0dXJuaW5nSWZdLjxicj4NCiZndDvCoCDCoCDC
oCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDC
oCDCoCDCoCBzdG10cyBhZGRMYXN0OiBwYXJzZU5vZGVdPGJyPg0KJmd0O8KgIMKgIMKgIMKgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgaWZGYWxzZTogPGJy
Pg0KJmd0O8KgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgW3NlbGYgYWRkQ29tbWVudC48YnI+DQomZ3Q7wqAgwqAgwqAg
wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAg
wqAgwqAgc3RtdHMgc2l6ZSA9IDAgaWZUcnVlOiA8YnI+DQomZ3Q7wqAgwqAgwqAgwqAgwqAgwqAg
wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAg
wqAgwqAgwqBbc3RtdHMgYWRkTGFzdDogPGJyPg0KJmd0O8KgIMKgIMKgIMKgIMKgIMKgIMKgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKg
IMKgIMKgIMKgIMKgIMKgKGVuY29kZXIgZW5jb2RlVmFyaWFibGU6PGJyPg0KJmd0O8KgIMKgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgKGlubmVyIGlmVHJ1ZTog
WyYjMzk7bmlsJiMzOTtdIGlmRmFsc2U6IFsmIzM5O3NlbGYmIzM5O10pKV1dXS48YnI+DQomZ3Q7
wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqByZXR1cm5zIGlmVHJ1ZTogPGJyPg0KJmd0O8KgIMKg
IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgW3NlbGYgbWF0Y2g6ICNwZXJpb2QuPGJyPg0K
Jmd0O8KgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIChoZXJlVHlwZSA9PSAjcmln
aHRCcmFja2V0IG9yOiBbaGVyZVR5cGUgPT0gI2RvSXRdKSBpZkZhbHNlOjxicj4NCiZndDvCoCDC
oCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoFtec2VsZiBleHBlY3Rl
ZDogJiMzOTtFbmQgb2YgYmxvY2smIzM5O11dLjxicj4NCiZndDvCoCDCoCDCoCDCoCDCoCDCoCDC
oCDCoCDCoHJldHVybnMgbm90IGFuZDogW3NlbGYgbWF0Y2g6ICNwZXJpb2RdXSB3aGlsZVRydWVd
Ljxicj4NCiZndDvCoCDCoCDCoCDCoHRoZUJsb2NrTm9kZTxicj4NCiZndDvCoCDCoCDCoCDCoCDC
oCDCoCDCoCDCoGFyZ3VtZW50czogYXJnTm9kZXM8YnI+DQomZ3Q7wqAgwqAgwqAgwqAgwqAgwqAg
wqAgwqBzdGF0ZW1lbnRzOiBzdG10czxicj4NCiZndDvCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoHJl
dHVybnM6IHJldHVybnM8YnI+DQomZ3Q7wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBmcm9tOiBlbmNv
ZGVyLjxicj4NCiZndDvCoCDCoCDCoCDCoHBhcnNlTm9kZSA6PSB0aGVCbG9ja05vZGUuPGJyPg0K
Jmd0OyArwqAgwqAgwqBjdXJyZW50Q29tbWVudCA6PSBzYXZlZENvbW1lbnQuPGJyPg0KJmd0O8Kg
IMKgIMKgIMKgXnRydWUhPGJyPg0KU3F1ZWFrLWRldiBtYWlsaW5nIGxpc3QgLS0gPGEgaHJlZj0i
bWFpbHRvOnNxdWVhay1kZXZAbGlzdHMuc3F1ZWFrZm91bmRhdGlvbi5vcmciIHRhcmdldD0iX2Js
YW5rIj5zcXVlYWstZGV2QGxpc3RzLnNxdWVha2ZvdW5kYXRpb24ub3JnPC9hPjxicj4NClRvIHVu
c3Vic2NyaWJlIHNlbmQgYW4gZW1haWwgdG8gPGEgaHJlZj0ibWFpbHRvOnNxdWVhay1kZXYtbGVh
dmVAbGlzdHMuc3F1ZWFrZm91bmRhdGlvbi5vcmciIHRhcmdldD0iX2JsYW5rIj5zcXVlYWstZGV2
LWxlYXZlQGxpc3RzLnNxdWVha2ZvdW5kYXRpb24ub3JnPC9hPjxicj4NCjwvYmxvY2txdW90ZT48
L2Rpdj48YnIgY2xlYXI9ImFsbCI+PGRpdj48YnI+PC9kaXY+PHNwYW4gY2xhc3M9ImdtYWlsX3Np
Z25hdHVyZV9wcmVmaXgiPi0tIDwvc3Bhbj48YnI+PGRpdiBkaXI9Imx0ciIgY2xhc3M9ImdtYWls
X3NpZ25hdHVyZSI+PGRpdiBkaXI9Imx0ciI+PGRpdj48c3BhbiBzdHlsZT0iZm9udC1zaXplOnNt
YWxsO2JvcmRlci1jb2xsYXBzZTpzZXBhcmF0ZSI+PGRpdj5fLCwsXi4uXiwsLF88YnI+PC9kaXY+
PGRpdj5iZXN0LMKgRWxpb3Q8L2Rpdj48L3NwYW4+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+DQo=

--===============0001566919659058530==--


From scott.gibson@posteo.net Tue Oct 15 05:28:25 2024
From: Scott Gibson <scott.gibson@posteo.net>
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] Re: the form projector
Date: Tue, 15 Oct 2024 05:28:13 +0000
Message-ID: <cf4603a9-c003-47c2-a6bf-7b30647c2369@posteo.net>
In-Reply-To: <b35a676e-71bd-e631-4cad-efdedd0e87f3@gmail.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============0044237992229413387=="

--===============0044237992229413387==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

This looks really awesome! My first impression from the first image was=20
the iconic style of the Star Wars text scroll.

I have not gotten to test this yet but it does seem to be quite a useful=20
ability.

Scott

On 10/14/24 14:25, Lauren Pullen wrote:
> Hi List,
>
> I'm not sure what to even call this, so I went with "Form Projector".
> You tell it where each corner of a form should end up on a canvas,
> clockwise from 0(a)0 on the form, and it makes it happen.  I piggybacked
> it onto PolygonMorph for demonstration.
>
> I made it to do 2-point perspective transforms, but you can see from
> images 2 and 3 that there's no requirement the destination corners also
> wind clockwise.  Look at that beautiful hyperbolic saddle in #3!
>
> I'll probably add it to the RayCaster project on squeaksource under the
> package name FormProjector once I test it further.
>
> Squeak-dev mailing list -- squeak-dev(a)lists.squeakfoundation.org
> To unsubscribe send an email to squeak-dev-leave(a)lists.squeakfoundation.o=
rg


--===============0044237992229413387==
Content-Type: application/pkcs7-signature
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="smime.p7s"
MIME-Version: 1.0

MIAGCSqGSIb3DQEHAqCAMIACAQExDzANBglghkgBZQMEAgMFADCABgkqhkiG9w0BBwEAAKCCDZow
ggayMIIEmqADAgECAhAM4TInqCzmo9DzV8Nsth6GMA0GCSqGSIb3DQEBDQUAMHoxCzAJBgNVBAYT
AlBMMSEwHwYDVQQKExhBc3NlY28gRGF0YSBTeXN0ZW1zIFMuQS4xJzAlBgNVBAsTHkNlcnR1bSBD
ZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEfMB0GA1UEAxMWQ2VydHVtIFRydXN0ZWQgUm9vdCBDQTAe
Fw0yMzA4MDEwODA5NDlaFw0zODA3MjMwODA5NDlaME4xCzAJBgNVBAYTAlBMMSEwHwYDVQQKDBhB
c3NlY28gRGF0YSBTeXN0ZW1zIFMuQS4xHDAaBgNVBAMME0NlcnR1bSBTTUlNRSBSU0EgQ0EwggIi
MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDTudxfTHvqEIhVwDB4ZDDJq+fDBq1a+nCBCTGd
nj326RGkCS2E1Q63oHTwlD9tkJt6a8UDwIIZ6eG8/OIkM/A+K2lzMrBcP9dEBdGZqCXwbqq4O4Z/
Pl8om7O7G5bwnaacpFpLGTXotg6PT/R9UWXMW+S1I5KiorBXROeFX0N+CbryUfCQj0vB5F85YXqy
HkaZdgO8YdL+j+pfUROJGLdnGff6b3+O58bBZ6f4IUVOARhyaaLQy1ofnwkV0AM2Wl/AIjA8Krwt
ROh0z5/F3k8SUyNyvIQaG0vPyctHRWLsXGbkwHo3wOpXS4KkAQR1zR+ULDGCMFhRSX/j/skJxYmA
tqbU+v56wYeLEM9LmfTCsOSrY8yNRip0PQS4FrZyi888WC49iBLzMktO+JEsmDIiAYDk9kjD9WAh
ubh8iN/5RducVz9lukfCa0+jYH7sRhpc12H3bM2ufvTbRIE5W1CRaALiGzlEWzhA3UWIBba+Y4Br
httxrrwKG9fORAubnFe0yDCnXcHC4N90YIwJ44sP0BgC9LjGR+PZNTzvSAj+qCmZ6xJOPUlssl6H
ycEPU6KsW9KnlZmETscqcC+V3ozBk8xM0VZ/AHZ34pXJcemfWG4e4rxeH0FSdwUEzj3kTA84OqRx
bb/C21XsiS1XyT3KUIGlDiIEQFgnD9Tk/PGpEwIDAQABo4IBXjCCAVowDwYDVR0TAQH/BAUwAwEB
/zAdBgNVHQ4EFgQUZvvDD770v+CcyatN3kcZvcDKpmgwHwYDVR0jBBgwFoAUjPscdbwC059OLkjZ
+WBUqsSzT/owDgYDVR0PAQH/BAQDAgEGMB0GA1UdJQQWMBQGCCsGAQUFBwMEBggrBgEFBQcDAjAv
BgNVHR8EKDAmMCSgIqAghh5odHRwOi8vY3JsLmNlcnR1bS5wbC9jdHJjYS5jcmwwawYIKwYBBQUH
AQEEXzBdMCgGCCsGAQUFBzABhhxodHRwOi8vc3ViY2Eub2NzcC1jZXJ0dW0uY29tMDEGCCsGAQUF
BzAChiVodHRwOi8vcmVwb3NpdG9yeS5jZXJ0dW0ucGwvY3RyY2EuY2VyMDoGA1UdIAQzMDEwLwYE
VR0gADAnMCUGCCsGAQUFBwIBFhlodHRwczovL3d3dy5jZXJ0dW0ucGwvQ1BTMA0GCSqGSIb3DQEB
DQUAA4ICAQACdWiFTrEXejbCNhvlQGjnGr4GwCBRRcs1+uQumSciktKucsj1mCb3tmB09bDya0be
SUDVed/h+fbPKFlON2miwRYZwdGXSFNrynzGC1oYQG3SPS6qwXS2iZe4kQ4d0pTRntGPeHRe13o5
nd3tJw/+XanUoTRy7/N2NxQ8Br16v+Ma6N2XqqLj+zXGMn8h5c0LpmqnkaMxk2hiLxXEOLFoGXXO
il3wHCkgtlZgfbgyeK/AGjqEj9XNfDCe2V4fTLsYqlb+AaVAMpXFtezeGLrsIAef+MYjXNoGKYGe
HM8AiNHeIxavk45O9Etvad/lKvPcH0hgMr9wTReCRnmjpodHgxcKG0LLI6rLR4RbEfRf3rV8xyR6
KkfjIy7W8pN/Cx/i8D/rAM46YcS281duz43X0Oaw6UjiqFwiae8DeKvTINLBR+yfJdQ/lLssNAG3
QNxXRHozNJUp/UeqUnf1WQC4NabQXKp54hWTCSBec+n550+REg/P+tDi+UsoFqiE9Mpz/I/KpA3F
GyhpDxYbLiw/e0nYLqt1HqX8F4L4sLfW346rEHtBWVNPmsQmLjI6mfhm8c4FX3jfnQowPDLvqNGJ
sO/ec397eyb8nN+8MSM1KXPVsMh4LvRZvjVL0DVEfOGBf29HWEXYuJ5llhY9/N31ay4Gsv61VgFE
7v9hQjM4ZDCCBuAwggTIoAMCAQICEAsc/2yx3kenXSzKjrRVR2cwDQYJKoZIhvcNAQELBQAwTjEL
MAkGA1UEBhMCUEwxITAfBgNVBAoMGEFzc2VjbyBEYXRhIFN5c3RlbXMgUy5BLjEcMBoGA1UEAwwT
Q2VydHVtIFNNSU1FIFJTQSBDQTAeFw0yNDA0MzAyMTE0MjZaFw0yNTA0MzAyMTE0MjVaMEoxIDAe
BgNVBAMMF3Njb3R0LmdpYnNvbkBwb3N0ZW8ubmV0MSYwJAYJKoZIhvcNAQkBFhdzY290dC5naWJz
b25AcG9zdGVvLm5ldDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBANA+gfjphBFe06Ns
gDCNXlPMU7KcDGdsje9neOrkbjsUz0dDoA65bU79ydRs700oxnSU6z2BywWU/NF1i6PzZtfffjYN
w3phCBv682jHLujD3GKCuiJtYLiW1MBKtT3rV6JAKzHzYW+cwsF/IOhuEnbC741YtwAf6FgmErkH
NmagaN+Ya4z489omUlG1bZ4t7ZlKJ/jb4N5slNrgZQQbftJuKgGQUlG53ueYVVGJ3Uf+UdIeVUCb
XbmE2bWJz4DM6NSXJ5fMMYwgLD6nXYuxQRHo2bQNxCCkehdsvmXRN/InGCGpCVxq1wisw2pWS28y
GtIRQJlub9pU0NxnJcwMu8+CJdLZ45XIP7C2NGiTi2rLTPlvWdRcf71r6Sdez6pQa6mKUX81oIiF
IyCmcuvdFQwu/oK27OOG5B45yzqBN4B9w/+K+EajdJX2OdSgnDDd3OCIXcQSXSnNC1PNPOPn3JaR
G+I4ha8fFSvA4gE5JPXhab/aKyrJrHK1FPNh4mXIfOFLmXsAz8vF0Ahwxx7EsNwC09QiFJBB+E0h
dVBuzdzXyp6oZsCmPn9FoPS4uAkpOcwQW9m03XNBMeeiHLO/Uzi8tF5POvZGB4KTkJdO4NyE25YV
O55jjTqvS3mGZGIPKFk7NL+PudPJ+Tr0fblMAivGSjENmpFkbBSAUSITqqspAgMBAAGjggG8MIIB
uDAMBgNVHRMBAf8EAjAAMEEGA1UdHwQ6MDgwNqA0oDKGMGh0dHA6Ly9jc21pbWVyc2FjYS5jcmwu
Y2VydHVtLnBsL2NzbWltZXJzYWNhLmNybDCBgwYIKwYBBQUHAQEEdzB1MC4GCCsGAQUFBzABhiJo
dHRwOi8vY3NtaW1lcnNhY2Eub2NzcC1jZXJ0dW0uY29tMEMGCCsGAQUFBzAChjdodHRwOi8vY3Nt
aW1lcnNhY2EucmVwb3NpdG9yeS5jZXJ0dW0ucGwvY3NtaW1lcnNhY2EuY2VyMB8GA1UdIwQYMBaA
FGb7ww++9L/gnMmrTd5HGb3AyqZoMB0GA1UdDgQWBBT3ikbX+TgFKsO8KZpeBlB/DGuABzBMBgNV
HSAERTBDMAkGB2eBDAEFAQIwNgYLKoRoAYb2dwJkAgEwJzAlBggrBgEFBQcCARYZaHR0cHM6Ly93
d3cuY2VydHVtLnBsL0NQUzAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwDgYDVR0PAQH/
BAQDAgTwMCIGA1UdEQQbMBmBF3Njb3R0LmdpYnNvbkBwb3N0ZW8ubmV0MA0GCSqGSIb3DQEBCwUA
A4ICAQAVNFkAX4sOSRbQNu4khyvXhL7XXDCwc6Mh5C6+qurMslrJzTt8gwAi/68Zbg0N7bznN5YV
wNN7yQO/KkZgzWajqbLVbyOCNbIaLHE1QVcAP4isANv4H1oxRgGRFfucsxKkQax4TN/izAt3wn6P
61P6tL5V6Mar5dGa+NtgMbUCTA71GHEo66m8KqrWTKCD/czVmEC94eGRezURZhupmZ6D/CMUZoHB
l7MvMuZxZbTFBo/q9RK/Bt87t+FNNzl5u+GtgVUNDtdTI9cUEvuIbSWvHvcnBVYBKhsuRoq93PLE
Rrty6OYqr1sgdndPLpCDxm6SP25VZgVMpNvETe5vXul0p+gbxn+5mfMAXyRFyhz1+Qro6U+9CmuI
kFW910aa5tmalHXDzWP1gd1/1BlreneVq8egYjsklGl+yEujr62ZMgAXxtDGdQ/RDt2YvZ+Jbf10
0rpQDaeQZR1NRmFB1LoafS8pQzbBx3iuIyznNXMDHZuzja5TO+kgP2vIhVCx+iQshy5EkZebq2bQ
x6Ps52c99yUKspl1tuQcwIt1jnTsg2haZAVBqJrl2RXLaXeadimowRz6kOTE3/l5KtzpDAGq0gr8
1vERwBF9fFvOvfTY4j9hGblgp/pW2oV31/sixOzKMcq0CCts+VVotvj2uSnMby0kUr5vDpid0TOU
6F7nEDGCBHAwggRsAgEBMGIwTjELMAkGA1UEBhMCUEwxITAfBgNVBAoMGEFzc2VjbyBEYXRhIFN5
c3RlbXMgUy5BLjEcMBoGA1UEAwwTQ2VydHVtIFNNSU1FIFJTQSBDQQIQCxz/bLHeR6ddLMqOtFVH
ZzANBglghkgBZQMEAgMFAKCCAd8wGAYJKoZIhvcNAQkDMQsGCSqGSIb3DQEHATAcBgkqhkiG9w0B
CQUxDxcNMjQxMDE1MDUyODEzWjBPBgkqhkiG9w0BCQQxQgRAi65P3s9ws3QlYw1rAGudnc+RyijA
CbAw1L0Dozg9yTM8ffnH9Klf4+GzXJ5uTzurvTnxcddlzcmYY6q5+HwtGjBsBgkqhkiG9w0BCQ8x
XzBdMAsGCWCGSAFlAwQBKjALBglghkgBZQMEAQIwCgYIKoZIhvcNAwcwDgYIKoZIhvcNAwICAgCA
MA0GCCqGSIb3DQMCAgFAMAcGBSsOAwIHMA0GCCqGSIb3DQMCAgEoMHEGCSsGAQQBgjcQBDFkMGIw
TjELMAkGA1UEBhMCUEwxITAfBgNVBAoMGEFzc2VjbyBEYXRhIFN5c3RlbXMgUy5BLjEcMBoGA1UE
AwwTQ2VydHVtIFNNSU1FIFJTQSBDQQIQCxz/bLHeR6ddLMqOtFVHZzBzBgsqhkiG9w0BCRACCzFk
oGIwTjELMAkGA1UEBhMCUEwxITAfBgNVBAoMGEFzc2VjbyBEYXRhIFN5c3RlbXMgUy5BLjEcMBoG
A1UEAwwTQ2VydHVtIFNNSU1FIFJTQSBDQQIQCxz/bLHeR6ddLMqOtFVHZzANBgkqhkiG9w0BAQEF
AASCAgCnoKHWNFsd50XuJq0J/O9VzyqSn2KLlrNSUGv/fpK7Hr2y9dcR9icl6Mn3Vp8RXohP0Tsw
yPavpOeGXiiLicdIk2AoKCV55mtIypkvN9+j1oqlcpS51hnnFL8/PveMdYhXWFB3MQ39njxb98ip
ow3Dc7Egi14mJi7XcuUqeb7U8cyWB6NLWYgR3oSbiQctqVNloO9bErzgv3TDzuUd+rj+DUHkEGfS
ympOm2+c2qgw9HFdvfMH0FVPSqHtwJqx3ElLs/6gBprSfea9e7HxPFZ96+lRaRF8qPMX+wcS8riL
Py7KAg2kfDYZgatSS59xoctV0eXFIsI0tbrMDS6LlYnthJl2wsf27uRmXU9hYudQv9/heADOt3Vw
LHIKgnK1AOzo+4HZRPiTms/lJzIbENuW1SayUO1bnzPVJq7UuIhI8n3rtSEBjvNHyT95HdzyxQzS
/0DUIkeSVSCeoXjDmwES/gF1jsnQMGhQlB87+r1wRtTXLEVizUl2/LtImJ08KzNj2QXz/t6CPUsK
WqI7jnzUw7D6ZbS63WbsVgD9xuFstI62eUaVgA/fd6utIjYyXTA3KvypI7lusG5D/esmWuC0TEUb
Xr20WNxgyWyvfdLOxAkAWHc2v19GJq2bJYun7EC7KKAP12k8Z3OPmGM/VGhN1PYt0nNb/UXDNtN1
EwG77wAAAAAAAA==

--===============0044237992229413387==--


From lecteur@zogotounga.net Tue Oct 15 15:46:36 2024
From: =?utf-8?q?St=C3=A9phane?= Rollandin <lecteur@zogotounga.net>
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] Re: the form projector
Date: Tue, 15 Oct 2024 17:46:25 +0200
Message-ID: <47afa437-5542-4a58-91f9-fed89bc19941@zogotounga.net>
In-Reply-To: <b35a676e-71bd-e631-4cad-efdedd0e87f3@gmail.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============4624972186339218853=="

--===============4624972186339218853==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit

nice!

Stef



--===============4624972186339218853==--


From drurowin@gmail.com Tue Oct 15 16:49:39 2024
From: Lauren Pullen <drurowin@gmail.com>
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] Re: the form projector
Date: Tue, 15 Oct 2024 10:49:27 -0600
Message-ID: <f0eb0359-e4a9-4c1d-bbb3-8f0aa403e64d@gmail.com>
In-Reply-To: <3754f3cacb84fccc86030ea678eabb1b@mail.msen.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============1400098407342477676=="

--===============1400098407342477676==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

On 10/14/24 16:47, lewis(a)mail.msen.com wrote:
> I love it :-)
> 
> Dave

Thanks!  Dragging the handles around and watching it change is very
satisfying.

On 10/14/24 18:01, Vanessa Freudenberg wrote:
> So itâ€™s like WarpBlt but with perspective correction? Possibly
> the primitive just needs one more argument?
>
> Vanessa

Kinda.  I used drawPolygon:fillStyle: to draw each source pixel as a
quad.  Performance is not so good... having all the math and enumeration
be primitive would probably be quite useful.

I need to get better at reading the TimeProfileBrowser.

On 10/14/24 23:28, Scott Gibson wrote:
> This looks really awesome! My first impression from the first
> image was the iconic style of the Star Wars text scroll.
>
> I have not gotten to test this yet but it does seem to be quite
> a useful ability.
>
> Scott

Ha!  So was mine, but then I thought Superman and couldn't get it out of
my head.

It is not quite as useful as you might hope.  Performance beats
raytracing because the balloon fill is primitive, but the math to
compute the vertices and enumerate over them isn't.  It's a neat toy,
though, and the math is very simple for teaching.

--===============1400098407342477676==--


From eliot.miranda@gmail.com Tue Oct 15 19:03:22 2024
From: Eliot Miranda <eliot.miranda@gmail.com>
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] Re: the form projector
Date: Tue, 15 Oct 2024 12:02:56 -0700
Message-ID:
 <CAC20JE0LfrP3hNTHHmJu1vw3wOnqjWUE6zqR_64D-gyQdZFT1A@mail.gmail.com>
In-Reply-To: <f0eb0359-e4a9-4c1d-bbb3-8f0aa403e64d@gmail.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============2373999193520866870=="

--===============2373999193520866870==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

Hi Lauren,

On Tue, Oct 15, 2024 at 9:50â€¯AM Lauren Pullen <drurowin(a)gmail.com> wrote:

> On 10/14/24 16:47, lewis(a)mail.msen.com wrote:
> > I love it :-)
> >
> > Dave
>
> Thanks!  Dragging the handles around and watching it change is very
> satisfying.
>
> On 10/14/24 18:01, Vanessa Freudenberg wrote:
> > So itâ€™s like WarpBlt but with perspective correction? Possibly
> > the primitive just needs one more argument?
> >
> > Vanessa
>
> Kinda.  I used drawPolygon:fillStyle: to draw each source pixel as a
> quad.  Performance is not so good... having all the math and enumeration
> be primitive would probably be quite useful.
>
> I need to get better at reading the TimeProfileBrowser.
>

Use AndreasSystemProfiler at source.squeak.org/VMMaker; it is accurate
about primitives as well as normal methods, which isn't the case for the
TimeProfiler.

Can the form projector do arbitrary rotation?


> On 10/14/24 23:28, Scott Gibson wrote:
> > This looks really awesome! My first impression from the first
> > image was the iconic style of the Star Wars text scroll.
> >
> > I have not gotten to test this yet but it does seem to be quite
> > a useful ability.
> >
> > Scott
>
> Ha!  So was mine, but then I thought Superman and couldn't get it out of
> my head.
>
> It is not quite as useful as you might hope.  Performance beats
> raytracing because the balloon fill is primitive, but the math to
> compute the vertices and enumerate over them isn't.  It's a neat toy,
> though, and the math is very simple for teaching.
> Squeak-dev mailing list -- squeak-dev(a)lists.squeakfoundation.org
> To unsubscribe send an email to
> squeak-dev-leave(a)lists.squeakfoundation.org


_,,,^..^,,,_
best, Eliot



--===============2373999193520866870==
Content-Type: text/html
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="attachment.html"
MIME-Version: 1.0

PGRpdiBkaXI9Imx0ciI+PGRpdiBkaXI9Imx0ciI+PGRpdiBjbGFzcz0iZ21haWxfZGVmYXVsdCIg
c3R5bGU9ImZvbnQtc2l6ZTpzbWFsbCI+SGkgTGF1cmVuLDwvZGl2PjwvZGl2Pjxicj48ZGl2IGNs
YXNzPSJnbWFpbF9xdW90ZSI+PGRpdiBkaXI9Imx0ciIgY2xhc3M9ImdtYWlsX2F0dHIiPk9uIFR1
ZSwgT2N0IDE1LCAyMDI0IGF0IDk6NTDigK9BTSBMYXVyZW4gUHVsbGVuICZsdDs8YSBocmVmPSJt
YWlsdG86ZHJ1cm93aW5AZ21haWwuY29tIj5kcnVyb3dpbkBnbWFpbC5jb208L2E+Jmd0OyB3cm90
ZTo8YnI+PC9kaXY+PGJsb2NrcXVvdGUgY2xhc3M9ImdtYWlsX3F1b3RlIiBzdHlsZT0ibWFyZ2lu
OjBweCAwcHggMHB4IDAuOGV4O2JvcmRlci1sZWZ0LXdpZHRoOjFweDtib3JkZXItbGVmdC1zdHls
ZTpzb2xpZDtib3JkZXItbGVmdC1jb2xvcjpyZ2IoMjA0LDIwNCwyMDQpO3BhZGRpbmctbGVmdDox
ZXgiPk9uIDEwLzE0LzI0IDE2OjQ3LCA8YSBocmVmPSJtYWlsdG86bGV3aXNAbWFpbC5tc2VuLmNv
bSIgdGFyZ2V0PSJfYmxhbmsiPmxld2lzQG1haWwubXNlbi5jb208L2E+IHdyb3RlOjxicj4KJmd0
OyBJIGxvdmUgaXQgOi0pPGJyPgomZ3Q7IDxicj4KJmd0OyBEYXZlPGJyPgo8YnI+ClRoYW5rcyHC
oCBEcmFnZ2luZyB0aGUgaGFuZGxlcyBhcm91bmQgYW5kIHdhdGNoaW5nIGl0IGNoYW5nZSBpcyB2
ZXJ5PGJyPgpzYXRpc2Z5aW5nLjxicj4KPGJyPgpPbiAxMC8xNC8yNCAxODowMSwgVmFuZXNzYSBG
cmV1ZGVuYmVyZyB3cm90ZTo8YnI+CiZndDsgU28gaXTigJlzIGxpa2UgV2FycEJsdCBidXQgd2l0
aCBwZXJzcGVjdGl2ZSBjb3JyZWN0aW9uPyBQb3NzaWJseTxicj4KJmd0OyB0aGUgcHJpbWl0aXZl
IGp1c3QgbmVlZHMgb25lIG1vcmUgYXJndW1lbnQ/PGJyPgomZ3Q7PGJyPgomZ3Q7IFZhbmVzc2E8
YnI+Cjxicj4KS2luZGEuwqAgSSB1c2VkIGRyYXdQb2x5Z29uOmZpbGxTdHlsZTogdG8gZHJhdyBl
YWNoIHNvdXJjZSBwaXhlbCBhcyBhPGJyPgpxdWFkLsKgIFBlcmZvcm1hbmNlIGlzIG5vdCBzbyBn
b29kLi4uIGhhdmluZyBhbGwgdGhlIG1hdGggYW5kIGVudW1lcmF0aW9uPGJyPgpiZSBwcmltaXRp
dmUgd291bGQgcHJvYmFibHkgYmUgcXVpdGUgdXNlZnVsLjxicj4KPGJyPgpJIG5lZWQgdG8gZ2V0
IGJldHRlciBhdCByZWFkaW5nIHRoZSBUaW1lUHJvZmlsZUJyb3dzZXIuPGJyPjwvYmxvY2txdW90
ZT48ZGl2Pjxicj48L2Rpdj48ZGl2IHN0eWxlPSJmb250LXNpemU6c21hbGwiIGNsYXNzPSJnbWFp
bF9kZWZhdWx0Ij5Vc2UgQW5kcmVhc1N5c3RlbVByb2ZpbGVyIGF0IDxhIGhyZWY9Imh0dHA6Ly9z
b3VyY2Uuc3F1ZWFrLm9yZy9WTU1ha2VyIj5zb3VyY2Uuc3F1ZWFrLm9yZy9WTU1ha2VyPC9hPjsg
aXQgaXMgYWNjdXJhdGUgYWJvdXQgcHJpbWl0aXZlcyBhcyB3ZWxswqBhcyBub3JtYWwgbWV0aG9k
cywgd2hpY2ggaXNuJiMzOTt0IHRoZSBjYXNlIGZvciB0aGUgVGltZVByb2ZpbGVyLjwvZGl2Pjxk
aXYgc3R5bGU9ImZvbnQtc2l6ZTpzbWFsbCIgY2xhc3M9ImdtYWlsX2RlZmF1bHQiPjxicj48L2Rp
dj48ZGl2IHN0eWxlPSJmb250LXNpemU6c21hbGwiIGNsYXNzPSJnbWFpbF9kZWZhdWx0Ij5DYW4g
dGhlIGZvcm0gcHJvamVjdG9yIGRvIGFyYml0cmFyeSByb3RhdGlvbj88L2Rpdj48ZGl2IHN0eWxl
PSJmb250LXNpemU6c21hbGwiIGNsYXNzPSJnbWFpbF9kZWZhdWx0Ij48YnI+PC9kaXY+PGJsb2Nr
cXVvdGUgY2xhc3M9ImdtYWlsX3F1b3RlIiBzdHlsZT0ibWFyZ2luOjBweCAwcHggMHB4IDAuOGV4
O2JvcmRlci1sZWZ0LXdpZHRoOjFweDtib3JkZXItbGVmdC1zdHlsZTpzb2xpZDtib3JkZXItbGVm
dC1jb2xvcjpyZ2IoMjA0LDIwNCwyMDQpO3BhZGRpbmctbGVmdDoxZXgiPgo8YnI+Ck9uIDEwLzE0
LzI0IDIzOjI4LCBTY290dCBHaWJzb24gd3JvdGU6PGJyPgomZ3Q7IFRoaXMgbG9va3MgcmVhbGx5
IGF3ZXNvbWUhIE15IGZpcnN0IGltcHJlc3Npb24gZnJvbSB0aGUgZmlyc3Q8YnI+CiZndDsgaW1h
Z2Ugd2FzIHRoZSBpY29uaWMgc3R5bGUgb2YgdGhlIFN0YXIgV2FycyB0ZXh0IHNjcm9sbC48YnI+
CiZndDs8YnI+CiZndDsgSSBoYXZlIG5vdCBnb3R0ZW4gdG8gdGVzdCB0aGlzIHlldCBidXQgaXQg
ZG9lcyBzZWVtIHRvIGJlIHF1aXRlPGJyPgomZ3Q7IGEgdXNlZnVsIGFiaWxpdHkuPGJyPgomZ3Q7
PGJyPgomZ3Q7IFNjb3R0PGJyPgo8YnI+CkhhIcKgIFNvIHdhcyBtaW5lLCBidXQgdGhlbiBJIHRo
b3VnaHQgU3VwZXJtYW4gYW5kIGNvdWxkbiYjMzk7dCBnZXQgaXQgb3V0IG9mPGJyPgpteSBoZWFk
Ljxicj4KPGJyPgpJdCBpcyBub3QgcXVpdGUgYXMgdXNlZnVsIGFzIHlvdSBtaWdodCBob3BlLsKg
IFBlcmZvcm1hbmNlIGJlYXRzPGJyPgpyYXl0cmFjaW5nIGJlY2F1c2UgdGhlIGJhbGxvb24gZmls
bCBpcyBwcmltaXRpdmUsIGJ1dCB0aGUgbWF0aCB0bzxicj4KY29tcHV0ZSB0aGUgdmVydGljZXMg
YW5kIGVudW1lcmF0ZSBvdmVyIHRoZW0gaXNuJiMzOTt0LsKgIEl0JiMzOTtzIGEgbmVhdCB0b3ks
PGJyPgp0aG91Z2gsIGFuZCB0aGUgbWF0aCBpcyB2ZXJ5IHNpbXBsZSBmb3IgdGVhY2hpbmcuPGJy
PgpTcXVlYWstZGV2IG1haWxpbmcgbGlzdCAtLSA8YSBocmVmPSJtYWlsdG86c3F1ZWFrLWRldkBs
aXN0cy5zcXVlYWtmb3VuZGF0aW9uLm9yZyIgdGFyZ2V0PSJfYmxhbmsiPnNxdWVhay1kZXZAbGlz
dHMuc3F1ZWFrZm91bmRhdGlvbi5vcmc8L2E+PGJyPgpUbyB1bnN1YnNjcmliZSBzZW5kIGFuIGVt
YWlsIHRvIDxhIGhyZWY9Im1haWx0bzpzcXVlYWstZGV2LWxlYXZlQGxpc3RzLnNxdWVha2ZvdW5k
YXRpb24ub3JnIiB0YXJnZXQ9Il9ibGFuayI+c3F1ZWFrLWRldi1sZWF2ZUBsaXN0cy5zcXVlYWtm
b3VuZGF0aW9uLm9yZzwvYT48L2Jsb2NrcXVvdGU+PC9kaXY+PGRpdj48YnI+PC9kaXY+PGRpdiBk
aXI9Imx0ciIgY2xhc3M9ImdtYWlsX3NpZ25hdHVyZSI+PGRpdiBkaXI9Imx0ciI+PGRpdj48c3Bh
biBzdHlsZT0iZm9udC1zaXplOnNtYWxsO2JvcmRlci1jb2xsYXBzZTpzZXBhcmF0ZSI+PGRpdj5f
LCwsXi4uXiwsLF88YnI+PC9kaXY+PGRpdj5iZXN0LMKgRWxpb3Q8L2Rpdj48L3NwYW4+PC9kaXY+
PC9kaXY+PC9kaXY+PC9kaXY+Cg==

--===============2373999193520866870==--


From commits@source.squeak.org Tue Oct 15 19:14:29 2024
From: commits@source.squeak.org
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] The Trunk: EToys-eem.519.mcz
Date: Tue, 15 Oct 2024 19:14:18 +0000
Message-ID: <20241015191424.C280D5826BF@mail.squeak.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============0513681279387322903=="

--===============0513681279387322903==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

Eliot Miranda uploaded a new version of EToys to project The Trunk:
http://source.squeak.org/trunk/EToys-eem.519.mcz

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Summary =3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Name: EToys-eem.519
Author: eem
Time: 15 October 2024, 12:14:11.837768 pm
UUID: 0c1c0e6b-5f8c-4ce2-bcbb-7a6d400a7b99
Ancestors: EToys-eem.518

Adapt to Compiler-eem.504/505/506

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Diff against EToys-eem.518 =3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Item was changed:
  ----- Method: MessageNode>>isFirstChild: (in category '*Etoys-Squeakland-Tw=
eak-Kedama') -----
  isFirstChild: childNode
 =20
+ 	^ childNode is: receiver.
- 	^ childNode =3D receiver.
  !

Item was changed:
  ----- Method: MessageNode>>isLastChild: (in category '*Etoys-Squeakland-Twe=
ak-Kedama') -----
  isLastChild: childNode
 =20
+ 	^childNode is: (arguments size > 0 ifTrue: [arguments last] ifFalse: [sele=
ctor])!
- 	arguments size > 0 ifTrue: [^ childNode =3D arguments last].
- 	^ childNode =3D selector.
- !

Item was changed:
  ----- Method: MessageNode>>replaceNode:with: (in category '*Etoys-Squeaklan=
d-Tweak-Kedama') -----
  replaceNode: childNode with: newNode
 =20
  	| index |
+ 	(childNode is: receiver) ifTrue: [receiver :=3D newNode. ^ self].
- 	childNode =3D receiver ifTrue: [receiver :=3D newNode. ^ self].
  	childNode =3D selector ifTrue: [selector :=3D newNode. ^ self].
  	(index :=3D arguments indexOf: childNode) > 0
  		ifTrue: [arguments at: index put: newNode. ^ self].
  !


--===============0513681279387322903==--


From tim@rowledge.org Tue Oct 15 19:27:42 2024
From: Tim Rowledge <tim@rowledge.org>
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] AndreasProfiler (was Re: the form projector)
Date: Tue, 15 Oct 2024 12:27:32 -0700
Message-ID: <21E3C267-A797-4273-A639-361DCC280806@rowledge.org>
In-Reply-To:
 <CAC20JE0LfrP3hNTHHmJu1vw3wOnqjWUE6zqR_64D-gyQdZFT1A@mail.gmail.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============2195706779328674396=="

--===============2195706779328674396==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable



> On 2024-10-15, at 12:02 PM, Eliot Miranda <eliot.miranda(a)gmail.com> wrote:
>=20
> Use AndreasSystemProfiler at source.squeak.org/VMMaker; it is accurate abou=
t primitives as well as normal methods, which isn't the case for the TimeProf=
iler.

Is there any good reason we don't have that in image by default? It doesn't a=
ppear to be a huge package, or dangerous.

tim
--
tim Rowledge; tim(a)rowledge.org; http://www.rowledge.org/tim
29A, the hexadecimal of the Beast.



--===============2195706779328674396==--


From commits@source.squeak.org Tue Oct 15 20:13:13 2024
From: commits@source.squeak.org
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] The Trunk: Files-eem.212.mcz
Date: Tue, 15 Oct 2024 20:13:05 +0000
Message-ID: <20241015201308.E931B5826BF@mail.squeak.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============1943630751845440288=="

--===============1943630751845440288==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

Eliot Miranda uploaded a new version of Files to project The Trunk:
http://source.squeak.org/trunk/Files-eem.212.mcz

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Summary =3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Name: Files-eem.212
Author: eem
Time: 15 October 2024, 1:13:03.538128 pm
UUID: 08e9fc22-31a4-4c08-bc06-18aededaae10
Ancestors: Files-cmm.211

Add the methods that interface to the FilePlugin's new get/set working/curren=
t directory primitives available in the latest VMs.

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Diff against Files-cmm.211 =3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Item was added:
+ ----- Method: FileDirectory class>>primWorkingDirectory (in category 'priva=
te') -----
+ primWorkingDirectory
+ 	"Answer the utf8 encoded name of the VM process's working/current director=
y."
+=20
+  	<primitive: 'primitiveGetWorkingDirectory' module: 'FilePlugin' error: ec>
+ 	self primitiveFailed
+=20
+ 	"self primWorkingDirectory"!

Item was added:
+ ----- Method: FileDirectory class>>primWorkingDirectory: (in category 'priv=
ate') -----
+ primWorkingDirectory: utf8Path
+ 	"Set the VM process's working/current directory to be the argument, a utf8=
 string."
+=20
+  	<primitive: 'primitiveSetWorkingDirectory' module: 'FilePlugin' error: ec>
+ 	self primitiveFailed
+=20
+ 	"self primWorkingDirectory: (UIManager default request: 'to which director=
y?')"!

Item was added:
+ ----- Method: FileDirectory class>>workingDirectory (in category 'name util=
ities') -----
+ workingDirectory
+ 	"Answer the name of the VM process's working/current directory."
+ 	^self primWorkingDirectory utf8ToSqueak
+=20
+ 	"self workingDirectory"!

Item was added:
+ ----- Method: FileDirectory class>>workingDirectory: (in category 'name uti=
lities') -----
+ workingDirectory: pathName
+ 	"Set the VM process's working working/current to be the argument."
+ 	self primWorkingDirectory: pathName squeakToUtf8
+=20
+ 	"(UIManager default
+ 		request: 'to which directory?'
+ 		initialAnswer: self workingDirectory) ifNotEmpty: [:path| self workingDir=
ectory: path]"!


--===============1943630751845440288==--


From eliot.miranda@gmail.com Tue Oct 15 21:10:20 2024
From: Eliot Miranda <eliot.miranda@gmail.com>
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] Re: AndreasProfiler (was Re: the form projector)
Date: Tue, 15 Oct 2024 14:09:54 -0700
Message-ID:
 <CAC20JE2AsdJuMnC+iXOJeDAgNw7v5_7CqWsOU=2fQet7sOiPAA@mail.gmail.com>
In-Reply-To: <21E3C267-A797-4273-A639-361DCC280806@rowledge.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============3544804593773775047=="

--===============3544804593773775047==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

On Tue, Oct 15, 2024 at 12:28â€¯PM Tim Rowledge <tim(a)rowledge.org> wrote:

>
>
> > On 2024-10-15, at 12:02 PM, Eliot Miranda <eliot.miranda(a)gmail.com>
> wrote:
> >
> > Use AndreasSystemProfiler at source.squeak.org/VMMaker; it is accurate
> about primitives as well as normal methods, which isn't the case for the
> TimeProfiler.
>
> Is there any good reason we don't have that in image by default? It
> doesn't appear to be a huge package, or dangerous.
>

IMO it should replace TimeProfiler. There is simply the need/desire to keep
the copyright notices that assert Andreas' authorship of the code.


> tim
> --
> tim Rowledge; tim(a)rowledge.org; http://www.rowledge.org/tim
> 29A, the hexadecimal of the Beast.
>
>
> Squeak-dev mailing list -- squeak-dev(a)lists.squeakfoundation.org
> To unsubscribe send an email to
> squeak-dev-leave(a)lists.squeakfoundation.org
>


-- 
_,,,^..^,,,_
best, Eliot



--===============3544804593773775047==
Content-Type: text/html
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="attachment.html"
MIME-Version: 1.0

PGRpdiBkaXI9Imx0ciI+PGRpdiBkaXI9Imx0ciI+PGRpdiBjbGFzcz0iZ21haWxfZGVmYXVsdCIg
c3R5bGU9ImZvbnQtc2l6ZTpzbWFsbCI+PGJyPjwvZGl2PjwvZGl2Pjxicj48ZGl2IGNsYXNzPSJn
bWFpbF9xdW90ZSI+PGRpdiBkaXI9Imx0ciIgY2xhc3M9ImdtYWlsX2F0dHIiPk9uIFR1ZSwgT2N0
IDE1LCAyMDI0IGF0IDEyOjI44oCvUE0gVGltIFJvd2xlZGdlICZsdDs8YSBocmVmPSJtYWlsdG86
dGltQHJvd2xlZGdlLm9yZyI+dGltQHJvd2xlZGdlLm9yZzwvYT4mZ3Q7IHdyb3RlOjxicj48L2Rp
dj48YmxvY2txdW90ZSBjbGFzcz0iZ21haWxfcXVvdGUiIHN0eWxlPSJtYXJnaW46MHB4IDBweCAw
cHggMC44ZXg7Ym9yZGVyLWxlZnQtd2lkdGg6MXB4O2JvcmRlci1sZWZ0LXN0eWxlOnNvbGlkO2Jv
cmRlci1sZWZ0LWNvbG9yOnJnYigyMDQsMjA0LDIwNCk7cGFkZGluZy1sZWZ0OjFleCI+PGJyPgo8
YnI+CiZndDsgT24gMjAyNC0xMC0xNSwgYXQgMTI6MDIgUE0sIEVsaW90IE1pcmFuZGEgJmx0Ozxh
IGhyZWY9Im1haWx0bzplbGlvdC5taXJhbmRhQGdtYWlsLmNvbSIgdGFyZ2V0PSJfYmxhbmsiPmVs
aW90Lm1pcmFuZGFAZ21haWwuY29tPC9hPiZndDsgd3JvdGU6PGJyPgomZ3Q7IDxicj4KJmd0OyBV
c2UgQW5kcmVhc1N5c3RlbVByb2ZpbGVyIGF0IDxhIGhyZWY9Imh0dHA6Ly9zb3VyY2Uuc3F1ZWFr
Lm9yZy9WTU1ha2VyIiByZWw9Im5vcmVmZXJyZXIiIHRhcmdldD0iX2JsYW5rIj5zb3VyY2Uuc3F1
ZWFrLm9yZy9WTU1ha2VyPC9hPjsgaXQgaXMgYWNjdXJhdGUgYWJvdXQgcHJpbWl0aXZlcyBhcyB3
ZWxsIGFzIG5vcm1hbCBtZXRob2RzLCB3aGljaCBpc24mIzM5O3QgdGhlIGNhc2UgZm9yIHRoZSBU
aW1lUHJvZmlsZXIuPGJyPgo8YnI+CklzIHRoZXJlIGFueSBnb29kIHJlYXNvbiB3ZSBkb24mIzM5
O3QgaGF2ZSB0aGF0IGluIGltYWdlIGJ5IGRlZmF1bHQ/IEl0IGRvZXNuJiMzOTt0IGFwcGVhciB0
byBiZSBhIGh1Z2UgcGFja2FnZSwgb3IgZGFuZ2Vyb3VzLjxicj48L2Jsb2NrcXVvdGU+PGRpdj48
YnI+PC9kaXY+PGRpdiBzdHlsZT0iZm9udC1zaXplOnNtYWxsIiBjbGFzcz0iZ21haWxfZGVmYXVs
dCI+SU1PIGl0IHNob3VsZCByZXBsYWNlIFRpbWVQcm9maWxlci4gVGhlcmUgaXMgc2ltcGx5IHRo
ZSBuZWVkL2Rlc2lyZSB0byBrZWVwIHRoZSBjb3B5cmlnaHQgbm90aWNlcyB0aGF0IGFzc2VydCBB
bmRyZWFzJiMzOTsgYXV0aG9yc2hpcCBvZiB0aGUgY29kZS48L2Rpdj48ZGl2IHN0eWxlPSJmb250
LXNpemU6c21hbGwiIGNsYXNzPSJnbWFpbF9kZWZhdWx0Ij48YnI+PC9kaXY+PGJsb2NrcXVvdGUg
Y2xhc3M9ImdtYWlsX3F1b3RlIiBzdHlsZT0ibWFyZ2luOjBweCAwcHggMHB4IDAuOGV4O2JvcmRl
ci1sZWZ0LXdpZHRoOjFweDtib3JkZXItbGVmdC1zdHlsZTpzb2xpZDtib3JkZXItbGVmdC1jb2xv
cjpyZ2IoMjA0LDIwNCwyMDQpO3BhZGRpbmctbGVmdDoxZXgiPgo8YnI+CnRpbTxicj4KLS08YnI+
CnRpbSBSb3dsZWRnZTsgPGEgaHJlZj0ibWFpbHRvOnRpbUByb3dsZWRnZS5vcmciIHRhcmdldD0i
X2JsYW5rIj50aW1Acm93bGVkZ2Uub3JnPC9hPjsgPGEgaHJlZj0iaHR0cDovL3d3dy5yb3dsZWRn
ZS5vcmcvdGltIiByZWw9Im5vcmVmZXJyZXIiIHRhcmdldD0iX2JsYW5rIj5odHRwOi8vd3d3LnJv
d2xlZGdlLm9yZy90aW08L2E+PGJyPgoyOUEsIHRoZSBoZXhhZGVjaW1hbCBvZiB0aGUgQmVhc3Qu
PGJyPgo8YnI+Cjxicj4KU3F1ZWFrLWRldiBtYWlsaW5nIGxpc3QgLS0gPGEgaHJlZj0ibWFpbHRv
OnNxdWVhay1kZXZAbGlzdHMuc3F1ZWFrZm91bmRhdGlvbi5vcmciIHRhcmdldD0iX2JsYW5rIj5z
cXVlYWstZGV2QGxpc3RzLnNxdWVha2ZvdW5kYXRpb24ub3JnPC9hPjxicj4KVG8gdW5zdWJzY3Jp
YmUgc2VuZCBhbiBlbWFpbCB0byA8YSBocmVmPSJtYWlsdG86c3F1ZWFrLWRldi1sZWF2ZUBsaXN0
cy5zcXVlYWtmb3VuZGF0aW9uLm9yZyIgdGFyZ2V0PSJfYmxhbmsiPnNxdWVhay1kZXYtbGVhdmVA
bGlzdHMuc3F1ZWFrZm91bmRhdGlvbi5vcmc8L2E+PGJyPgo8L2Jsb2NrcXVvdGU+PC9kaXY+PGJy
IGNsZWFyPSJhbGwiPjxkaXY+PGJyPjwvZGl2PjxzcGFuIGNsYXNzPSJnbWFpbF9zaWduYXR1cmVf
cHJlZml4Ij4tLSA8L3NwYW4+PGJyPjxkaXYgZGlyPSJsdHIiIGNsYXNzPSJnbWFpbF9zaWduYXR1
cmUiPjxkaXYgZGlyPSJsdHIiPjxkaXY+PHNwYW4gc3R5bGU9ImZvbnQtc2l6ZTpzbWFsbDtib3Jk
ZXItY29sbGFwc2U6c2VwYXJhdGUiPjxkaXY+XywsLF4uLl4sLCxfPGJyPjwvZGl2PjxkaXY+YmVz
dCzCoEVsaW90PC9kaXY+PC9zcGFuPjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2Pgo=

--===============3544804593773775047==--


From drurowin@gmail.com Tue Oct 15 21:52:55 2024
From: Lauren P <drurowin@gmail.com>
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] Re: the form projector
Date: Tue, 15 Oct 2024 15:52:33 -0600
Message-ID:
 <CANAQNuzuUgGbe7bZyA5DKj4P9mLeQP4xf7q2b5U_gnYn=kAr8g@mail.gmail.com>
In-Reply-To:
 <CAC20JE0LfrP3hNTHHmJu1vw3wOnqjWUE6zqR_64D-gyQdZFT1A@mail.gmail.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============5550897442782832693=="

--===============5550897442782832693==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

Hey Eliot,

On Tue, Oct 15, 2024, 13:04 Eliot Miranda <eliot.miranda(a)gmail.com> wrote:

> Hi Lauren,
>
> On Tue, Oct 15, 2024 at 9:50=E2=80=AFAM Lauren Pullen <drurowin(a)gmail.com=
> wrote:
>
>> On 10/14/24 16:47, lewis(a)mail.msen.com wrote:
>> > I love it :-)
>> >
>> > Dave
>>
>> Thanks!  Dragging the handles around and watching it change is very
>> satisfying.
>>
>> On 10/14/24 18:01, Vanessa Freudenberg wrote:
>> > So it=E2=80=99s like WarpBlt but with perspective correction? Possibly
>> > the primitive just needs one more argument?
>> >
>> > Vanessa
>>
>> Kinda.  I used drawPolygon:fillStyle: to draw each source pixel as a
>> quad.  Performance is not so good... having all the math and enumeration
>> be primitive would probably be quite useful.
>>
>> I need to get better at reading the TimeProfileBrowser.
>>
>
> Use AndreasSystemProfiler at source.squeak.org/VMMaker; it is accurate
> about primitives as well as normal methods, which isn't the case for the
> TimeProfiler.
>
Thanks! I'll take a look at it.

Can the form projector do arbitrary rotation?
>
Yes.  So long as you wind the output points strictly clockwise you'll get a
rotation.  (If you wind the output points strictly counterclockwise it
flips the image, but still rotates it.)

It basically works the same way OpenGL textures quads but without the
parallel draw operations (hence the *slowness*).



--===============5550897442782832693==
Content-Type: text/html
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="attachment.html"
MIME-Version: 1.0

PGRpdiBkaXI9ImF1dG8iPkhleSBFbGlvdCw8YnI+PGJyPjxkaXYgY2xhc3M9ImdtYWlsX3F1b3Rl
IiBkaXI9ImF1dG8iPjxkaXYgZGlyPSJsdHIiIGNsYXNzPSJnbWFpbF9hdHRyIj5PbiBUdWUsIE9j
dCAxNSwgMjAyNCwgMTM6MDQgRWxpb3QgTWlyYW5kYSAmbHQ7PGEgaHJlZj0ibWFpbHRvOmVsaW90
Lm1pcmFuZGFAZ21haWwuY29tIj5lbGlvdC5taXJhbmRhQGdtYWlsLmNvbTwvYT4mZ3Q7IHdyb3Rl
Ojxicj48L2Rpdj48YmxvY2txdW90ZSBjbGFzcz0iZ21haWxfcXVvdGUiIHN0eWxlPSJtYXJnaW46
MHB4IDBweCAwcHggMC44ZXg7Ym9yZGVyLWxlZnQ6MXB4IHNvbGlkIHJnYigyMDQsMjA0LDIwNCk7
cGFkZGluZy1sZWZ0OjFleCI+PGRpdiBkaXI9Imx0ciI+PGRpdiBkaXI9Imx0ciI+PGRpdiBjbGFz
cz0iZ21haWxfZGVmYXVsdCIgc3R5bGU9ImZvbnQtc2l6ZTpzbWFsbCI+SGkgTGF1cmVuLDwvZGl2
PjwvZGl2Pjxicj48ZGl2IGNsYXNzPSJnbWFpbF9xdW90ZSI+PGRpdiBkaXI9Imx0ciIgY2xhc3M9
ImdtYWlsX2F0dHIiPk9uIFR1ZSwgT2N0IDE1LCAyMDI0IGF0IDk6NTDigK9BTSBMYXVyZW4gUHVs
bGVuICZsdDs8YSBocmVmPSJtYWlsdG86ZHJ1cm93aW5AZ21haWwuY29tIiB0YXJnZXQ9Il9ibGFu
ayIgcmVsPSJub3JlZmVycmVyIj5kcnVyb3dpbkBnbWFpbC5jb208L2E+Jmd0OyB3cm90ZTo8YnI+
PC9kaXY+PGJsb2NrcXVvdGUgY2xhc3M9ImdtYWlsX3F1b3RlIiBzdHlsZT0ibWFyZ2luOjBweCAw
cHggMHB4IDAuOGV4O2JvcmRlci1sZWZ0OjFweCBzb2xpZCByZ2IoMjA0LDIwNCwyMDQpO3BhZGRp
bmctbGVmdDoxZXgiPk9uIDEwLzE0LzI0IDE2OjQ3LCA8YSBocmVmPSJtYWlsdG86bGV3aXNAbWFp
bC5tc2VuLmNvbSIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9yZWZlcnJlciI+bGV3aXNAbWFpbC5t
c2VuLmNvbTwvYT4gd3JvdGU6PGJyPgomZ3Q7IEkgbG92ZSBpdCA6LSk8YnI+CiZndDsgPGJyPgom
Z3Q7IERhdmU8YnI+Cjxicj4KVGhhbmtzIcKgIERyYWdnaW5nIHRoZSBoYW5kbGVzIGFyb3VuZCBh
bmQgd2F0Y2hpbmcgaXQgY2hhbmdlIGlzIHZlcnk8YnI+CnNhdGlzZnlpbmcuPGJyPgo8YnI+Ck9u
IDEwLzE0LzI0IDE4OjAxLCBWYW5lc3NhIEZyZXVkZW5iZXJnIHdyb3RlOjxicj4KJmd0OyBTbyBp
dOKAmXMgbGlrZSBXYXJwQmx0IGJ1dCB3aXRoIHBlcnNwZWN0aXZlIGNvcnJlY3Rpb24/IFBvc3Np
Ymx5PGJyPgomZ3Q7IHRoZSBwcmltaXRpdmUganVzdCBuZWVkcyBvbmUgbW9yZSBhcmd1bWVudD88
YnI+CiZndDs8YnI+CiZndDsgVmFuZXNzYTxicj4KPGJyPgpLaW5kYS7CoCBJIHVzZWQgZHJhd1Bv
bHlnb246ZmlsbFN0eWxlOiB0byBkcmF3IGVhY2ggc291cmNlIHBpeGVsIGFzIGE8YnI+CnF1YWQu
wqAgUGVyZm9ybWFuY2UgaXMgbm90IHNvIGdvb2QuLi4gaGF2aW5nIGFsbCB0aGUgbWF0aCBhbmQg
ZW51bWVyYXRpb248YnI+CmJlIHByaW1pdGl2ZSB3b3VsZCBwcm9iYWJseSBiZSBxdWl0ZSB1c2Vm
dWwuPGJyPgo8YnI+CkkgbmVlZCB0byBnZXQgYmV0dGVyIGF0IHJlYWRpbmcgdGhlIFRpbWVQcm9m
aWxlQnJvd3Nlci48YnI+PC9ibG9ja3F1b3RlPjxkaXY+PGJyPjwvZGl2PjxkaXYgc3R5bGU9ImZv
bnQtc2l6ZTpzbWFsbCIgY2xhc3M9ImdtYWlsX2RlZmF1bHQiPlVzZSBBbmRyZWFzU3lzdGVtUHJv
ZmlsZXIgYXQgPGEgaHJlZj0iaHR0cDovL3NvdXJjZS5zcXVlYWsub3JnL1ZNTWFrZXIiIHRhcmdl
dD0iX2JsYW5rIiByZWw9Im5vcmVmZXJyZXIiPnNvdXJjZS5zcXVlYWsub3JnL1ZNTWFrZXI8L2E+
OyBpdCBpcyBhY2N1cmF0ZSBhYm91dCBwcmltaXRpdmVzIGFzIHdlbGzCoGFzIG5vcm1hbCBtZXRo
b2RzLCB3aGljaCBpc24mIzM5O3QgdGhlIGNhc2UgZm9yIHRoZSBUaW1lUHJvZmlsZXIuPC9kaXY+
PC9kaXY+PC9kaXY+PC9ibG9ja3F1b3RlPjwvZGl2PjxkaXYgZGlyPSJhdXRvIj5UaGFua3MhIEkm
IzM5O2xsIHRha2UgYSBsb29rIGF0IGl0LjwvZGl2PjxkaXYgZGlyPSJhdXRvIj48YnI+PC9kaXY+
PGRpdiBjbGFzcz0iZ21haWxfcXVvdGUiIGRpcj0iYXV0byI+PGJsb2NrcXVvdGUgY2xhc3M9Imdt
YWlsX3F1b3RlIiBzdHlsZT0ibWFyZ2luOjBweCAwcHggMHB4IDAuOGV4O2JvcmRlci1sZWZ0OjFw
eCBzb2xpZCByZ2IoMjA0LDIwNCwyMDQpO3BhZGRpbmctbGVmdDoxZXgiPjxkaXYgZGlyPSJsdHIi
PjxkaXYgY2xhc3M9ImdtYWlsX3F1b3RlIj48ZGl2IHN0eWxlPSJmb250LXNpemU6c21hbGwiIGNs
YXNzPSJnbWFpbF9kZWZhdWx0Ij5DYW4gdGhlIGZvcm0gcHJvamVjdG9yIGRvIGFyYml0cmFyeSBy
b3RhdGlvbj88L2Rpdj48L2Rpdj48L2Rpdj48L2Jsb2NrcXVvdGU+PC9kaXY+PGRpdiBkaXI9ImF1
dG8iPlllcy7CoCBTbyBsb25nIGFzIHlvdSB3aW5kIHRoZSBvdXRwdXQgcG9pbnRzIHN0cmljdGx5
IGNsb2Nrd2lzZSB5b3UmIzM5O2xsIGdldCBhIHJvdGF0aW9uLsKgIChJZiB5b3Ugd2luZCB0aGUg
b3V0cHV0IHBvaW50cyBzdHJpY3RseSBjb3VudGVyY2xvY2t3aXNlIGl0IGZsaXBzIHRoZSBpbWFn
ZSwgYnV0IHN0aWxsIHJvdGF0ZXMgaXQuKTwvZGl2PjxkaXYgZGlyPSJhdXRvIj48YnI+PC9kaXY+
PGRpdiBkaXI9ImF1dG8iPkl0IGJhc2ljYWxseSB3b3JrcyB0aGUgc2FtZSB3YXkgT3BlbkdMIHRl
eHR1cmVzIHF1YWRzIGJ1dCB3aXRob3V0IHRoZSBwYXJhbGxlbCBkcmF3IG9wZXJhdGlvbnMgKGhl
bmNlIHRoZSA8aT5zbG93bmVzczwvaT4pLjwvZGl2PjxkaXYgY2xhc3M9ImdtYWlsX3F1b3RlIiBk
aXI9ImF1dG8iPjwvZGl2PjwvZGl2Pgo=

--===============5550897442782832693==--


From asqueaker@gmail.com Wed Oct 16 05:51:26 2024
From: Chris Muller <asqueaker@gmail.com>
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] Re: The Trunk: Files-eem.212.mcz
Date: Wed, 16 Oct 2024 00:50:39 -0500
Message-ID:
 <CANzdToHki89gUfLPtkqEQegvk1w1hd6VcYA6iePnmrZiXd6COA@mail.gmail.com>
In-Reply-To: <20241015201308.E931B5826BF@mail.squeak.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============0432414454244370346=="

--===============0432414454244370346==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

Hi Eliot!

I'm deep in a project involving the filesystem at the moment.  This seems
like something good, but I'm not sure what exactly it is.  If I update the
#workingDirectory:, how does that affect other Smalltalk code in the
image?  Does it change the value of FileDirectory default?

FileDirectory default is actually just a class var set during startup.  So
is this for changing the PWD environment var of the running Squeak
process?  This seems like it might be powerful in some way.  I'm curious
why I might want to do it.

Thanks!


On Tue, Oct 15, 2024 at 3:13â€¯PM <commits(a)source.squeak.org> wrote:

> Eliot Miranda uploaded a new version of Files to project The Trunk:
> http://source.squeak.org/trunk/Files-eem.212.mcz
>
> ==================== Summary ====================
>
> Name: Files-eem.212
> Author: eem
> Time: 15 October 2024, 1:13:03.538128 pm
> UUID: 08e9fc22-31a4-4c08-bc06-18aededaae10
> Ancestors: Files-cmm.211
>
> Add the methods that interface to the FilePlugin's new get/set
> working/current directory primitives available in the latest VMs.
>
> =============== Diff against Files-cmm.211 ===============
>
> Item was added:
> + ----- Method: FileDirectory class>>primWorkingDirectory (in category
> 'private') -----
> + primWorkingDirectory
> +       "Answer the utf8 encoded name of the VM process's working/current
> directory."
> +
> +       <primitive: 'primitiveGetWorkingDirectory' module: 'FilePlugin'
> error: ec>
> +       self primitiveFailed
> +
> +       "self primWorkingDirectory"!
>
> Item was added:
> + ----- Method: FileDirectory class>>primWorkingDirectory: (in category
> 'private') -----
> + primWorkingDirectory: utf8Path
> +       "Set the VM process's working/current directory to be the
> argument, a utf8 string."
> +
> +       <primitive: 'primitiveSetWorkingDirectory' module: 'FilePlugin'
> error: ec>
> +       self primitiveFailed
> +
> +       "self primWorkingDirectory: (UIManager default request: 'to which
> directory?')"!
>
> Item was added:
> + ----- Method: FileDirectory class>>workingDirectory (in category 'name
> utilities') -----
> + workingDirectory
> +       "Answer the name of the VM process's working/current directory."
> +       ^self primWorkingDirectory utf8ToSqueak
> +
> +       "self workingDirectory"!
>
> Item was added:
> + ----- Method: FileDirectory class>>workingDirectory: (in category 'name
> utilities') -----
> + workingDirectory: pathName
> +       "Set the VM process's working working/current to be the argument."
> +       self primWorkingDirectory: pathName squeakToUtf8
> +
> +       "(UIManager default
> +               request: 'to which directory?'
> +               initialAnswer: self workingDirectory) ifNotEmpty: [:path|
> self workingDirectory: path]"!
>
> Squeak-dev mailing list -- squeak-dev(a)lists.squeakfoundation.org
> To unsubscribe send an email to
> squeak-dev-leave(a)lists.squeakfoundation.org
>



--===============0432414454244370346==
Content-Type: text/html
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="attachment.html"
MIME-Version: 1.0

PGRpdiBkaXI9Imx0ciI+SGkgRWxpb3QhPGRpdj48YnI+PC9kaXY+PGRpdj5JJiMzOTttIGRlZXAg
aW4gYSBwcm9qZWN0IGludm9sdmluZyB0aGUgZmlsZXN5c3RlbSBhdCB0aGUgbW9tZW50LsKgIFRo
aXMgc2VlbXMgbGlrZSBzb21ldGhpbmcgZ29vZCzCoGJ1dCBJJiMzOTttIG5vdCBzdXJlIHdoYXQg
ZXhhY3RseSBpdCBpcy7CoCBJZiBJIHVwZGF0ZSB0aGUgI3dvcmtpbmdEaXJlY3Rvcnk6LCBob3cg
ZG9lcyB0aGF0IGFmZmVjdCBvdGhlciBTbWFsbHRhbGsgY29kZSBpbiB0aGUgaW1hZ2U/wqAgRG9l
cyBpdCBjaGFuZ2UgdGhlIHZhbHVlIG9mIEZpbGVEaXJlY3RvcnkgZGVmYXVsdD88L2Rpdj48ZGl2
Pjxicj48L2Rpdj48ZGl2PkZpbGVEaXJlY3RvcnkgZGVmYXVsdCBpcyBhY3R1YWxseSBqdXN0IGEg
Y2xhc3MgdmFyIHNldCBkdXJpbmcgc3RhcnR1cC7CoCBTbyBpcyB0aGlzIGZvciBjaGFuZ2luZ8Kg
dGhlIFBXRCBlbnZpcm9ubWVudCB2YXIgb2YgdGhlIHJ1bm5pbmcgU3F1ZWFrIHByb2Nlc3M/wqAg
VGhpcyBzZWVtcyBsaWtlIGl0IG1pZ2h0IGJlIHBvd2VyZnVsIGluIHNvbWUgd2F5LsKgIEkmIzM5
O20gY3VyaW91cyB3aHkgSSBtaWdodCB3YW50IHRvIGRvIGl0LjwvZGl2PjxkaXY+PGJyPjwvZGl2
PjxkaXY+VGhhbmtzITwvZGl2PjxkaXY+PGJyPjwvZGl2PjwvZGl2Pjxicj48ZGl2IGNsYXNzPSJn
bWFpbF9xdW90ZSI+PGRpdiBkaXI9Imx0ciIgY2xhc3M9ImdtYWlsX2F0dHIiPk9uIFR1ZSwgT2N0
IDE1LCAyMDI0IGF0IDM6MTPigK9QTSAmbHQ7PGEgaHJlZj0ibWFpbHRvOmNvbW1pdHNAc291cmNl
LnNxdWVhay5vcmciIHRhcmdldD0iX2JsYW5rIj5jb21taXRzQHNvdXJjZS5zcXVlYWsub3JnPC9h
PiZndDsgd3JvdGU6PGJyPjwvZGl2PjxibG9ja3F1b3RlIGNsYXNzPSJnbWFpbF9xdW90ZSIgc3R5
bGU9Im1hcmdpbjowcHggMHB4IDBweCAwLjhleDtib3JkZXItbGVmdDoxcHggc29saWQgcmdiKDIw
NCwyMDQsMjA0KTtwYWRkaW5nLWxlZnQ6MWV4Ij5FbGlvdCBNaXJhbmRhIHVwbG9hZGVkIGEgbmV3
IHZlcnNpb24gb2YgRmlsZXMgdG8gcHJvamVjdCBUaGUgVHJ1bms6PGJyPgo8YSBocmVmPSJodHRw
Oi8vc291cmNlLnNxdWVhay5vcmcvdHJ1bmsvRmlsZXMtZWVtLjIxMi5tY3oiIHJlbD0ibm9yZWZl
cnJlciIgdGFyZ2V0PSJfYmxhbmsiPmh0dHA6Ly9zb3VyY2Uuc3F1ZWFrLm9yZy90cnVuay9GaWxl
cy1lZW0uMjEyLm1jejwvYT48YnI+Cjxicj4KPT09PT09PT09PT09PT09PT09PT0gU3VtbWFyeSA9
PT09PT09PT09PT09PT09PT09PTxicj4KPGJyPgpOYW1lOiBGaWxlcy1lZW0uMjEyPGJyPgpBdXRo
b3I6IGVlbTxicj4KVGltZTogMTUgT2N0b2JlciAyMDI0LCAxOjEzOjAzLjUzODEyOCBwbTxicj4K
VVVJRDogMDhlOWZjMjItMzFhNC00YzA4LWJjMDYtMThhZWRlZGFhZTEwPGJyPgpBbmNlc3RvcnM6
IEZpbGVzLWNtbS4yMTE8YnI+Cjxicj4KQWRkIHRoZSBtZXRob2RzIHRoYXQgaW50ZXJmYWNlIHRv
IHRoZSBGaWxlUGx1Z2luJiMzOTtzIG5ldyBnZXQvc2V0IHdvcmtpbmcvY3VycmVudCBkaXJlY3Rv
cnkgcHJpbWl0aXZlcyBhdmFpbGFibGUgaW4gdGhlIGxhdGVzdCBWTXMuPGJyPgo8YnI+Cj09PT09
PT09PT09PT09PSBEaWZmIGFnYWluc3QgRmlsZXMtY21tLjIxMSA9PT09PT09PT09PT09PT08YnI+
Cjxicj4KSXRlbSB3YXMgYWRkZWQ6PGJyPgorIC0tLS0tIE1ldGhvZDogRmlsZURpcmVjdG9yeSBj
bGFzcyZndDsmZ3Q7cHJpbVdvcmtpbmdEaXJlY3RvcnkgKGluIGNhdGVnb3J5ICYjMzk7cHJpdmF0
ZSYjMzk7KSAtLS0tLTxicj4KKyBwcmltV29ya2luZ0RpcmVjdG9yeTxicj4KK8KgIMKgIMKgIMKg
JnF1b3Q7QW5zd2VyIHRoZSB1dGY4IGVuY29kZWQgbmFtZSBvZiB0aGUgVk0gcHJvY2VzcyYjMzk7
cyB3b3JraW5nL2N1cnJlbnQgZGlyZWN0b3J5LiZxdW90Ozxicj4KKyA8YnI+CivCoCDCoCDCoCDC
oCZsdDtwcmltaXRpdmU6ICYjMzk7cHJpbWl0aXZlR2V0V29ya2luZ0RpcmVjdG9yeSYjMzk7IG1v
ZHVsZTogJiMzOTtGaWxlUGx1Z2luJiMzOTsgZXJyb3I6IGVjJmd0Ozxicj4KK8KgIMKgIMKgIMKg
c2VsZiBwcmltaXRpdmVGYWlsZWQ8YnI+CisgPGJyPgorwqAgwqAgwqAgwqAmcXVvdDtzZWxmIHBy
aW1Xb3JraW5nRGlyZWN0b3J5JnF1b3Q7ITxicj4KPGJyPgpJdGVtIHdhcyBhZGRlZDo8YnI+Cisg
LS0tLS0gTWV0aG9kOiBGaWxlRGlyZWN0b3J5IGNsYXNzJmd0OyZndDtwcmltV29ya2luZ0RpcmVj
dG9yeTogKGluIGNhdGVnb3J5ICYjMzk7cHJpdmF0ZSYjMzk7KSAtLS0tLTxicj4KKyBwcmltV29y
a2luZ0RpcmVjdG9yeTogdXRmOFBhdGg8YnI+CivCoCDCoCDCoCDCoCZxdW90O1NldCB0aGUgVk0g
cHJvY2VzcyYjMzk7cyB3b3JraW5nL2N1cnJlbnQgZGlyZWN0b3J5IHRvIGJlIHRoZSBhcmd1bWVu
dCwgYSB1dGY4IHN0cmluZy4mcXVvdDs8YnI+CisgPGJyPgorwqAgwqAgwqAgwqAmbHQ7cHJpbWl0
aXZlOiAmIzM5O3ByaW1pdGl2ZVNldFdvcmtpbmdEaXJlY3RvcnkmIzM5OyBtb2R1bGU6ICYjMzk7
RmlsZVBsdWdpbiYjMzk7IGVycm9yOiBlYyZndDs8YnI+CivCoCDCoCDCoCDCoHNlbGYgcHJpbWl0
aXZlRmFpbGVkPGJyPgorIDxicj4KK8KgIMKgIMKgIMKgJnF1b3Q7c2VsZiBwcmltV29ya2luZ0Rp
cmVjdG9yeTogKFVJTWFuYWdlciBkZWZhdWx0IHJlcXVlc3Q6ICYjMzk7dG8gd2hpY2ggZGlyZWN0
b3J5PyYjMzk7KSZxdW90OyE8YnI+Cjxicj4KSXRlbSB3YXMgYWRkZWQ6PGJyPgorIC0tLS0tIE1l
dGhvZDogRmlsZURpcmVjdG9yeSBjbGFzcyZndDsmZ3Q7d29ya2luZ0RpcmVjdG9yeSAoaW4gY2F0
ZWdvcnkgJiMzOTtuYW1lIHV0aWxpdGllcyYjMzk7KSAtLS0tLTxicj4KKyB3b3JraW5nRGlyZWN0
b3J5PGJyPgorwqAgwqAgwqAgwqAmcXVvdDtBbnN3ZXIgdGhlIG5hbWUgb2YgdGhlIFZNIHByb2Nl
c3MmIzM5O3Mgd29ya2luZy9jdXJyZW50IGRpcmVjdG9yeS4mcXVvdDs8YnI+CivCoCDCoCDCoCDC
oF5zZWxmIHByaW1Xb3JraW5nRGlyZWN0b3J5IHV0ZjhUb1NxdWVhazxicj4KKyA8YnI+CivCoCDC
oCDCoCDCoCZxdW90O3NlbGYgd29ya2luZ0RpcmVjdG9yeSZxdW90OyE8YnI+Cjxicj4KSXRlbSB3
YXMgYWRkZWQ6PGJyPgorIC0tLS0tIE1ldGhvZDogRmlsZURpcmVjdG9yeSBjbGFzcyZndDsmZ3Q7
d29ya2luZ0RpcmVjdG9yeTogKGluIGNhdGVnb3J5ICYjMzk7bmFtZSB1dGlsaXRpZXMmIzM5Oykg
LS0tLS08YnI+Cisgd29ya2luZ0RpcmVjdG9yeTogcGF0aE5hbWU8YnI+CivCoCDCoCDCoCDCoCZx
dW90O1NldCB0aGUgVk0gcHJvY2VzcyYjMzk7cyB3b3JraW5nIHdvcmtpbmcvY3VycmVudCB0byBi
ZSB0aGUgYXJndW1lbnQuJnF1b3Q7PGJyPgorwqAgwqAgwqAgwqBzZWxmIHByaW1Xb3JraW5nRGly
ZWN0b3J5OiBwYXRoTmFtZSBzcXVlYWtUb1V0Zjg8YnI+CisgPGJyPgorwqAgwqAgwqAgwqAmcXVv
dDsoVUlNYW5hZ2VyIGRlZmF1bHQ8YnI+CivCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoHJlcXVlc3Q6
ICYjMzk7dG8gd2hpY2ggZGlyZWN0b3J5PyYjMzk7PGJyPgorwqAgwqAgwqAgwqAgwqAgwqAgwqAg
wqBpbml0aWFsQW5zd2VyOiBzZWxmIHdvcmtpbmdEaXJlY3RvcnkpIGlmTm90RW1wdHk6IFs6cGF0
aHwgc2VsZiB3b3JraW5nRGlyZWN0b3J5OiBwYXRoXSZxdW90OyE8YnI+Cjxicj4KU3F1ZWFrLWRl
diBtYWlsaW5nIGxpc3QgLS0gPGEgaHJlZj0ibWFpbHRvOnNxdWVhay1kZXZAbGlzdHMuc3F1ZWFr
Zm91bmRhdGlvbi5vcmciIHRhcmdldD0iX2JsYW5rIj5zcXVlYWstZGV2QGxpc3RzLnNxdWVha2Zv
dW5kYXRpb24ub3JnPC9hPjxicj4KVG8gdW5zdWJzY3JpYmUgc2VuZCBhbiBlbWFpbCB0byA8YSBo
cmVmPSJtYWlsdG86c3F1ZWFrLWRldi1sZWF2ZUBsaXN0cy5zcXVlYWtmb3VuZGF0aW9uLm9yZyIg
dGFyZ2V0PSJfYmxhbmsiPnNxdWVhay1kZXYtbGVhdmVAbGlzdHMuc3F1ZWFrZm91bmRhdGlvbi5v
cmc8L2E+PGJyPgo8L2Jsb2NrcXVvdGU+PC9kaXY+Cg==

--===============0432414454244370346==--


From JuanVuletich@zoho.com Wed Oct 16 13:06:52 2024
From: Juan Vuletich <JuanVuletich@zoho.com>
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] Re: Deleting the initial SetCurrentDirectory invocation
 on Windows on start-up
Date: Wed, 16 Oct 2024 09:06:36 -0400
Message-ID: <670FBA5C.9020302@zoho.com>
In-Reply-To:
 <CAC20JE1BcmcxmMm5GJtwhBNEGS-Xn-MG-X+-FK2Zeo638Ox07A@mail.gmail.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============3894848864486196464=="

--===============3894848864486196464==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

Sounds Great!

Thanks,

On 10/14/2024 8:39 PM, Eliot Miranda wrote:
> Hi All,
>
>     I am proposing to delete the initial setting of the VM's working=20
> directory on WIndows.  Only on WIndows on start-up the VM sets the VM=20
> process's working directory to that containing the image file. None of=20
> the other platforms do this anymore, although it did happen on Mac=20
> at one point.  Most applications don't care if this is done; they use=20
> facilities such as FileDirectory, and the "FileDirectory default"=20
> directory is set by accessing a primitive that answers the image path.=20
> Some applications care very much, and they c are that the directory is=20
> *not* changed on startup. It is to stop inconveniencing such=20
> applications that I am proposing the change.
>
> AFAICT the image is unaffected by running in a different directory,=20
> but I wanted to check with Windows users to see if there are=20
> strong contrary opinions.  P{l4ase let me know ASAP.
>
> I am currently making the following changes:
>
> - The initial Windows SetCurrentDirectory invocation done in sqMain=20
> will be ifdeffed out (it is already excluded in Newspeak VM builds),=20
> so people insisting on this can build their own VM and define=20
> something on the command line to include the code
>
> - the FIlePlugin is being extended with two new primitives,=20
> primitiveGetWorkingDirectory and primitiveSetWorkingDirectory, which=20
> answer the working directory as a UTF8 string, and set it from a UTF8=20
> string, respectively.
>
> Let me know very soon iof and how you'll be affected by this if it=20
> will affect you negatively.
> _,,,^..^,,,_
> best, Eliot
>
>
> Squeak-dev mailing list -- squeak-dev(a)lists.squeakfoundation.org
> To unsubscribe send an email to squeak-dev-leave(a)lists.squeakfoundation.o=
rg


--=20
Juan Vuletich
www.cuis-smalltalk.org
https://github.com/Cuis-Smalltalk/Cuis-Smalltalk-Dev
https://github.com/jvuletich
https://www.linkedin.com/in/juan-vuletich-75611b3
https://independent.academia.edu/JuanVuletich
https://www.researchgate.net/profile/Juan-Vuletich
https://patents.justia.com/inventor/juan-manuel-vuletich
https://twitter.com/JuanVuletich




--===============3894848864486196464==
Content-Type: text/html
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="attachment.html"
MIME-Version: 1.0

PCFET0NUWVBFIEhUTUwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFs
Ly9FTiI+CjxodG1sPgogIDxoZWFkPgogICAgPG1ldGEgY29udGVudD0idGV4dC9odG1sOyBjaGFy
c2V0PVVURi04IiBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiPgogIDwvaGVhZD4KICA8Ym9keSBi
Z2NvbG9yPSIjZmZmZmZmIiB0ZXh0PSIjMDAwMDAwIj4KICAgIFNvdW5kcyBHcmVhdCE8YnI+CiAg
ICA8YnI+CiAgICBUaGFua3MsPGJyPgogICAgPGJyPgogICAgT24gMTAvMTQvMjAyNCA4OjM5IFBN
LCBFbGlvdCBNaXJhbmRhIHdyb3RlOgogICAgPGJsb2NrcXVvdGUKY2l0ZT0ibWlkOkNBQzIwSkUx
QmNtY3htTW01R0p0d2hCTkVHUy1Ybi1NRy1YKy1GSzJaZW82MzhPeDA3QUBtYWlsLmdtYWlsLmNv
bSIKICAgICAgdHlwZT0iY2l0ZSI+CiAgICAgIDxkaXYgZGlyPSJsdHIiPgogICAgICAgIDxkaXYg
ZGlyPSJsdHIiPgogICAgICAgICAgPGRpdiBjbGFzcz0iZ21haWxfZGVmYXVsdCIgc3R5bGU9ImZv
bnQtc2l6ZTogc21hbGw7Ij5IaSBBbGwsPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJnbWFp
bF9kZWZhdWx0IiBzdHlsZT0iZm9udC1zaXplOiBzbWFsbDsiPjxicj4KICAgICAgICAgIDwvZGl2
PgogICAgICAgICAgPGRpdiBjbGFzcz0iZ21haWxfZGVmYXVsdCIgc3R5bGU9ImZvbnQtc2l6ZTog
c21hbGw7Ij7CoCDCoCBJIGFtCiAgICAgICAgICAgIHByb3Bvc2luZyB0byBkZWxldGUgdGhlIGlu
aXRpYWwgc2V0dGluZyBvZiB0aGUgVk0ncyB3b3JraW5nCiAgICAgICAgICAgIGRpcmVjdG9yeSBv
biBXSW5kb3dzLsKgIE9ubHkgb24gV0luZG93cyBvbiBzdGFydC11cCB0aGUgVk0KICAgICAgICAg
ICAgc2V0cyB0aGUgVk0gcHJvY2VzcydzIHdvcmtpbmcgZGlyZWN0b3J5IHRvIHRoYXTCoGNvbnRh
aW5pbmcKICAgICAgICAgICAgdGhlIGltYWdlIGZpbGUuIE5vbmUgb2YgdGhlIG90aGVyIHBsYXRm
b3Jtc8KgZG8gdGhpcyBhbnltb3JlLAogICAgICAgICAgICBhbHRob3VnaCBpdCBkaWQgaGFwcGVu
IG9uwqBNYWMgYXTCoG9uZSBwb2ludC7CoCBNb3N0CiAgICAgICAgICAgIGFwcGxpY2F0aW9ucyBk
b24ndCBjYXJlIGlmIHRoaXMgaXMgZG9uZTsgdGhleSB1c2UgZmFjaWxpdGllcwogICAgICAgICAg
ICBzdWNoIGFzIEZpbGVEaXJlY3RvcnksIGFuZCB0aGUgIkZpbGVEaXJlY3RvcnkgZGVmYXVsdCIK
ICAgICAgICAgICAgZGlyZWN0b3J5IGlzIHNldCBieSBhY2Nlc3NpbmcgYSBwcmltaXRpdmUgdGhh
dCBhbnN3ZXJzIHRoZQogICAgICAgICAgICBpbWFnZSBwYXRoLiBTb21lIGFwcGxpY2F0aW9ucyBj
YXJlIHZlcnkgbXVjaCwgYW5kIHRoZXkgYwogICAgICAgICAgICBhcmXCoHRoYXQgdGhlIGRpcmVj
dG9yeSBpcyAqbm90KiBjaGFuZ2VkIG9uIHN0YXJ0dXAuIEl0IGlzIHRvCiAgICAgICAgICAgIHN0
b3AgaW5jb252ZW5pZW5jaW5nIHN1Y2ggYXBwbGljYXRpb25zIHRoYXQgSSBhbSBwcm9wb3NpbmcK
ICAgICAgICAgICAgdGhlIGNoYW5nZS48L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImdtYWls
X2RlZmF1bHQiIHN0eWxlPSJmb250LXNpemU6IHNtYWxsOyI+PGJyPgogICAgICAgICAgPC9kaXY+
CiAgICAgICAgICA8ZGl2IGNsYXNzPSJnbWFpbF9kZWZhdWx0IiBzdHlsZT0iZm9udC1zaXplOiBz
bWFsbDsiPkFGQUlDVAogICAgICAgICAgICB0aGUgaW1hZ2UgaXMgdW5hZmZlY3RlZCBieSBydW5u
aW5nIGluIGEgZGlmZmVyZW50IGRpcmVjdG9yeSwKICAgICAgICAgICAgYnV0IEkgd2FudGVkIHRv
IGNoZWNrIHdpdGggV2luZG93cyB1c2VycyB0byBzZWUgaWYgdGhlcmUgYXJlCiAgICAgICAgICAg
IHN0cm9uZ8KgY29udHJhcnkgb3BpbmlvbnMuwqAgUHtsNGFzZSBsZXQgbWUga25vdyBBU0FQLjwv
ZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iZ21haWxfZGVmYXVsdCIgc3R5bGU9ImZvbnQtc2l6
ZTogc21hbGw7Ij48YnI+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9Imdt
YWlsX2RlZmF1bHQiIHN0eWxlPSJmb250LXNpemU6IHNtYWxsOyI+SSBhbQogICAgICAgICAgICBj
dXJyZW50bHkgbWFraW5nIHRoZSBmb2xsb3dpbmcgY2hhbmdlczo8L2Rpdj4KICAgICAgICAgIDxk
aXYgY2xhc3M9ImdtYWlsX2RlZmF1bHQiIHN0eWxlPSJmb250LXNpemU6IHNtYWxsOyI+PGJyPgog
ICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJnbWFpbF9kZWZhdWx0IiBzdHls
ZT0iZm9udC1zaXplOiBzbWFsbDsiPi0gVGhlCiAgICAgICAgICAgIGluaXRpYWwgV2luZG93c8Kg
U2V0Q3VycmVudERpcmVjdG9yeSBpbnZvY2F0aW9uIGRvbmUgaW4KICAgICAgICAgICAgc3FNYWlu
IHdpbGwgYmUgaWZkZWZmZWQgb3V0IChpdCBpcyBhbHJlYWR5IGV4Y2x1ZGVkIGluCiAgICAgICAg
ICAgIE5ld3NwZWFrIFZNIGJ1aWxkcyksIHNvIHBlb3BsZSBpbnNpc3Rpbmcgb24gdGhpcyBjYW4g
YnVpbGQKICAgICAgICAgICAgdGhlaXIgb3duIFZNIGFuZCBkZWZpbmUgc29tZXRoaW5nIG9uIHRo
ZSBjb21tYW5kIGxpbmUgdG8KICAgICAgICAgICAgaW5jbHVkZSB0aGUgY29kZTwvZGl2PgogICAg
ICAgICAgPGRpdiBjbGFzcz0iZ21haWxfZGVmYXVsdCIgc3R5bGU9ImZvbnQtc2l6ZTogc21hbGw7
Ij48YnI+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImdtYWlsX2RlZmF1
bHQiIHN0eWxlPSJmb250LXNpemU6IHNtYWxsOyI+LSB0aGUKICAgICAgICAgICAgRklsZVBsdWdp
biBpcyBiZWluZyBleHRlbmRlZCB3aXRowqB0d28gbmV3IHByaW1pdGl2ZXMsCiAgICAgICAgICAg
IHByaW1pdGl2ZUdldFdvcmtpbmdEaXJlY3RvcnkgYW5kCiAgICAgICAgICAgIHByaW1pdGl2ZVNl
dFdvcmtpbmdEaXJlY3RvcnksIHdoaWNoIGFuc3dlciB0aGUgd29ya2luZwogICAgICAgICAgICBk
aXJlY3RvcnkgYXMgYSBVVEY4IHN0cmluZywgYW5kIHNldCBpdCBmcm9tIGEgVVRGOCBzdHJpbmcs
CiAgICAgICAgICAgIHJlc3BlY3RpdmVseS48L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9Imdt
YWlsX2RlZmF1bHQiIHN0eWxlPSJmb250LXNpemU6IHNtYWxsOyI+PGJyPgogICAgICAgICAgPC9k
aXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJnbWFpbF9kZWZhdWx0IiBzdHlsZT0iZm9udC1zaXpl
OiBzbWFsbDsiPkxldCBtZQogICAgICAgICAgICBrbm93IHZlcnkgc29vbiBpb2YgYW5kIGhvdyB5
b3UnbGwgYmUgYWZmZWN0ZWQgYnkgdGhpcyBpZiBpdAogICAgICAgICAgICB3aWxsIGFmZmVjdCB5
b3UgbmVnYXRpdmVseS48L2Rpdj4KICAgICAgICAgIDxkaXYgZGlyPSJsdHIiIGNsYXNzPSJnbWFp
bF9zaWduYXR1cmUiCiAgICAgICAgICAgIGRhdGEtc21hcnRtYWlsPSJnbWFpbF9zaWduYXR1cmUi
PgogICAgICAgICAgICA8ZGl2IGRpcj0ibHRyIj4KICAgICAgICAgICAgICA8ZGl2PjxzcGFuIHN0
eWxlPSJmb250LXNpemU6IHNtYWxsOyBib3JkZXItY29sbGFwc2U6CiAgICAgICAgICAgICAgICAg
IHNlcGFyYXRlOyI+CiAgICAgICAgICAgICAgICAgIDxkaXY+XywsLF4uLl4sLCxfPGJyPgogICAg
ICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdj5iZXN0LMKgRWxpb3Q8
L2Rpdj4KICAgICAgICAgICAgICAgIDwvc3Bhbj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAg
ICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDxwcmUgd3Jh
cD0iIj4KPGZpZWxkc2V0IGNsYXNzPSJtaW1lQXR0YWNobWVudEhlYWRlciI+PC9maWVsZHNldD4K
U3F1ZWFrLWRldiBtYWlsaW5nIGxpc3QgLS0gPGEgY2xhc3M9Im1vei10eHQtbGluay1hYmJyZXZp
YXRlZCIgaHJlZj0ibWFpbHRvOnNxdWVhay1kZXZAbGlzdHMuc3F1ZWFrZm91bmRhdGlvbi5vcmci
PnNxdWVhay1kZXZAbGlzdHMuc3F1ZWFrZm91bmRhdGlvbi5vcmc8L2E+ClRvIHVuc3Vic2NyaWJl
IHNlbmQgYW4gZW1haWwgdG8gPGEgY2xhc3M9Im1vei10eHQtbGluay1hYmJyZXZpYXRlZCIgaHJl
Zj0ibWFpbHRvOnNxdWVhay1kZXYtbGVhdmVAbGlzdHMuc3F1ZWFrZm91bmRhdGlvbi5vcmciPnNx
dWVhay1kZXYtbGVhdmVAbGlzdHMuc3F1ZWFrZm91bmRhdGlvbi5vcmc8L2E+PC9wcmU+CiAgICA8
L2Jsb2NrcXVvdGU+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8cHJlIGNsYXNzPSJtb3otc2lnbmF0
dXJlIiBjb2xzPSI3MiI+LS0gCkp1YW4gVnVsZXRpY2gKPGEgY2xhc3M9Im1vei10eHQtbGluay1h
YmJyZXZpYXRlZCIgaHJlZj0iaHR0cDovL3d3dy5jdWlzLXNtYWxsdGFsay5vcmciPnd3dy5jdWlz
LXNtYWxsdGFsay5vcmc8L2E+CjxhIGNsYXNzPSJtb3otdHh0LWxpbmstZnJlZXRleHQiIGhyZWY9
Imh0dHBzOi8vZ2l0aHViLmNvbS9DdWlzLVNtYWxsdGFsay9DdWlzLVNtYWxsdGFsay1EZXYiPmh0
dHBzOi8vZ2l0aHViLmNvbS9DdWlzLVNtYWxsdGFsay9DdWlzLVNtYWxsdGFsay1EZXY8L2E+Cjxh
IGNsYXNzPSJtb3otdHh0LWxpbmstZnJlZXRleHQiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9q
dnVsZXRpY2giPmh0dHBzOi8vZ2l0aHViLmNvbS9qdnVsZXRpY2g8L2E+CjxhIGNsYXNzPSJtb3ot
dHh0LWxpbmstZnJlZXRleHQiIGhyZWY9Imh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9pbi9qdWFu
LXZ1bGV0aWNoLTc1NjExYjMiPmh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9pbi9qdWFuLXZ1bGV0
aWNoLTc1NjExYjM8L2E+CjxhIGNsYXNzPSJtb3otdHh0LWxpbmstZnJlZXRleHQiIGhyZWY9Imh0
dHBzOi8vaW5kZXBlbmRlbnQuYWNhZGVtaWEuZWR1L0p1YW5WdWxldGljaCI+aHR0cHM6Ly9pbmRl
cGVuZGVudC5hY2FkZW1pYS5lZHUvSnVhblZ1bGV0aWNoPC9hPgo8YSBjbGFzcz0ibW96LXR4dC1s
aW5rLWZyZWV0ZXh0IiBocmVmPSJodHRwczovL3d3dy5yZXNlYXJjaGdhdGUubmV0L3Byb2ZpbGUv
SnVhbi1WdWxldGljaCI+aHR0cHM6Ly93d3cucmVzZWFyY2hnYXRlLm5ldC9wcm9maWxlL0p1YW4t
VnVsZXRpY2g8L2E+CjxhIGNsYXNzPSJtb3otdHh0LWxpbmstZnJlZXRleHQiIGhyZWY9Imh0dHBz
Oi8vcGF0ZW50cy5qdXN0aWEuY29tL2ludmVudG9yL2p1YW4tbWFudWVsLXZ1bGV0aWNoIj5odHRw
czovL3BhdGVudHMuanVzdGlhLmNvbS9pbnZlbnRvci9qdWFuLW1hbnVlbC12dWxldGljaDwvYT4K
PGEgY2xhc3M9Im1vei10eHQtbGluay1mcmVldGV4dCIgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNv
bS9KdWFuVnVsZXRpY2giPmh0dHBzOi8vdHdpdHRlci5jb20vSnVhblZ1bGV0aWNoPC9hPjwvcHJl
PgogIDwvYm9keT4KPC9odG1sPgo=

--===============3894848864486196464==--


From tim@rowledge.org Thu Oct 17 19:19:48 2024
From: Tim Rowledge <tim@rowledge.org>
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] SqueakMap SHA1 checksum values; again
Date: Thu, 17 Oct 2024 12:19:40 -0700
Message-ID: <A399591B-64AB-43AC-9298-D94DFE4C16D4@rowledge.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============7196886001725169648=="

--===============7196886001725169648==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

Some time ago (actually Oct/Nov '23, subject line "SqueakMap, checksums, and =
which version is in use") we had a long thread about problems I was having wi=
th the way SqueakMap calculated - and the loader used - SHA1 checksums for th=
e install script files. Right now I'm trying to (re)build a personal squeakso=
urce server image for some project use (long story involving a system that wo=
rked ok and got messed up by strange friend-of-friend-of-friend argument and =
a killed server) and the SHA1 problem is one of the issues getting in the way.

Basically, when loading packages from SqueakMap (which as we discovered is an=
 ancient 3.8 era image) the SHA1 checksum of the load script is checked in SM=
PackageRelease>>#correctSha1sum: The stored sha1sum ivar is derived from the =
SM catalogue file that is downloaded as part of opening an SM window. In some=
 circumstances it is nil and the comparison is ignored; no idea what the orig=
inal rationale was. If there is a sha1sum then the downloaded install script =
is processed to work out its checksum and they are compared.=20

My problem (again!) is that the checksum derived from the catalog file does n=
ot agree at all with the one created by SecureHashAlgorithm new hashMessage: =
{the file contents}. I've even double checked with A.N.Other source of SHA1 c=
hecksums (https://emn178.github.io/online-tools/sha1_checksum.html) and we ge=
t an answer that agrees. Which means that the value in the catalog file must =
be incorrect for some reason.

If anyone wants to check my logic, the file download URL is http://map.squeak=
.org/accountbyid/c3993561-22fb-421f-b0be-c46b5487e105/files/install-Personal =
SqueakSource-5.3.4.st (and you can paste that into the above webpage tool) an=
d the sha1sum  ivar is 16rB1CC55862EAC2C10F6DFCA77D0465B26A2750F84

The value I get on x64 linux, x64 iMac & ARM64 linux is 16r805207474CEC717165=
D074D7BFFF2F7767E7730C, matching the web page tool. I tried on a 32bit Pi sys=
tem as well just in case and get the same numbers. I even found a Pi to load =
RISC OS on so I could test a 4.3 32bit image - same answers.

There's two interesting questions following on from this (at least)
a) where does the value being downloaded in the squeakmap update come from?
b) why was ChrisM able to install the package without any problems?

tim
--
tim Rowledge; tim(a)rowledge.org; http://www.rowledge.org/tim
Original Sin is hard to find, but the digitally enhanced version is readily a=
vailable.



--===============7196886001725169648==--


From tim@rowledge.org Thu Oct 17 22:36:34 2024
From: Tim Rowledge <tim@rowledge.org>
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] Re: SqueakMap SHA1 checksum values; again
Date: Thu, 17 Oct 2024 15:36:24 -0700
Message-ID: <6AAD5189-CA97-4D94-B35B-3ED458D6C2E2@rowledge.org>
In-Reply-To: <A399591B-64AB-43AC-9298-D94DFE4C16D4@rowledge.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============3153433971550673895=="

--===============3153433971550673895==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

I have just used squeakJS to run an ancient 3.8 image (good grief!) and demon=
strated that the checksum generated for the install script file matches the 5=
.3 & 6.1 image values.

Because of some apparent character translation going on between copying from =
Squeak on my machine to pasting it into the squeakJS, I had to encode the fil=
e content string as an array and reconstruct it at the other end, which all a=
dded to the fun. The raw array of bytes matches exactly, the decimal number t=
o displays as matches but the hex printing was very different; something Dave=
L alluded to last year.

Assuming (with all the concomitant dangers) that the SqueakMap server is actu=
ally a 3.8 image, I don't see any place where the packages even *have* a sha1=
sum instvar. And the only usages of the SMPackageRelease>>#sha1sum: method I =
can find right now are used to set the sha1sum value to nil!

So I guess it's on to looking into the squeakmap code to see where the value =
might get set and saved into the catalogue file.


tim
--
tim Rowledge; tim(a)rowledge.org; http://www.rowledge.org/tim
Useful random insult:- Couldn't pour water out of a boot with instructions on=
 the heel.



--===============3153433971550673895==--


From asqueaker@gmail.com Thu Oct 17 23:26:40 2024
From: Chris Muller <asqueaker@gmail.com>
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] Re: SqueakMap SHA1 checksum values; again
Date: Thu, 17 Oct 2024 18:25:54 -0500
Message-ID:
 <CANzdToGRvFxB0QKPi_GW2x1nWv0dtJt3E9E68ENuP4dLL4ax_Q@mail.gmail.com>
In-Reply-To: <6AAD5189-CA97-4D94-B35B-3ED458D6C2E2@rowledge.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============7914022840154057068=="

--===============7914022840154057068==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

Hi Tim,

On Thu, Oct 17, 2024 at 5:37â€¯PM Tim Rowledge <tim(a)rowledge.org> wrote:

> I have just used squeakJS to run an ancient 3.8 image (good grief!) and
> demonstrated that the checksum generated for the install script file
> matches the 5.3 & 6.1 image values.
>
> Because of some apparent character translation going on between copying
> from Squeak on my machine to pasting it into the squeakJS, I had to encode
> the file content string as an array and reconstruct it at the other end,
> which all added to the fun. The raw array of bytes matches exactly, the
> decimal number to displays as matches but the hex printing was very
> different; something DaveL alluded to last year.
>
> Assuming (with all the concomitant dangers) that the SqueakMap server is
> actually a 3.8 image, I don't see any place where the packages even *have*
> a sha1sum instvar. And the only usages of the SMPackageRelease>>#sha1sum:
> method I can find right now are used to set the sha1sum value to nil!
>
> So I guess it's on to looking into the squeakmap code to see where the
> value might get set and saved into the catalogue file.
>

I found my smserver image, it appears it's a 3.9.  Do you have it?

The calculation of the SHA1 for the package release is in It's in
SMAccountPackageView>>#updateServerCache:, which is called by
#editreleases.

It looks like it's correctly interpreting the file as #binary (e.g., no
line conversions which would throw off the SHA1).  Hmm.

HTH.

 - Chris


>
>
> tim
> --
> tim Rowledge; tim(a)rowledge.org; http://www.rowledge.org/tim
> Useful random insult:- Couldn't pour water out of a boot with instructions
> on the heel.
>
>
> Squeak-dev mailing list -- squeak-dev(a)lists.squeakfoundation.org
> To unsubscribe send an email to
> squeak-dev-leave(a)lists.squeakfoundation.org
>



--===============7914022840154057068==
Content-Type: text/html
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="attachment.html"
MIME-Version: 1.0

PGRpdiBkaXI9Imx0ciI+PGRpdiBkaXI9Imx0ciI+PGRpdiBkaXI9Imx0ciI+PGRpdiBkaXI9Imx0
ciI+SGkgVGltLDwvZGl2PjxkaXY+PGJyPjwvZGl2PjxkaXYgY2xhc3M9ImdtYWlsX3F1b3RlIj48
ZGl2IGRpcj0ibHRyIiBjbGFzcz0iZ21haWxfYXR0ciI+T24gVGh1LCBPY3QgMTcsIDIwMjQgYXQg
NTozN+KAr1BNIFRpbSBSb3dsZWRnZSAmbHQ7PGEgaHJlZj0ibWFpbHRvOnRpbUByb3dsZWRnZS5v
cmciIHRhcmdldD0iX2JsYW5rIj50aW1Acm93bGVkZ2Uub3JnPC9hPiZndDsgd3JvdGU6PGJyPjwv
ZGl2PjxibG9ja3F1b3RlIGNsYXNzPSJnbWFpbF9xdW90ZSIgc3R5bGU9Im1hcmdpbjowcHggMHB4
IDBweCAwLjhleDtib3JkZXItbGVmdDoxcHggc29saWQgcmdiKDIwNCwyMDQsMjA0KTtwYWRkaW5n
LWxlZnQ6MWV4Ij5JIGhhdmUganVzdCB1c2VkIHNxdWVha0pTIHRvIHJ1biBhbiBhbmNpZW50IDMu
OCBpbWFnZSAoZ29vZCBncmllZiEpIGFuZCBkZW1vbnN0cmF0ZWQgdGhhdCB0aGUgY2hlY2tzdW0g
Z2VuZXJhdGVkIGZvciB0aGUgaW5zdGFsbCBzY3JpcHQgZmlsZSBtYXRjaGVzIHRoZSA1LjMgJmFt
cDsgNi4xIGltYWdlIHZhbHVlcy48YnI+Cjxicj4KQmVjYXVzZSBvZiBzb21lIGFwcGFyZW50IGNo
YXJhY3RlciB0cmFuc2xhdGlvbiBnb2luZyBvbiBiZXR3ZWVuIGNvcHlpbmcgZnJvbSBTcXVlYWsg
b24gbXkgbWFjaGluZSB0byBwYXN0aW5nIGl0IGludG8gdGhlIHNxdWVha0pTLCBJIGhhZCB0byBl
bmNvZGUgdGhlIGZpbGUgY29udGVudCBzdHJpbmcgYXMgYW4gYXJyYXkgYW5kIHJlY29uc3RydWN0
IGl0IGF0IHRoZSBvdGhlciBlbmQsIHdoaWNoIGFsbCBhZGRlZCB0byB0aGUgZnVuLiBUaGUgcmF3
IGFycmF5IG9mIGJ5dGVzIG1hdGNoZXMgZXhhY3RseSwgdGhlIGRlY2ltYWwgbnVtYmVyIHRvIGRp
c3BsYXlzIGFzIG1hdGNoZXMgYnV0IHRoZSBoZXggcHJpbnRpbmcgd2FzIHZlcnkgZGlmZmVyZW50
OyBzb21ldGhpbmcgRGF2ZUwgYWxsdWRlZCB0byBsYXN0IHllYXIuPGJyPgo8YnI+CkFzc3VtaW5n
ICh3aXRoIGFsbCB0aGUgY29uY29taXRhbnQgZGFuZ2VycykgdGhhdCB0aGUgU3F1ZWFrTWFwIHNl
cnZlciBpcyBhY3R1YWxseSBhIDMuOCBpbWFnZSwgSSBkb24mIzM5O3Qgc2VlIGFueSBwbGFjZSB3
aGVyZSB0aGUgcGFja2FnZXMgZXZlbiAqaGF2ZSogYSBzaGExc3VtIGluc3R2YXIuIEFuZCB0aGUg
b25seSB1c2FnZXMgb2YgdGhlIFNNUGFja2FnZVJlbGVhc2UmZ3Q7Jmd0OyNzaGExc3VtOiBtZXRo
b2QgSSBjYW4gZmluZCByaWdodCBub3cgYXJlIHVzZWQgdG8gc2V0IHRoZSBzaGExc3VtIHZhbHVl
IHRvIG5pbCE8YnI+Cjxicj4KU28gSSBndWVzcyBpdCYjMzk7cyBvbiB0byBsb29raW5nIGludG8g
dGhlIHNxdWVha21hcCBjb2RlIHRvIHNlZSB3aGVyZSB0aGUgdmFsdWUgbWlnaHQgZ2V0IHNldCBh
bmQgc2F2ZWQgaW50byB0aGUgY2F0YWxvZ3VlIGZpbGUuPGJyPjwvYmxvY2txdW90ZT48ZGl2Pjxi
cj48L2Rpdj48ZGl2PkkgZm91bmQgbXkgc21zZXJ2ZXIgaW1hZ2UsIGl0IGFwcGVhcnMgaXQmIzM5
O3MgYSAzLjkuwqAgRG8geW91IGhhdmUgaXQ/PC9kaXY+PGRpdj48YnI+PC9kaXY+PGRpdj5UaGUg
Y2FsY3VsYXRpb24gb2YgdGhlIFNIQTEgZm9yIHRoZSBwYWNrYWdlIHJlbGVhc2UgaXMgaW4gSXQm
IzM5O3MgaW4gU01BY2NvdW50UGFja2FnZVZpZXcmZ3Q7Jmd0OyN1cGRhdGVTZXJ2ZXJDYWNoZTos
IHdoaWNoIGlzIGNhbGxlZCBieSAjZWRpdHJlbGVhc2VzLsKgPC9kaXY+PGRpdj48YnI+PC9kaXY+
PGRpdj5JdCBsb29rcyBsaWtlIGl0JiMzOTtzIGNvcnJlY3RseSBpbnRlcnByZXRpbmcgdGhlIGZp
bGUgYXMgI2JpbmFyeSAoZS5nLiwgbm8gbGluZSBjb252ZXJzaW9ucyB3aGljaCB3b3VsZCB0aHJv
dyBvZmYgdGhlIFNIQTEpLsKgIEhtbS48L2Rpdj48ZGl2Pjxicj48L2Rpdj48ZGl2PkhUSC48L2Rp
dj48ZGl2Pjxicj48L2Rpdj48ZGl2PsKgLSBDaHJpczwvZGl2PjxkaXY+wqA8L2Rpdj48YmxvY2tx
dW90ZSBjbGFzcz0iZ21haWxfcXVvdGUiIHN0eWxlPSJtYXJnaW46MHB4IDBweCAwcHggMC44ZXg7
Ym9yZGVyLWxlZnQ6MXB4IHNvbGlkIHJnYigyMDQsMjA0LDIwNCk7cGFkZGluZy1sZWZ0OjFleCI+
Cjxicj4KPGJyPgp0aW08YnI+Ci0tPGJyPgp0aW0gUm93bGVkZ2U7IDxhIGhyZWY9Im1haWx0bzp0
aW1Acm93bGVkZ2Uub3JnIiB0YXJnZXQ9Il9ibGFuayI+dGltQHJvd2xlZGdlLm9yZzwvYT47IDxh
IGhyZWY9Imh0dHA6Ly93d3cucm93bGVkZ2Uub3JnL3RpbSIgcmVsPSJub3JlZmVycmVyIiB0YXJn
ZXQ9Il9ibGFuayI+aHR0cDovL3d3dy5yb3dsZWRnZS5vcmcvdGltPC9hPjxicj4KVXNlZnVsIHJh
bmRvbSBpbnN1bHQ6LSBDb3VsZG4mIzM5O3QgcG91ciB3YXRlciBvdXQgb2YgYSBib290IHdpdGgg
aW5zdHJ1Y3Rpb25zIG9uIHRoZSBoZWVsLjxicj4KPGJyPgo8YnI+ClNxdWVhay1kZXYgbWFpbGlu
ZyBsaXN0IC0tIDxhIGhyZWY9Im1haWx0bzpzcXVlYWstZGV2QGxpc3RzLnNxdWVha2ZvdW5kYXRp
b24ub3JnIiB0YXJnZXQ9Il9ibGFuayI+c3F1ZWFrLWRldkBsaXN0cy5zcXVlYWtmb3VuZGF0aW9u
Lm9yZzwvYT48YnI+ClRvIHVuc3Vic2NyaWJlIHNlbmQgYW4gZW1haWwgdG8gPGEgaHJlZj0ibWFp
bHRvOnNxdWVhay1kZXYtbGVhdmVAbGlzdHMuc3F1ZWFrZm91bmRhdGlvbi5vcmciIHRhcmdldD0i
X2JsYW5rIj5zcXVlYWstZGV2LWxlYXZlQGxpc3RzLnNxdWVha2ZvdW5kYXRpb24ub3JnPC9hPjxi
cj4KPC9ibG9ja3F1b3RlPjwvZGl2PjwvZGl2PjwvZGl2Pgo8L2Rpdj4K

--===============7914022840154057068==--


From tim@rowledge.org Thu Oct 17 23:39:51 2024
From: Tim Rowledge <tim@rowledge.org>
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] Re: SqueakMap SHA1 checksum values; again
Date: Thu, 17 Oct 2024 16:39:44 -0700
Message-ID: <74D126AC-44A9-44CA-83FA-CD8E0AB083C2@rowledge.org>
In-Reply-To: <6AAD5189-CA97-4D94-B35B-3ED458D6C2E2@rowledge.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============1620021150139459364=="

--===============1620021150139459364==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable



> On 2024-10-17, at 3:36 PM, Tim Rowledge <tim(a)rowledge.org> wrote:
>=20
> So I guess it's on to looking into the squeakmap code to see where the valu=
e might get set and saved into the catalogue file.

We load a Bunch'o'stuff that becomes the squeakmap catalogue in SMSqueakMap>>=
#reload and the data is clearly showing an incompatible value of the sha1sum =
within that file. So evidently something within the server code is creating i=
t and doing sometihng different.

tim
--
tim Rowledge; tim(a)rowledge.org; http://www.rowledge.org/tim
Strange OpCodes: APX: Apply Power and eXplode



--===============1620021150139459364==--


From tim@rowledge.org Fri Oct 18 00:20:52 2024
From: Tim Rowledge <tim@rowledge.org>
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] Re: SqueakMap SHA1 checksum values; again
Date: Thu, 17 Oct 2024 17:20:43 -0700
Message-ID: <5985C785-9657-4D5D-AAC1-5AEC6BCFB9F2@rowledge.org>
In-Reply-To:
 <CANzdToGRvFxB0QKPi_GW2x1nWv0dtJt3E9E68ENuP4dLL4ax_Q@mail.gmail.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============3848148369313937287=="

--===============3848148369313937287==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable



> On 2024-10-17, at 4:25 PM, Chris Muller <asqueaker(a)gmail.com> wrote:
>=20
> I found my smserver image, it appears it's a 3.9.  Do you have it?

I don't. Is it downloadable from anywhere - or could you provide a copy?

>=20
> The calculation of the SHA1 for the package release is in It's in SMAccount=
PackageView>>#updateServerCache:, which is called by #editreleases.=20
>=20
> It looks like it's correctly interpreting the file as #binary (e.g., no lin=
e conversions which would throw off the SHA1).  Hmm.

Yeh, hmm. Looking at the code (by browsing packages from monticello as oppose=
d to live code) I'm wondering if there is any chance of the binary contents o=
f the file that gets read from the server in order to calculate the sha1sum b=
eing not identical to the actual content that gets delivered by the SM UI. I =
see that the #refreshInCache carefully nils out the sha1sum value and then se=
nds SMPackageRelease>>#calculateSha1sum to reset it. That cleans things in th=
e *cache* but where do we update the catalogue file? I *think* that would be =
SMSqueakMap>>#createCheckpointNumber:

I see that in SMAccountPackageView>>#editreleases the #updateServerCache: met=
hod is sent but I can't work out where the potentially new install script mig=
ht have been handled. That might indicate a problem.

tim
--
tim Rowledge; tim(a)rowledge.org; http://www.rowledge.org/tim
Strange OpCodes: GME: Generate Meaningless Error



--===============3848148369313937287==--


From commits@source.squeak.org Fri Oct 18 02:07:10 2024
From: commits@source.squeak.org
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] The Trunk: Compiler-eem.508.mcz
Date: Fri, 18 Oct 2024 02:07:02 +0000
Message-ID: <20241018020706.28AA858274E@mail.squeak.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============2462596882070001921=="

--===============2462596882070001921==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

Eliot Miranda uploaded a new version of Compiler to project The Trunk:
http://source.squeak.org/trunk/Compiler-eem.508.mcz

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Summary =3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Name: Compiler-eem.508
Author: eem
Time: 12 October 2024, 2:10:57.018117 pm
UUID: 0354bd98-8234-4170-8b32-5a1845079c3f
Ancestors: Compiler-eem.507

Improve the handling of comments, within the existing interpretation of comme=
nts, whcih is that they trail statements.
- If a comment is clearly associated with the following statement (because th=
ere is a newline between the end of the statement and the start of the commen=
t) then ascribe the comment to a CommentNode which is inserted into the parse=
 tree before the next statement.
- print a comment belonging to a block immediately before the block, not afte=
r its arguments and temporaries.
- add a preference to define how comments are printed in pretty-printing. The=
 old implementation broke comments at word boundaries after 450 points in the=
 defaut font. This somewhat arbitrary value doesn't work well with high-resol=
ution displays with a scale factor and results in comments getting broken man=
y times, typically ending up elongated. The preference defines the number of =
points at which to break comments at word boundaries, and if it is zero then =
comments are not broken.

With these changes and the preference set to zero pretty printing methods wit=
h comments seems much improved. Comments intended to belong to the next state=
ment are printed before that next statement. Comments before blocks are print=
ed before blocks not within them.

Submitted for review & storage.

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Diff against Compiler-eem.507 =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Item was changed:
  ----- Method: BlockNode>>printOn:indent: (in category 'printing') -----
  printOn: aStream indent: level
 =20
  	"statements size <=3D 1 ifFalse: [aStream crtab: level]."
+ 	comment ifNotNil:=20
+ 		[self printCommentOn: aStream indent: level.
+ 		 aStream crtab: level].
  	aStream nextPut: $[.
  	self printArgumentsOn: aStream indent: level.
  	(self printTemporaries: temporaries on: aStream doPrior: []) ifTrue:
  		["If >0 temps and >1 statement, put all statements on separate lines"
  		 statements size > 1
  			ifTrue: [aStream crtab: level]
  			ifFalse: [aStream space]].
  	self printStatementsOn: aStream indent: level.
  	aStream nextPut: $]!

Item was changed:
  ----- Method: BlockNode>>printStatementsOn:indent: (in category 'printing')=
 -----
  printStatementsOn: aStream indent: levelOrZero
  	| len shown thisStatement level |
  	level :=3D 1 max: levelOrZero.
- 	comment ifNotNil:=20
- 		[self printCommentOn: aStream indent: level.
- 		aStream crtab: level].
  	len :=3D shown :=3D statements size.
  	(levelOrZero =3D 0 "top level" and: [statements last isReturnSelf])
  		ifTrue: [shown :=3D 1 max: shown - 1]
  		ifFalse: ["should a trailing nil be printed or not? Not if it is an impli=
cit result, not if the last statement answers nil."
  				((arguments size > 0 and: [len =3D 0])
  				 or: [((statements at: len) isJust: NodeNil)
  					and: [len =3D 1
  						or: [len > 1
  							and: [(statements at: len - 1) isMessageNode
  							and: [(statements at: len - 1) isNilIf
  								or: [(statements at: len - 1) isOptimizedWhileLoop]]]]]])
  					ifTrue: [shown :=3D shown - 1]].
  	1 to: shown do:=20
  		[:i |=20
  		thisStatement :=3D statements at: i.
  		thisStatement printOn: aStream indent: level.
  		i < shown ifTrue: [aStream nextPut: $.; crtab: level].
  		(thisStatement comment ~~ nil and: [thisStatement comment size > 0])
  			ifTrue:=20
  				[i =3D shown ifTrue: [aStream crtab: level].
  				thisStatement printCommentOn: aStream indent: level.
  				i < shown ifTrue: [aStream crtab: level]]]!

Item was added:
+ ----- Method: CommentNode>>analyseTempsWithin:rootNode:assignmentPools: (in=
 category 'closure analysis') -----
+ analyseTempsWithin: scopeBlock rootNode: rootNode assignmentPools: assignme=
ntPools!

Item was added:
+ ----- Method: CommentNode>>emitCodeForEffect:encoder: (in category 'code ge=
neration') -----
+ emitCodeForEffect: stack encoder: encoder
+ 	"this is a noop"!

Item was added:
+ ----- Method: CommentNode>>emitCodeForValue:encoder: (in category 'code gen=
eration') -----
+ emitCodeForValue: stack encoder: encoder
+ 	self shouldNotImplement!

Item was added:
+ ----- Method: CommentNode>>sizeCodeForEffect: (in category 'code generation=
') -----
+ sizeCodeForEffect: encoder
+ 	^0!

Item was added:
+ ----- Method: CommentNode>>sizeCodeForLoad:forValue: (in category 'code gen=
eration') -----
+ sizeCodeForLoad: encoder forValue: forValue
+ 	self shouldNotImplement!

Item was added:
+ ----- Method: CommentNode>>sizeCodeForValue: (in category 'code generation'=
) -----
+ sizeCodeForValue: encoder
+ 	self shouldNotImplement!

Item was changed:
  Object subclass: #ParseNode
  	instanceVariableNames: 'comment pc'
+ 	classVariableNames: 'CodeBases CodeLimits LdFalse LdInstType LdLitIndType =
LdLitType LdMinus1 LdNil LdSelf LdSuper LdTempType LdThisContext LdTrue LoadL=
ong NodeFalse NodeNil NodeSelf NodeSuper NodeThisContext NodeTrue PrettyPrint=
CommentWidth Send SendPlus SendType StdLiterals StdSelectors StdVariables'
- 	classVariableNames: 'CodeBases CodeLimits LdFalse LdInstType LdLitIndType =
LdLitType LdMinus1 LdNil LdSelf LdSuper LdTempType LdThisContext LdTrue LoadL=
ong NodeFalse NodeNil NodeSelf NodeSuper NodeThisContext NodeTrue Send SendPl=
us SendType StdLiterals StdSelectors StdVariables'
  	poolDictionaries: ''
  	category: 'Compiler-ParseNodes'!
 =20
  !ParseNode commentStamp: '<historical>' prior: 0!
  This superclass of most compiler/decompiler classes declares common class v=
ariables, default messages, and the code emitters for jumps. Some of the clas=
s variables are initialized here; the rest are initialized in class VariableN=
ode.!

Item was added:
+ ----- Method: ParseNode class>>prefPrettyPrintCommentWidthInPoints (in cate=
gory 'preferences') -----
+ prefPrettyPrintCommentWidthInPoints
+ 	"Accessor for the system-wide preference"
+ =09
+ 	<preference: 'Max width in points of pretty-printed comments, if non-zero'
+ 		category: 'Compiler'
+ 		description: 'If non-zero, the pretty-printer will break comments into li=
nes at word boundaries after this many points in the default font.'
+ 		type: #Number>
+ 	^PrettyPrintCommentWidth ifNil: [0]!

Item was changed:
  ----- Method: ParseNode>>printSingleComment:on:indent: (in category 'privat=
e') -----
  printSingleComment: aString on: aStream indent: indent=20
  	"Print the comment string, assuming it has been indented indent tabs.
+ 	 If the comment width preference is non-zero, break the string at word bre=
aks,
+ 	 given the widths in the default font, at that many points."
- 	Break the string at word breaks, given the widths in the default
- 	font, at 450 points."
 =20
  	| readStream word position lineBreak font wordWidth tabWidth spaceWidth la=
stChar |
  	readStream :=3D ReadStream on: aString.
+ 	(lineBreak :=3D self class prefPrettyPrintCommentWidthInPoints isZero) ifT=
rue:
+ 		[[readStream skipSeparators.
+ 		 aStream nextPutAll: (readStream upTo: Character cr).
+ 		 readStream atEnd] whileFalse:
+ 			[aStream crtab: indent].
+ 		^self].
  	font :=3D TextStyle default defaultFont.
  	tabWidth :=3D TextStyle default tabWidth.
  	spaceWidth :=3D font widthOf: Character space.
  	position :=3D indent * tabWidth.
- 	lineBreak :=3D 450.
  	[readStream atEnd]
  		whileFalse:=20
  			[word :=3D self nextWordFrom: readStream setCharacter: [:lc | lastChar :=
=3D lc].
  			wordWidth :=3D word inject: 0 into: [:width :char | width + (font widthO=
f: char)].
  			position :=3D position + wordWidth.
  			position > lineBreak
  				ifTrue:=20
  					[aStream skip: -1; crtab: indent.
  					position :=3D indent * tabWidth + wordWidth + spaceWidth.
  					lastChar =3D Character cr
  						ifTrue: [[readStream peekFor: Character tab] whileTrue].
  					word isEmpty ifFalse: [aStream nextPutAll: word; space]]
  				ifFalse:=20
  					[aStream nextPutAll: word.
  					readStream atEnd
  						ifFalse:=20
  							[position :=3D position + spaceWidth.
  							aStream space].
  					lastChar =3D Character cr
  						ifTrue:=20
  							[aStream skip: -1; crtab: indent.
  							position :=3D indent * tabWidth.
  							[readStream peekFor: Character tab] whileTrue]]]!

Item was changed:
  ----- Method: Parser>>addComment (in category 'private') -----
  addComment
+ 	"Take care to add the comment to the node it is associated with.
+ 	 If there is a new line at the end of the current parseNode (which
+ 	 ends at hereMark) then consider the comment as belong ing to the next sta=
tement."
+ 	=20
+ 	| character |
-=20
  	(parseNode ~~ nil
+ 	 and: [currentComment ~~ nil]) ifTrue:=20
+ 		[character :=3D hereChar =3D=3D DoItCharacter
+ 						ifTrue: [hereChar]
+ 						ifFalse: [source originalContents at: hereMark + 1].
+ 		 (character =3D=3D Character cr or: [character =3D=3D Character lf]) ifFa=
lse:
- 	 and: [currentComment ~~ nil])
- 		ifTrue:=20
  			[parseNode comment: currentComment.
+ 			 currentComment :=3D nil]]!
- 			currentComment :=3D nil]!

Item was changed:
  ----- Method: Parser>>blockExpression (in category 'expression types') -----
  blockExpression
  	"[ ({:var} |) (| {temps} |) (statements) ] =3D> BlockNode."
 =20
  	| blockNode variableNodes temporaryBlockVariables start |
  	blockNode :=3D BlockNode new.
+ 	blockNode comment: currentComment.
+ 	currentComment :=3D nil.
  	variableNodes :=3D OrderedCollection new.
  	start :=3D prevMark + requestorOffset.
  	"Gather parameters."
  	[self match: #colon] whileTrue:
  		[variableNodes addLast: (encoder bindBlockArg: self argumentName within: =
blockNode)].
  	(variableNodes size > 0 & (hereType ~~ #rightBracket) and: [(self match: #=
verticalBar) not]) ifTrue:
  		[^self expected: 'Vertical bar'].
 =20
  	temporaryBlockVariables :=3D self temporaryBlockVariablesFor: blockNode.
  	self statements: variableNodes innerBlock: true blockNode: blockNode.
  	blockNode temporaries: temporaryBlockVariables.
 =20
  	(self match: #rightBracket) ifFalse: [^self expected: 'Period or right bra=
cket'].
 =20
  	blockNode noteSourceRangeStart: start end: self endOfLastToken encoder: en=
coder.
 =20
  	"The scope of the parameters and temporary block variables is no longer ac=
tive."
  	temporaryBlockVariables do: [:variable | variable scope: -1].
  	variableNodes do: [:variable | variable scope: -1]!

Item was changed:
  ----- Method: Parser>>statements:innerBlock:blockNode: (in category 'expres=
sion types') -----
  statements: argNodes innerBlock: inner blockNode: theBlockNode
 =20
+ 	| stmts returns start savedComment |
+ 	inner
+ 		ifTrue: "give comment to message which has this block as an argument, not=
 to this block."
+ 			[savedComment :=3D currentComment]
+ 		ifFalse:"give initial comment to block, since others trail statements"
+ 			[theBlockNode comment: currentComment].
- 	| stmts returns start |
- 	"give initial comment to block, since others trail statements"
- 	theBlockNode comment: currentComment.
  	currentComment :=3D nil.
  	stmts :=3D OrderedCollection new.
  	returns :=3D false.
  	hereType ~~ #rightBracket ifTrue:
  		[[theBlockNode startOfLastStatement: (start :=3D self startOfNextToken).
+ 		 currentComment ifNotNil:
+ 			[stmts addLast: (CommentNode new comment: currentComment).
+ 			 currentComment :=3D nil].
  		  (returns :=3D self matchReturn)
  			ifTrue:=20
  				[self expression ifFalse:
  					[^self expected: 'Expression to return'].
  				 self addComment.
  				 stmts addLast: (parseNode isReturningIf
  								ifTrue: [parseNode]
  								ifFalse: [ReturnNode new
  											expr: parseNode
  											encoder: encoder
  											sourceRange: (start to: self endOfLastToken)])]
  			ifFalse:=20
  				[self expression
  					ifTrue:=20
  						[self addComment.
  						"if both branches return, following code is unreachable, let's avoid =
this.
  						But only if interactive, we don't want to prevent loading of legacy c=
ode"
  						self interactive ifTrue: [returns :=3D parseNode isReturningIf].
  						 stmts addLast: parseNode]
  					ifFalse:=20
  						[self addComment.
  						 stmts size =3D 0 ifTrue:=20
  							[stmts addLast:=20
  								(encoder encodeVariable:
  									(inner ifTrue: ['nil'] ifFalse: ['self']))]]].
  		  returns ifTrue:=20
  			[self match: #period.
  			 (hereType =3D=3D #rightBracket or: [hereType =3D=3D #doIt]) ifFalse:
  				[^self expected: 'End of block']].
  		  returns not and: [self match: #period]] whileTrue].
  	theBlockNode
  		arguments: argNodes
  		statements: stmts
  		returns: returns
  		from: encoder.
  	parseNode :=3D theBlockNode.
+ 	currentComment :=3D savedComment.
  	^true!


--===============2462596882070001921==--


From commits@source.squeak.org Fri Oct 18 02:08:52 2024
From: commits@source.squeak.org
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] The Trunk: Compiler-eem.509.mcz
Date: Fri, 18 Oct 2024 02:08:45 +0000
Message-ID: <20241018020848.F2E6D58274E@mail.squeak.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============0631561683922504043=="

--===============0631561683922504043==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

Eliot Miranda uploaded a new version of Compiler to project The Trunk:
http://source.squeak.org/trunk/Compiler-eem.509.mcz

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Summary =3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Name: Compiler-eem.509
Author: eem
Time: 17 October 2024, 7:08:42.82772 pm
UUID: 5fe7505b-b928-4a4f-8b6f-42e806f0b92c
Ancestors: Compiler-eem.508

Fix Parser>>parseArgsAndTemps: for methods that have pragmaes after the messa=
ge pattern and before any temps.

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Diff against Compiler-eem.508 =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Item was changed:
  ----- Method: Parser>>temporariesIn: (in category 'expression types') -----
  temporariesIn: methodSelector
  	" [ '|' (variable)* '|' ]"
  	| vars theActualText |
+ 	"temporaries may be preceded by optional pragmas"
+ 	self pragmaSequence.
  	(self match: #verticalBar) ifFalse:=20
  		["no temps"
  		doitFlag ifTrue:
  			[tempsMark :=3D self interactive
  								ifTrue: [cue requestor selectionInterval first]
  								ifFalse: [1].
  			^ #()].
  		tempsMark :=3D hereMark	"formerly --> prevMark + prevToken".
  		tempsMark > 0 ifTrue:
  			[theActualText :=3D source contents.
  			[tempsMark < theActualText size and: [(theActualText at: tempsMark) isSe=
parator]]
  				whileTrue: [tempsMark :=3D tempsMark + 1]].
  			^ #()].
  	vars :=3D OrderedCollection new.
  	[hereType =3D=3D #word]
  		whileTrue: [vars addLast: (encoder bindTemp: self advance in: methodSelec=
tor)].
  	(self match: #verticalBar) ifTrue:=20
  		[tempsMark :=3D prevMark.
  		^ vars].
  	^ self expected: 'Vertical bar'!


--===============0631561683922504043==--


From commits@source.squeak.org Fri Oct 18 04:02:11 2024
From: commits@source.squeak.org
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] The Trunk: Compiler-eem.510.mcz
Date: Fri, 18 Oct 2024 04:02:01 +0000
Message-ID: <20241018040206.2CB62583DAC@mail.squeak.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============3523731191173306867=="

--===============3523731191173306867==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

Eliot Miranda uploaded a new version of Compiler to project The Trunk:
http://source.squeak.org/trunk/Compiler-eem.510.mcz

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Summary =3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Name: Compiler-eem.510
Author: eem
Time: 17 October 2024, 9:01:58.648511 pm
UUID: 54ba5a6b-caac-42d9-9b15-f4749624f9f6
Ancestors: Compiler-eem.509

Fix Parser>>parseParameterNames: for underscore selectors.

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Diff against Compiler-eem.509 =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Item was changed:
  ----- Method: Parser>>parseParameterNames: (in category 'public access') --=
---
  parseParameterNames: aString=20
  	"Answer the parameter names for the argument, aString, which should=20
  	 parse successfully up to the temporary declaration or the end of the=20
  	 method header."
 =20
+ 	self allowUnderscoreSelectors ifFalse: [self initScannerForTokenization].
- 	self initScannerForTokenization.
  	^self
  		initPattern: aString
  		return: [:pattern | pattern at: 2]!


--===============3523731191173306867==--


From scott.gibson@posteo.net Fri Oct 18 04:02:25 2024
From: Scott Gibson <scott.gibson@posteo.net>
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] The Weekly Squeak news: Building Roguerrants: Insights
 into 2.5D Roguelike Development with Squeak
Date: Fri, 18 Oct 2024 04:02:15 +0000
Message-ID: <4ef936c1-e0fd-4162-950f-adb7ec207dbd@posteo.net>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============0474732326222329196=="

--===============0474732326222329196==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

The latest Weekly Squeak news article is now available.

This article provides a discussion about Roguerrants, a game engine,=20
with its developer, St=C3=A9phane Rollandin. It covers Morphic, gaming logic,=
=20
graphics and sound implementation, as well as the unique features that=20
distinguish Roguerrants, such as its adaptive navigation grids and=20
geometry-based combat systems. St=C3=A9phane shares his experiences with=20
Squeak, the philosophy behind the game design, and the future=20
enhancements he envisions for Roguerrants. Be sure to check it out!

https://news.squeak.org/2024/10/18/building-roguerrants-insights-into-2-5d-ro=
guelike-development-with-squeak/

Enjoy!
Scott

--===============0474732326222329196==
Content-Type: application/pkcs7-signature
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="smime.p7s"
MIME-Version: 1.0

MIAGCSqGSIb3DQEHAqCAMIACAQExDzANBglghkgBZQMEAgMFADCABgkqhkiG9w0BBwEAAKCCDZow
ggayMIIEmqADAgECAhAM4TInqCzmo9DzV8Nsth6GMA0GCSqGSIb3DQEBDQUAMHoxCzAJBgNVBAYT
AlBMMSEwHwYDVQQKExhBc3NlY28gRGF0YSBTeXN0ZW1zIFMuQS4xJzAlBgNVBAsTHkNlcnR1bSBD
ZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEfMB0GA1UEAxMWQ2VydHVtIFRydXN0ZWQgUm9vdCBDQTAe
Fw0yMzA4MDEwODA5NDlaFw0zODA3MjMwODA5NDlaME4xCzAJBgNVBAYTAlBMMSEwHwYDVQQKDBhB
c3NlY28gRGF0YSBTeXN0ZW1zIFMuQS4xHDAaBgNVBAMME0NlcnR1bSBTTUlNRSBSU0EgQ0EwggIi
MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDTudxfTHvqEIhVwDB4ZDDJq+fDBq1a+nCBCTGd
nj326RGkCS2E1Q63oHTwlD9tkJt6a8UDwIIZ6eG8/OIkM/A+K2lzMrBcP9dEBdGZqCXwbqq4O4Z/
Pl8om7O7G5bwnaacpFpLGTXotg6PT/R9UWXMW+S1I5KiorBXROeFX0N+CbryUfCQj0vB5F85YXqy
HkaZdgO8YdL+j+pfUROJGLdnGff6b3+O58bBZ6f4IUVOARhyaaLQy1ofnwkV0AM2Wl/AIjA8Krwt
ROh0z5/F3k8SUyNyvIQaG0vPyctHRWLsXGbkwHo3wOpXS4KkAQR1zR+ULDGCMFhRSX/j/skJxYmA
tqbU+v56wYeLEM9LmfTCsOSrY8yNRip0PQS4FrZyi888WC49iBLzMktO+JEsmDIiAYDk9kjD9WAh
ubh8iN/5RducVz9lukfCa0+jYH7sRhpc12H3bM2ufvTbRIE5W1CRaALiGzlEWzhA3UWIBba+Y4Br
httxrrwKG9fORAubnFe0yDCnXcHC4N90YIwJ44sP0BgC9LjGR+PZNTzvSAj+qCmZ6xJOPUlssl6H
ycEPU6KsW9KnlZmETscqcC+V3ozBk8xM0VZ/AHZ34pXJcemfWG4e4rxeH0FSdwUEzj3kTA84OqRx
bb/C21XsiS1XyT3KUIGlDiIEQFgnD9Tk/PGpEwIDAQABo4IBXjCCAVowDwYDVR0TAQH/BAUwAwEB
/zAdBgNVHQ4EFgQUZvvDD770v+CcyatN3kcZvcDKpmgwHwYDVR0jBBgwFoAUjPscdbwC059OLkjZ
+WBUqsSzT/owDgYDVR0PAQH/BAQDAgEGMB0GA1UdJQQWMBQGCCsGAQUFBwMEBggrBgEFBQcDAjAv
BgNVHR8EKDAmMCSgIqAghh5odHRwOi8vY3JsLmNlcnR1bS5wbC9jdHJjYS5jcmwwawYIKwYBBQUH
AQEEXzBdMCgGCCsGAQUFBzABhhxodHRwOi8vc3ViY2Eub2NzcC1jZXJ0dW0uY29tMDEGCCsGAQUF
BzAChiVodHRwOi8vcmVwb3NpdG9yeS5jZXJ0dW0ucGwvY3RyY2EuY2VyMDoGA1UdIAQzMDEwLwYE
VR0gADAnMCUGCCsGAQUFBwIBFhlodHRwczovL3d3dy5jZXJ0dW0ucGwvQ1BTMA0GCSqGSIb3DQEB
DQUAA4ICAQACdWiFTrEXejbCNhvlQGjnGr4GwCBRRcs1+uQumSciktKucsj1mCb3tmB09bDya0be
SUDVed/h+fbPKFlON2miwRYZwdGXSFNrynzGC1oYQG3SPS6qwXS2iZe4kQ4d0pTRntGPeHRe13o5
nd3tJw/+XanUoTRy7/N2NxQ8Br16v+Ma6N2XqqLj+zXGMn8h5c0LpmqnkaMxk2hiLxXEOLFoGXXO
il3wHCkgtlZgfbgyeK/AGjqEj9XNfDCe2V4fTLsYqlb+AaVAMpXFtezeGLrsIAef+MYjXNoGKYGe
HM8AiNHeIxavk45O9Etvad/lKvPcH0hgMr9wTReCRnmjpodHgxcKG0LLI6rLR4RbEfRf3rV8xyR6
KkfjIy7W8pN/Cx/i8D/rAM46YcS281duz43X0Oaw6UjiqFwiae8DeKvTINLBR+yfJdQ/lLssNAG3
QNxXRHozNJUp/UeqUnf1WQC4NabQXKp54hWTCSBec+n550+REg/P+tDi+UsoFqiE9Mpz/I/KpA3F
GyhpDxYbLiw/e0nYLqt1HqX8F4L4sLfW346rEHtBWVNPmsQmLjI6mfhm8c4FX3jfnQowPDLvqNGJ
sO/ec397eyb8nN+8MSM1KXPVsMh4LvRZvjVL0DVEfOGBf29HWEXYuJ5llhY9/N31ay4Gsv61VgFE
7v9hQjM4ZDCCBuAwggTIoAMCAQICEAsc/2yx3kenXSzKjrRVR2cwDQYJKoZIhvcNAQELBQAwTjEL
MAkGA1UEBhMCUEwxITAfBgNVBAoMGEFzc2VjbyBEYXRhIFN5c3RlbXMgUy5BLjEcMBoGA1UEAwwT
Q2VydHVtIFNNSU1FIFJTQSBDQTAeFw0yNDA0MzAyMTE0MjZaFw0yNTA0MzAyMTE0MjVaMEoxIDAe
BgNVBAMMF3Njb3R0LmdpYnNvbkBwb3N0ZW8ubmV0MSYwJAYJKoZIhvcNAQkBFhdzY290dC5naWJz
b25AcG9zdGVvLm5ldDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBANA+gfjphBFe06Ns
gDCNXlPMU7KcDGdsje9neOrkbjsUz0dDoA65bU79ydRs700oxnSU6z2BywWU/NF1i6PzZtfffjYN
w3phCBv682jHLujD3GKCuiJtYLiW1MBKtT3rV6JAKzHzYW+cwsF/IOhuEnbC741YtwAf6FgmErkH
NmagaN+Ya4z489omUlG1bZ4t7ZlKJ/jb4N5slNrgZQQbftJuKgGQUlG53ueYVVGJ3Uf+UdIeVUCb
XbmE2bWJz4DM6NSXJ5fMMYwgLD6nXYuxQRHo2bQNxCCkehdsvmXRN/InGCGpCVxq1wisw2pWS28y
GtIRQJlub9pU0NxnJcwMu8+CJdLZ45XIP7C2NGiTi2rLTPlvWdRcf71r6Sdez6pQa6mKUX81oIiF
IyCmcuvdFQwu/oK27OOG5B45yzqBN4B9w/+K+EajdJX2OdSgnDDd3OCIXcQSXSnNC1PNPOPn3JaR
G+I4ha8fFSvA4gE5JPXhab/aKyrJrHK1FPNh4mXIfOFLmXsAz8vF0Ahwxx7EsNwC09QiFJBB+E0h
dVBuzdzXyp6oZsCmPn9FoPS4uAkpOcwQW9m03XNBMeeiHLO/Uzi8tF5POvZGB4KTkJdO4NyE25YV
O55jjTqvS3mGZGIPKFk7NL+PudPJ+Tr0fblMAivGSjENmpFkbBSAUSITqqspAgMBAAGjggG8MIIB
uDAMBgNVHRMBAf8EAjAAMEEGA1UdHwQ6MDgwNqA0oDKGMGh0dHA6Ly9jc21pbWVyc2FjYS5jcmwu
Y2VydHVtLnBsL2NzbWltZXJzYWNhLmNybDCBgwYIKwYBBQUHAQEEdzB1MC4GCCsGAQUFBzABhiJo
dHRwOi8vY3NtaW1lcnNhY2Eub2NzcC1jZXJ0dW0uY29tMEMGCCsGAQUFBzAChjdodHRwOi8vY3Nt
aW1lcnNhY2EucmVwb3NpdG9yeS5jZXJ0dW0ucGwvY3NtaW1lcnNhY2EuY2VyMB8GA1UdIwQYMBaA
FGb7ww++9L/gnMmrTd5HGb3AyqZoMB0GA1UdDgQWBBT3ikbX+TgFKsO8KZpeBlB/DGuABzBMBgNV
HSAERTBDMAkGB2eBDAEFAQIwNgYLKoRoAYb2dwJkAgEwJzAlBggrBgEFBQcCARYZaHR0cHM6Ly93
d3cuY2VydHVtLnBsL0NQUzAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwDgYDVR0PAQH/
BAQDAgTwMCIGA1UdEQQbMBmBF3Njb3R0LmdpYnNvbkBwb3N0ZW8ubmV0MA0GCSqGSIb3DQEBCwUA
A4ICAQAVNFkAX4sOSRbQNu4khyvXhL7XXDCwc6Mh5C6+qurMslrJzTt8gwAi/68Zbg0N7bznN5YV
wNN7yQO/KkZgzWajqbLVbyOCNbIaLHE1QVcAP4isANv4H1oxRgGRFfucsxKkQax4TN/izAt3wn6P
61P6tL5V6Mar5dGa+NtgMbUCTA71GHEo66m8KqrWTKCD/czVmEC94eGRezURZhupmZ6D/CMUZoHB
l7MvMuZxZbTFBo/q9RK/Bt87t+FNNzl5u+GtgVUNDtdTI9cUEvuIbSWvHvcnBVYBKhsuRoq93PLE
Rrty6OYqr1sgdndPLpCDxm6SP25VZgVMpNvETe5vXul0p+gbxn+5mfMAXyRFyhz1+Qro6U+9CmuI
kFW910aa5tmalHXDzWP1gd1/1BlreneVq8egYjsklGl+yEujr62ZMgAXxtDGdQ/RDt2YvZ+Jbf10
0rpQDaeQZR1NRmFB1LoafS8pQzbBx3iuIyznNXMDHZuzja5TO+kgP2vIhVCx+iQshy5EkZebq2bQ
x6Ps52c99yUKspl1tuQcwIt1jnTsg2haZAVBqJrl2RXLaXeadimowRz6kOTE3/l5KtzpDAGq0gr8
1vERwBF9fFvOvfTY4j9hGblgp/pW2oV31/sixOzKMcq0CCts+VVotvj2uSnMby0kUr5vDpid0TOU
6F7nEDGCBHAwggRsAgEBMGIwTjELMAkGA1UEBhMCUEwxITAfBgNVBAoMGEFzc2VjbyBEYXRhIFN5
c3RlbXMgUy5BLjEcMBoGA1UEAwwTQ2VydHVtIFNNSU1FIFJTQSBDQQIQCxz/bLHeR6ddLMqOtFVH
ZzANBglghkgBZQMEAgMFAKCCAd8wGAYJKoZIhvcNAQkDMQsGCSqGSIb3DQEHATAcBgkqhkiG9w0B
CQUxDxcNMjQxMDE4MDQwMjE2WjBPBgkqhkiG9w0BCQQxQgRAlfHs75wtlkmP1L7yVNu4O1l/jJ8e
THfpVq6KZV3OiNTjxT9GK3mIz8IDCkfn+F0UK6mJZ6sgwXsW1S97S5h42zBsBgkqhkiG9w0BCQ8x
XzBdMAsGCWCGSAFlAwQBKjALBglghkgBZQMEAQIwCgYIKoZIhvcNAwcwDgYIKoZIhvcNAwICAgCA
MA0GCCqGSIb3DQMCAgFAMAcGBSsOAwIHMA0GCCqGSIb3DQMCAgEoMHEGCSsGAQQBgjcQBDFkMGIw
TjELMAkGA1UEBhMCUEwxITAfBgNVBAoMGEFzc2VjbyBEYXRhIFN5c3RlbXMgUy5BLjEcMBoGA1UE
AwwTQ2VydHVtIFNNSU1FIFJTQSBDQQIQCxz/bLHeR6ddLMqOtFVHZzBzBgsqhkiG9w0BCRACCzFk
oGIwTjELMAkGA1UEBhMCUEwxITAfBgNVBAoMGEFzc2VjbyBEYXRhIFN5c3RlbXMgUy5BLjEcMBoG
A1UEAwwTQ2VydHVtIFNNSU1FIFJTQSBDQQIQCxz/bLHeR6ddLMqOtFVHZzANBgkqhkiG9w0BAQEF
AASCAgCPpfJzHAd7uzCy9cqrvv9i/B7uPcfEVMjtZ/vNlOPaB9ZpStAlm6pbGarJDhCivL/4ICg2
NLLjeooQDEiQ1FE6DqYWwcMh3oi1YTQXBVzoROU2OxfqgogjvYLXRKfQhrxdSMYze8hl7Zb1LGwf
6MH4Kye5U0FhI1L0k4gxB6ZPLCheBGnRSZaDMGN9o4yevOE/burzcziJzYf8CHTdVXBxZpvkim+v
LbZdkJWoFGCo4v4kRTrOrHFWiEvbFeWHpE2o2htErjVoiHe9MjjPwYKFQxhTPh5wWSapNzOXwc6b
QQ5y1Dn4PHa4QwSPY3PiH9JRuBMZ/Z9ZApQ4f4zx99gxIW0SOQcgUOUiqRaCIvrxI4F6PUNKq7ec
mMJKweIbJ736NgLfTobN1AesHEtpPMd+qu1hLU3D70pwKzx3CPKuRbjsPQ15E8C1J7MJuzehgV4h
MARVl7xn3aWbB+AVjEGze8TKT7WZaqPZ3KIDUNWK0t2XaHm1vMCVzuBReafKA01qYPrpjVCznv3J
5eXS+b4T4nurbmnVI1OLNCMdEOJbvCcAJ3ZJ2tA1Tk58vUlN4PrlgMeMZqBODOQ/MT8nB/E9ZnIo
DGFo1qGOCp5Xz11F6/IgJKpiNhW4EGltGqYApchIBQ0t6FIEUucjB0e95Nj39tf1IXQuXVaGO1RT
6LgMxgAAAAAAAA==

--===============0474732326222329196==--


From commits@source.squeak.org Fri Oct 18 23:36:14 2024
From: commits@source.squeak.org
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] The Trunk: Tools-eem.1273.mcz
Date: Fri, 18 Oct 2024 23:36:03 +0000
Message-ID: <20241018233609.CD58A582730@mail.squeak.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============8764622808412621389=="

--===============8764622808412621389==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

Eliot Miranda uploaded a new version of Tools to project The Trunk:
http://source.squeak.org/trunk/Tools-eem.1273.mcz

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Summary =3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Name: Tools-eem.1273
Author: eem
Time: 18 October 2024, 4:35:59.934317 pm
UUID: 71cb2c7c-89a4-47bd-8bc5-69949b24d640
Ancestors: Tools-eem.1272

When scanning files for changes have the ChangeList use a separate instance o=
f the file (fileForChangeRecords) to instantiate the changes with than the fi=
le it is scanning, so that interrogating previously scanned changes doesn't a=
lter the file being used to scan for changes.

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Diff against Tools-eem.1272 =3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Item was added:
+ ----- Method: ChangeList>>addItem: (in category 'initialization-release') -=
----
+ addItem: item
+ 	self addItem: item text: (self listTextFor: item)!

Item was changed:
  ----- Method: ChangeList>>changes:file: (in category 'accessing') -----
  changes: changeRecords file: aFile
  	file :=3D aFile.
  	changeList :=3D OrderedCollection new.
  	list :=3D OrderedCollection new.
  	listIndex :=3D 0.
+ 	changeRecords do:
+ 		[:each |
- 	changeRecords do: [:each |
  		(each respondsTo: #methodClass)
+ 			ifTrue: [self addItem: each]
+ 			ifFalse: [self addItem: ChangeRecord new text: each asString]].
- 			ifFalse: [self addItem: ChangeRecord new text: each asString]
- 			ifTrue:
- 				[self addItem: each text: ('method: ' , each methodClass name , (each i=
sMetaClassChange ifTrue: [' class '] ifFalse: [' '])
- 					, each methodSelector
- 					, '; ' , each stamp)]].
  	listSelections :=3D Array new: list size withAll: false!

Item was added:
+ ----- Method: ChangeList>>listTextFor: (in category 'scanning') -----
+ listTextFor: aChangeRecord
+ 	"Answer the text to display in the list for a particular change record."
+ 	^String streamContents:
+ 		[:s|
+ 		s nextPutAll: aChangeRecord type;
+ 			nextPutAll: ': '.
+ 		aChangeRecord methodClassName ifNotNil:
+ 			[:className|
+ 			s nextPutAll: className.
+ 			aChangeRecord isMetaClassChange ifTrue: [s nextPutAll: ' class'].
+ 			s space].
+ 		aChangeRecord methodSelector
+ 			ifNotNil:
+ 				[:selector|
+ 				s nextPutAll: selector]
+ 			ifNil: [aChangeRecord type =3D=3D #method ifTrue:
+ 					[s nextPutAll: 'unparsableSelector']].
+ 		aChangeRecord stamp ifNotNil:
+ 			[s nextPutAll: '; ';
+ 				nextPutAll: aChangeRecord stamp].
+ 		aChangeRecord category ifNotNil:
+ 			[:cat| cat ~=3D Categorizer default ifTrue:
+ 				[s nextPutAll: '; '; nextPutAll: cat]].
+ 		s position =3D (aChangeRecord type size + 2) ifTrue:
+ 			[s nextPutAll: (aChangeRecord string contractTo: 50)]]!

Item was changed:
  ----- Method: ChangeList>>scanCategory (in category 'scanning') -----
  scanCategory =20
  	"Scan anything that involves more than one chunk; method name is historica=
l only"
 =20
  	| itemPosition item tokens stamp anIndex class meta |
  	itemPosition :=3D file position.
  	item :=3D file nextChunk.
 =20
  	((item includesSubstring: 'commentStamp:')
  	or: [(item includesSubstring: 'methodsFor:')
  	or: [(item includesSubstring: 'classDefinition:')
  	or: [item endsWith: 'reorganize']]]) ifFalse:
  		["Maybe a preamble, but not one we recognize; bail out with the preamble =
trick"
+ 		^ self addItem: (ChangeRecord new file: fileForChangeRecords position: it=
emPosition type: #preamble)
- 		^ self addItem: (ChangeRecord new file: file position: itemPosition type:=
 #preamble)
  				 text: ('preamble: ' , item contractTo: 50)].
 =20
  	tokens :=3D Scanner new scanTokens: item.
  	tokens size >=3D 3 ifTrue:
  		[stamp :=3D ''.
  		anIndex :=3D tokens indexOf: #stamp: ifAbsent: [nil].
  		anIndex ifNotNil: [stamp :=3D tokens at: (anIndex + 1)].
 =20
+ 		tokens second =3D=3D #methodsFor: ifTrue:
+ 			[^self scanCategory: tokens third class: tokens first meta: false stamp:=
 stamp].
+ 		tokens third =3D=3D #methodsFor: ifTrue:
+ 			[^self scanCategory: tokens fourth class: tokens first meta: true stamp:=
 stamp]].
- 		tokens second =3D=3D #methodsFor:
- 			ifTrue: [^ self scanCategory: tokens third class: tokens first
- 							meta: false stamp: stamp].
- 		tokens third =3D=3D #methodsFor:
- 			ifTrue: [^ self scanCategory: tokens fourth class: tokens first
- 							meta: true stamp: stamp]].
 =20
  	tokens second =3D=3D #commentStamp:
  		ifTrue:
  			[stamp :=3D tokens third.
  			self addItem:
+ 					(ChangeRecord new file: fileForChangeRecords position: file position t=
ype: #classComment
+ 									class: tokens first category: nil meta: false stamp: stamp).
+ 			^file nextChunk; skipStyleChunk].
+=20
- 					(ChangeRecord new file: file position: file position type: #classComme=
nt
- 									class: tokens first category: nil meta: false stamp: stamp)
- 					text: 'class comment for ' , tokens first,=20
- 						  (stamp isEmpty ifTrue: [''] ifFalse: ['; ' , stamp]).
- 			file nextChunk.
- 			^ file skipStyleChunk].
- 	=09
  	tokens first =3D=3D #classDefinition:
  		ifTrue:
  			[class :=3D tokens second.
  			meta :=3D tokens size >=3D 3 and: [tokens third =3D 'class'].
  			stamp :=3D ''.
  			self addItem:
+ 					(ChangeRecord new file: fileForChangeRecords position: file position t=
ype: #classDefinition
+ 									class: class category: nil meta: meta stamp: stamp).
+ 			^file nextChunk; skipStyleChunk].
- 					(ChangeRecord new file: file position: file position type: #classDefin=
ition
- 									class: class category: nil meta: meta stamp: stamp)
- 					text: 'class definition for ' , class,=20
- 						  (stamp isEmpty ifTrue: [''] ifFalse: ['; ' , stamp]).
- 			file nextChunk.
- 			^ file skipStyleChunk].
 =20
  	self assert: tokens last =3D=3D #reorganize.
  	self addItem:
  		(ChangeRecord new
+ 			file: fileForChangeRecords position: file position type: #reorganize
+ 			class: tokens first category: nil meta: false stamp: stamp).
- 			file: file position: file position type: #reorganize
- 			class: tokens first category: nil meta: false stamp: stamp)
- 		text: 'organization for ' , tokens first, (tokens second =3D=3D #class if=
True: [' class'] ifFalse: ['']).
  	file nextChunk!

Item was changed:
  ----- Method: ChangeList>>scanCategory:class:meta:stamp: (in category 'scan=
ning') -----
  scanCategory: category class: class meta: meta stamp: stamp
+ 	| itemPosition method |
- 	| itemPosition method selector |
  	[itemPosition :=3D file position.
  	method :=3D file nextChunk.
  	file skipStyleChunk.
+ 	method size > 0]	"done when double terminators"
- 	method size > 0]						"done when double terminators"
  		whileTrue:
+ 			[self addItem: (ChangeRecord new
+ 								file: fileForChangeRecords
+ 								position: itemPosition
+ 								type: #method
+ 								class: class
+ 								category: category
+ 								meta: meta
+ 								stamp: stamp)]!
- 		[self addItem: (ChangeRecord new file: file position: itemPosition type: =
#method
- 							class: class category: category meta: meta stamp: stamp)
- 			text: 'method: ' , class , (meta ifTrue: [' class '] ifFalse: [' '])
- 				, ((selector :=3D ((Smalltalk classNamed: class) ifNil: [Object]) newPa=
rser parseSelector: method) isNil
- 					ifTrue: ['unparsableSelector']
- 					ifFalse: [selector])
- 				, (stamp isEmpty ifTrue: [''] ifFalse: ['; ' , stamp])]!

Item was changed:
  ----- Method: ChangeList>>scanFile:from:to: (in category 'scanning') -----
  scanFile: aFile from: startPosition to: stopPosition
- =09
  	file :=3D aFile.
+ 	fileForChangeRecords :=3D aFile directory readOnlyFileNamed: aFile localNa=
me.
  	changeList :=3D OrderedCollection new.
  	list :=3D OrderedCollection new.
  	listIndex :=3D 0.
  	file position: startPosition.
  ('Scanning {1}...' translated format: {aFile localName})
  	displayProgressFrom: startPosition to: stopPosition
+ 	during: [:bar | | prevChar itemPosition item |
- 	during: [:bar | | prevChar itemPosition item change |
  	[ [file position < stopPosition]
  		whileTrue:
  		[bar value: file position.
  		[file atEnd not and: [file peek isSeparator]]
  				whileTrue: [prevChar :=3D file next].
  		(file peekFor: $!!)
  		ifTrue:
  			[(prevChar =3D Character cr or: [prevChar =3D Character lf])
  				ifTrue: [self scanCategory]]
  		ifFalse:
  			[itemPosition :=3D file position.
  			item :=3D file nextChunk.
  			file skipStyleChunk.
  			item size > 0 ifTrue:
+ 				[self addItem: (ChangeRecord new file: fileForChangeRecords position: i=
temPosition item: item)]]]
- 				[change :=3D ChangeRecord new file: file position: itemPosition item: i=
tem.
- 				 self addItem: change text: change type, ': ' , (item contractTo: 50)]]]
  	] on: InvalidUTF8 do: [:ex |
  		aFile isSourceFile ifTrue: [ex pass] ifFalse: [
  			self notify: ex messageText, '\\Proceed to try the legacy MacRoman encod=
ing.' translated withCRs.
  			aFile reset; setConverterForOldCode.
  			^ self scanFile: aFile from: startPosition to: stopPosition]]].
  	self resetListSelections!


--===============8764622808412621389==--


From commits@source.squeak.org Fri Oct 18 23:38:49 2024
From: commits@source.squeak.org
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] The Trunk: Tools-eem.1274.mcz
Date: Fri, 18 Oct 2024 23:38:37 +0000
Message-ID: <20241018233845.143BD582735@mail.squeak.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============7125992370315533226=="

--===============7125992370315533226==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

Eliot Miranda uploaded a new version of Tools to project The Trunk:
http://source.squeak.org/trunk/Tools-eem.1274.mcz

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Summary =3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Name: Tools-eem.1274
Author: eem
Time: 18 October 2024, 4:38:33.13365 pm
UUID: 171b6c0d-ac36-4d56-a943-383800d83317
Ancestors: Tools-eem.1273

Improve the Debugger's "run to here" so that one can use it to run into block=
s.

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Diff against Tools-eem.1273 =3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Item was added:
+ ----- Method: Debugger>>innermostRangeForSourceIndex:in: (in category 'code=
 pane') -----
+ innermostRangeForSourceIndex: sourceIndex in: ranges
+ 	^ranges
+ 		inject: (ranges detect: [:range| range includes: sourceIndex])
+ 		into: [:best :next|
+ 			((next includes: sourceIndex)
+ 			 and: [best first < next first
+ 			 and: [best last > next last]])
+ 				ifTrue: [next]
+ 				ifFalse: [best]]!

Item was added:
+ ----- Method: Debugger>>rangesForScopes (in category 'code pane') -----
+ rangesForScopes
+ 	"Answer a Dictionary from source range to closure and/or method
+ 	 for the current method and all blocks within it."
+ 	| ranges method map |
+ 	ranges :=3D Dictionary new.
+ 	method :=3D self selectedContext homeMethod.
+ 	map :=3D method debuggerMap.
+ 	method embeddedBlockClosures do:
+ 		[:closure|
+ 		ranges at: (map rangeForClosure: closure) put: closure].
+ 	ranges at: (map rangeForMethod: method) put: method.
+ 	^ranges!

Item was changed:
  ----- Method: Debugger>>runToSelection: (in category 'code pane menu') -----
  runToSelection: selectionInterval
+ 	| ranges targetRange |
+ 	self pc first >=3D selectionInterval first ifTrue:
+ 		[^self].
+ 	ranges :=3D self rangesForScopes keys.
+ 	targetRange :=3D self innermostRangeForSourceIndex: selectionInterval firs=
t in: ranges.
+ 	[targetRange ~=3D (self innermostRangeForSourceIndex: self pc first in: ra=
nges)]
+ 		whileTrue:
+ 			[self stepIntoBlock].
+ 	self doStepUntil:
+ 		[self pc first >=3D selectionInterval first]!
-=20
- 	self pc first >=3D selectionInterval first ifTrue: [ ^self ].
- 	self doStepUntil: [ self pc first >=3D selectionInterval first ].!

Item was added:
+ ----- Method: DebuggerMethodMapForClosureCompiledMethods>>rangeForClosure: =
(in category 'source mapping') -----
+ rangeForClosure: aBlockClosure
+ 	"Answer the source range for a given block closure which must be on the sa=
me method as the receiver"
+=20
+ 	^(self rangeForPC: aBlockClosure startpc in: aBlockClosure method contextI=
sActiveContext: false) first
+ 		to: (self rangeForPC: aBlockClosure endPC in: aBlockClosure method contex=
tIsActiveContext: false) last!

Item was added:
+ ----- Method: DebuggerMethodMapForClosureCompiledMethods>>rangeForMethod: (=
in category 'source mapping') -----
+ rangeForMethod: method
+ 	^(self rangeForPC: method initialPC in: method contextIsActiveContext: fal=
se) first
+ 		to: (self rangeForPC: method endPC in: method contextIsActiveContext: fal=
se) last!


--===============7125992370315533226==--


From commits@source.squeak.org Fri Oct 18 23:46:44 2024
From: commits@source.squeak.org
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] The Trunk: Tools-eem.1275.mcz
Date: Fri, 18 Oct 2024 23:46:34 +0000
Message-ID: <20241018234639.7CE34583BFB@mail.squeak.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============8128855671273672449=="

--===============8128855671273672449==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

Eliot Miranda uploaded a new version of Tools to project The Trunk:
http://source.squeak.org/trunk/Tools-eem.1275.mcz

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Summary =3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Name: Tools-eem.1275
Author: eem
Time: 18 October 2024, 4:46:30.73875 pm
UUID: 156d30de-9f27-406f-96b5-1fd406a6ad41
Ancestors: Tools-eem.1274

Check for undeclared variables in run until expressions in the Debugger

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Diff against Tools-eem.1274 =3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Item was changed:
  ----- Method: Debugger>>runUntil (in category 'code pane menu') -----
  runUntil
  	"Step until an expression evaluates to other than false, reporting an erro=
r if it doesn't evaluate to true. Remember the expression in an inst var."
 =20
  	| expression receiver context method value |
  	expression :=3D UIManager default=20
  					request: 'run until expression is true (shift to disable ui update; sh=
ift to break).'
  					initialAnswer: (untilExpression ifNil: 'boolean expression').
  	(expression isNil or: [expression isEmpty]) ifTrue:
  		[^self].
  	untilExpression :=3D expression.
  	context :=3D self selectedContext.
  	receiver :=3D context receiver.
  	method :=3D receiver class evaluatorClass new=20
  				compiledMethodFor: untilExpression
  				in: context
  				to: receiver
  				notifying: nil
  				ifFail: [^ #failedDoit].
+ 	method allLiteralsDo:
+ 		[:l|
+ 		(l isVariableBinding and: [Undeclared includesAssociation: l]) ifTrue:
+ 			[^UIManager default inform: 'the expression contains an Undeclared varia=
ble!!!!']].
 =20
  	value :=3D self doStepUntil: [method valueWithReceiver: receiver arguments=
: {context}].
  	=09
  	(value ~~ self and: [value ~~ false and: [value ~~ true]]) ifTrue:
  		[UIManager default inform: 'expression ', (untilExpression contractTo: 40=
), ' answered ', (value printString contractTo: 20), '!!!!']!


--===============8128855671273672449==--


From commits@source.squeak.org Sat Oct 19 00:39:31 2024
From: commits@source.squeak.org
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] The Trunk: Tools-eem.1276.mcz
Date: Sat, 19 Oct 2024 00:39:22 +0000
Message-ID: <20241019003928.00141583C7E@mail.squeak.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============8600184951991395258=="

--===============8600184951991395258==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

Eliot Miranda uploaded a new version of Tools to project The Trunk:
http://source.squeak.org/trunk/Tools-eem.1276.mcz

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Summary =3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Name: Tools-eem.1276
Author: eem
Time: 18 October 2024, 5:39:19.241203 pm
UUID: 9c2920bd-3650-4813-a839-6b4bd1feb4ca
Ancestors: Tools-eem.1275

\Add missing definition for ChangeList's new inst var. Apologies. Don't under=
stand why it was not committed with the other changes.

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Diff against Tools-eem.1275 =3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Item was changed:
  CodeHolder subclass: #ChangeList
+ 	instanceVariableNames: 'changeList list listIndex listSelections file file=
ForChangeRecords lostMethodPointer showsVersions'
- 	instanceVariableNames: 'changeList list listIndex listSelections file lost=
MethodPointer showsVersions'
  	classVariableNames: ''
  	poolDictionaries: ''
  	category: 'Tools-Changes'!
 =20
  !ChangeList commentStamp: '<historical>' prior: 0!
  A ChangeList represents a list of changed methods that reside on a file in =
fileOut format.  The classes and methods in my list are not necessarily in th=
is image!!  Used as the model for both Version Lists and Changed Methods (in =
Screen Menu, Changes...).  Note that the two kinds of window have different c=
ontroller classes!!!!
 =20
  It holds three lists:
  	changeList - a list of ChangeRecords
  	list - a list of one-line printable headers
  	listSelections - a list of Booleans (true =3D selected, false =3D not sele=
cted) multiple OK.
  	listIndex=20
  Items that are removed (removeDoits, remove an item) are removed from all t=
hree lists.
  Most recently clicked item is the one showing in the bottom pane.!


--===============8600184951991395258==--


From commits@source.squeak.org Sat Oct 19 14:35:04 2024
From: commits@source.squeak.org
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] The Inbox: Tools-dtl.1277.mcz
Date: Sat, 19 Oct 2024 14:34:57 +0000
Message-ID: <20241019143500.0F65C583CA3@mail.squeak.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============8487908697088631255=="

--===============8487908697088631255==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

A new version of Tools was added to project The Inbox:
http://source.squeak.org/inbox/Tools-dtl.1277.mcz

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Summary =3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Name: Tools-dtl.1277
Author: dtl
Time: 19 October 2024, 10:34:55.015309 am
UUID: eaca989d-4997-466c-9033-a54aaa8f2d72
Ancestors: Tools-eem.1276

Adopt AndreasSystemProfiler previously hosted in package AndreasProfiler at r=
epository source.squeak.org/VMMaker. Prior version history remains in that re=
pository. Move both TimeProfileBrowser and AndreasSystemProfiler to Tools-Pro=
filer.

Original commit notice:

Name: AndreasProfiler-RJT.1
Author: RJT (unregistered author)
Time: 23 January 2013, 3:45:02.195 pm
UUID: 8f209849-3ec4-2548-9047-4fc87eb45976
Ancestors:=20

Released In Memory of Andreas Raab.  Author, Friend, Colleague.http://forum.w=
orld.st/In-Memory-of-Andreas-Raab-td4663424.html Released by Ron, Julie and D=
avid

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Diff against Tools-eem.1276 =3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Item was changed:
  SystemOrganization addCategory: #'Tools-ArchiveViewer'!
  SystemOrganization addCategory: #'Tools-Base'!
  SystemOrganization addCategory: #'Tools-Browser'!
  SystemOrganization addCategory: #'Tools-Changes'!
  SystemOrganization addCategory: #'Tools-Debugger'!
  SystemOrganization addCategory: #'Tools-Explorer'!
  SystemOrganization addCategory: #'Tools-File Contents Browser'!
  SystemOrganization addCategory: #'Tools-FileList'!
  SystemOrganization addCategory: #'Tools-Inspector'!
  SystemOrganization addCategory: #'Tools-Menus'!
  SystemOrganization addCategory: #'Tools-MethodFinder'!
  SystemOrganization addCategory: #'Tools-Process Browser'!
+ SystemOrganization addCategory: #'Tools-Profiler'!

Item was added:
+ Link subclass: #ASPTally
+ 	instanceVariableNames: 'class method receivers tally senders blockNesting'
+ 	classVariableNames: ''
+ 	poolDictionaries: ''
+ 	category: 'Tools-Profiler'!
+=20
+ !ASPTally commentStamp: '<historical>' prior: 0!
+ Tally for assembling system profiles. It's a subclass of Link so we can cha=
in tallies together in the receivers list.!

Item was added:
+ ----- Method: ASPTally class>>LICENSE (in category 'LICENSE') -----
+ LICENSE
+ 	^'Project Squeak
+=20
+ 	In Memory of Andreas Raab.  Author, Friend, Colleague. 	http://forum.world=
.st/In-Memory-of-Andreas-Raab-td4663424.html
+ 	Copyright (c) 2005-2013, 3D Immersive Collaboration Consulting, LLC., All =
Rights Reserved
+=20
+ 	Redistributions in source code form must reproduce the above
+ 	copyright and this condition.
+=20
+ Licensed under MIT License (MIT)
+ Permission is hereby granted, free of charge, to any person obtaining a cop=
y of this software and associated documentation files (the "Software"), to de=
al in the Software without restriction, including without limitation the righ=
ts to use, copy, modify, merge, publish, distribute, sublicense, and/or sell =
copies of the Software, and to permit persons to whom the Software is furnish=
ed to do so, subject to the following conditions:
+=20
+ The above copyright notice and this permission notice shall be included in =
all copies or substantial portions of the Software.
+=20
+ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR =
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITN=
ESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHO=
RS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, =
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR =
IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.=
'!

Item was added:
+ ----- Method: ASPTally>>asArray (in category 'converting') -----
+ asArray
+ 	^Array streamContents:
+ 		[:s| | link |
+ 		link :=3D self.
+ 		[link =3D=3D nil] whileFalse:
+ 			[s nextPut: link.
+ 			 link :=3D link nextLink]]!

Item was added:
+ ----- Method: ASPTally>>asSortedCollection: (in category 'converting') -----
+ asSortedCollection: aCollection
+ 	"Create a sorted collection from the given input"
+ 	^aCollection asSortedCollection:[:tA :tB| tA tally >=3D tB tally].!

Item was added:
+ ----- Method: ASPTally>>blockNestingCount (in category 'accessing') -----
+ blockNestingCount
+ 	^blockNesting!

Item was added:
+ ----- Method: ASPTally>>blockNestingCountOf: (in category 'tallying') -----
+ blockNestingCountOf: context
+ 	| count nest |
+ 	count :=3D 0.
+ 	nest :=3D context.
+ 	[nest closure notNil] whileTrue:
+ 		[count :=3D count + 1.
+ 		 nest :=3D nest closure outerContext].
+ 	^count!

Item was added:
+ ----- Method: ASPTally>>bump:fromSender: (in category 'report') -----
+ bump: hitCount fromSender: senderTally
+ 	"Add this hitCount to the total, and include a reference to the
+ 	sender responsible for the increment"
+ 	self bumpBy: hitCount.
+ 	senders ifNil:[senders :=3D OrderedCollection new].
+ 	senderTally ifNotNil:[senders add: (senderTally copyWithTally: hitCount)]!

Item was added:
+ ----- Method: ASPTally>>bumpBy: (in category 'tallying') -----
+ bumpBy: count
+ 	"Bump this tally by the specified amount"
+ 	tally :=3D tally + count!

Item was added:
+ ----- Method: ASPTally>>class:method: (in category 'initialize') -----
+ class: aClass method: aCompiledMethod
+ 	class :=3D aClass.
+ 	method :=3D aCompiledMethod.
+ 	tally :=3D blockNesting :=3D 0!

Item was added:
+ ----- Method: ASPTally>>class:method:nesting: (in category 'initialize') --=
---
+ class: aClass method: aCompiledMethod nesting: blockNestingCount
+ 	class :=3D aClass.
+ 	method :=3D aCompiledMethod.
+ 	blockNesting :=3D blockNestingCount.
+ 	tally :=3D 0!

Item was added:
+ ----- Method: ASPTally>>copyWithTally: (in category 'copying') -----
+ copyWithTally: hitCount
+ 	^(self class new class: class method: method) bumpBy: hitCount!

Item was added:
+ ----- Method: ASPTally>>fullPrintOn:tallyExact:orThreshold:time: (in catego=
ry 'report') -----
+ fullPrintOn: aStream tallyExact: isExact orThreshold: perCent time: totalTi=
me
+ 	| threshold | =20
+ 	isExact ifFalse: [threshold :=3D (perCent asFloat / 100 * tally) rounded].
+ 	aStream nextPutAll: '**Tree**'; cr.
+ 	self treePrintOn: aStream
+ 		tabs: OrderedCollection new
+ 		thisTab: ''
+ 		total: tally
+ 		totalTime: totalTime
+ 		tallyExact: isExact
+ 		orThreshold: threshold.
+ 	aStream nextPut: Character newPage; cr.
+ 	aStream nextPutAll: '**Leaves**'; cr.
+ 	self leavesPrintOn: aStream
+ 		tallyExact: isExact
+ 		orThreshold: threshold
+ 		time: totalTime.!

Item was added:
+ ----- Method: ASPTally>>into:fromSender: (in category 'report') -----
+ into: leafDict fromSender: senderTally
+ 	| leafNode |
+ 	leafNode :=3D leafDict
+ 					at: method
+ 					ifAbsentPut: [self class new class: class method: method].
+ 	leafNode bump: tally fromSender: senderTally!

Item was added:
+ ----- Method: ASPTally>>isPrimitives (in category 'testing') -----
+ isPrimitives
+ 	"Detect pseudo node used to carry tally of local hits"
+ 	^ method =3D=3D nil!

Item was added:
+ ----- Method: ASPTally>>leavesInto:fromSender: (in category 'report') -----
+ leavesInto: leafDict fromSender: senderTally
+ 	| rcvrs |
+ 	rcvrs :=3D self sonsOver: 0.
+ 	rcvrs size =3D 0
+ 		ifTrue: [self into: leafDict fromSender: senderTally]
+ 		ifFalse: [rcvrs do:[:node |
+ 				node isPrimitives
+ 					ifTrue: [node leavesInto: leafDict fromSender: senderTally]
+ 					ifFalse: [node leavesInto: leafDict fromSender: self]]]!

Item was added:
+ ----- Method: ASPTally>>leavesPrintOn:tallyExact:orThreshold:time: (in cate=
gory 'report') -----
+ leavesPrintOn: aStream tallyExact: isExact orThreshold: threshold time: tot=
alTime
+ 	| dict |
+ 	dict :=3D IdentityDictionary new: 100.
+ 	self leavesInto: dict fromSender: nil.
+ 	isExact ifTrue:[
+ 		(self asSortedCollection: dict) do: [:node |
+ 			node printOn: aStream total: tally totalTime: nil tallyExact: isExact.
+ 			node printSenderCountsOn: aStream].
+ 	] ifFalse:[
+ 		((self asSortedCollection: dict)
+ 			select: [:node | node tally > threshold]) do: [:node |
+ 				node printOn: aStream total: tally totalTime: totalTime tallyExact: isE=
xact].
+ 	].!

Item was added:
+ ----- Method: ASPTally>>maxClassNameSize (in category 'accessing') -----
+ maxClassNameSize
+ 	"Return the default maximum width of the class name alone"
+ 	^30!

Item was added:
+ ----- Method: ASPTally>>maxClassPlusSelectorSize (in category 'accessing') =
-----
+ maxClassPlusSelectorSize
+ 	"Return the default maximum width of the class plus selector together (not=
 counting the '>>')"
+ 	^60!

Item was added:
+ ----- Method: ASPTally>>maxTabs (in category 'accessing') -----
+ maxTabs
+ 	"Return the default number of tabs after which leading white space is comp=
ressed"
+ 	^36!

Item was added:
+ ----- Method: ASPTally>>method (in category 'accessing') -----
+ method
+ 	"Answer the CompiledMethod associated with this tally"
+ 	^method!

Item was added:
+ ----- Method: ASPTally>>primitives: (in category 'initialize') -----
+ primitives: anInteger
+ 	"Make the receiver be a node of unassigned primitives"
+ 	tally :=3D anInteger.
+ 	method :=3D nil. "indicates primitives"!

Item was added:
+ ----- Method: ASPTally>>printOn: (in category 'report') -----
+ printOn: aStream
+ 	blockNesting ifNotNil:
+ 		[blockNesting timesRepeat:
+ 			[aStream nextPutAll: '[] in ']].
+ 	aStream print: class; nextPutAll: '>>'; print: (method ifNotNil:[method se=
lector storeString]).
+ 	aStream nextPutAll: ' -- '; print: tally.!

Item was added:
+ ----- Method: ASPTally>>printOn:total:totalTime:tallyExact: (in category 'r=
eport') -----
+ printOn: aStream total: total totalTime: totalTime tallyExact: isExact=20
+ 	| className myTally aClass percentage |
+ 	isExact
+ 		ifTrue:
+ 			[myTally :=3D tally.
+ 			receivers ifNotNil:[receivers asArray do: [:r | myTally :=3D myTally - r=
 tally]].
+ 			aStream print: myTally; space]
+ 		ifFalse:
+ 			[(percentage :=3D tally asFloat / total * 100.0) printOn: aStream maxDec=
imalPlaces: 2.
+ 			aStream
+ 				nextPutAll: ' (';
+ 				nextPutAll: (percentage * totalTime / 100) rounded asStringWithCommas;
+ 				nextPutAll: ')  '].
+ 	self isPrimitives
+ 		ifTrue:
+ 			[aStream nextPutAll: 'primitives'; cr]
+ 		ifFalse:
+ 			[aClass :=3D method methodClass.
+ 			className :=3D aClass name contractTo: self maxClassNameSize.
+ 			blockNesting > 0 ifTrue:
+ 				[aStream
+ 					next: blockNesting put: $[;
+ 					next: blockNesting put: $];
+ 					space].
+ 			aStream
+ 				nextPutAll: class name;
+ 				nextPutAll: (aClass =3D class=20
+ 							ifTrue: [' ']
+ 							ifFalse: ['(' , aClass name , ') ']);
+ 				nextPutAll: (method selector
+ 								contractTo: self maxClassPlusSelectorSize - className size);
+ 				cr]!

Item was added:
+ ----- Method: ASPTally>>sonsOver: (in category 'report') -----
+ sonsOver: threshold
+ 	"Answer the sons with tallys over the given threshold"
+ 	receivers ifNil:[^#()].
+ 	^receivers asArray select:[:son | son tally > threshold].!

Item was added:
+ ----- Method: ASPTally>>tally (in category 'accessing') -----
+ tally
+ 	"Answer the tally count for this node"
+ 	^tally!

Item was added:
+ ----- Method: ASPTally>>tally:by: (in category 'tallying') -----
+ tally: context by: count
+ 	"Explicitly tally the specified context and its stack."
+ =09
+ 	^(context sender=20
+ 		ifNil: [ self bumpBy: count ]
+ 		ifNotNil: [ :root | self tally: root by: count ]) tallyPath: context by: =
count!

Item was added:
+ ----- Method: ASPTally>>tallyMethod:by: (in category 'tallying') -----
+ tallyMethod: aMethod by: count
+ 	"Called explicitly and needs to decrement receiver's tally count"
+ 	| node |
+ 	node :=3D receivers.
+ 	[node =3D=3D nil] whileFalse:
+ 		[node method =3D=3D aMethod ifTrue:[^node bumpBy: count].
+ 		node :=3D node nextLink].
+ 	node :=3D self class new class: aMethod methodClass method: aMethod.
+ 	node nextLink: receivers.
+ 	receivers :=3D node.
+ 	^node bumpBy: count!

Item was added:
+ ----- Method: ASPTally>>tallyPath:by: (in category 'tallying') -----
+ tallyPath: context by: count
+ 	"Tally the context chain"
+ 	| aMethod nesting theTally |
+ 	aMethod :=3D context method.
+ 	nesting :=3D self blockNestingCountOf: context.
+ 	theTally :=3D receivers.
+ 	[theTally =3D=3D nil] whileFalse:
+ 		[(theTally method =3D=3D aMethod
+ 		  and: [theTally blockNestingCount =3D nesting]) ifTrue:[^theTally bumpBy=
: count].
+ 		theTally :=3D theTally nextLink].
+ 	theTally :=3D self class new
+ 				class: context receiver class
+ 				method: aMethod
+ 				nesting: nesting.
+ 	theTally nextLink: receivers.
+ 	receivers :=3D theTally.
+ 	^theTally bumpBy: count!

Item was added:
+ ----- Method: ASPTally>>treePrintOn:tabs:thisTab:total:totalTime:tallyExact=
:orThreshold: (in category 'report') -----
+ treePrintOn: aStream tabs: tabs thisTab: myTab total: total totalTime: tota=
lTime tallyExact: isExact orThreshold: threshold=20
+ 	| sons sonTab |
+ 	tabs do: [:tab | aStream nextPutAll: tab].
+ 	tabs size > 0=20
+ 		ifTrue:[self printOn: aStream total: total totalTime: totalTime tallyExac=
t: isExact].
+ 	sons :=3D isExact ifTrue: [receivers] ifFalse: [self sonsOver: threshold].
+ 	sons isEmpty ifFalse:[
+ 		tabs addLast: myTab.
+ 		sons :=3D self asSortedCollection: sons.
+ 		1 to: sons size do:[:i |=20
+ 			sonTab :=3D i < sons size ifTrue: ['  |'] ifFalse: ['  '].
+ 			(sons at: i) treePrintOn: aStream
+ 						tabs: (tabs size < self maxTabs=20
+ 								ifTrue: [tabs]
+ 								ifFalse: [(tabs select: [:x | x =3D '[']) copyWith: '['])
+ 						thisTab: sonTab
+ 						total: total
+ 						totalTime: totalTime
+ 						tallyExact: isExact
+ 						orThreshold: threshold].
+ 			tabs removeLast]!

Item was added:
+ Object subclass: #AndreasSystemProfiler
+ 	instanceVariableNames: 'semaphore ticks profilerProcess tallyRoot vmStats =
totalTally totalTime startTime ticksPerMSec totalTicks'
+ 	classVariableNames: ''
+ 	poolDictionaries: ''
+ 	category: 'Tools-Profiler'!
+=20
+ !AndreasSystemProfiler commentStamp: 'eem 8/2/2013 13:45' prior: 0!
+ AndreasSystemProfiler instances observe and report the amount of time spent=
 in methods.  AndreasSystemProfiler uses sub-msec VM supported PC sampling.  =
AndreasSystemProfiler is a plug-in replacement for MessageTally.  It is more =
accurate because it uses VM support to tell it which primtiive was running wh=
en it took a sample.  MessageTally simply ascribes a primitive's cost to the =
method at the next suspendsion point, which, in some contexts, can yield wild=
ly misleading results.
+=20
+ 	AndreasSystemProfiler spyOn:  [20 timesRepeat:=20
+ 			[Transcript show: 100 factorial printString]]
+=20
+ NOTE: a higher-level user interface (combining the MessageTally result tree=
 with a method browser) is available from TimeProfileBrowser.  But you'll hav=
e to plumb AndreasSystemProfiler into TimeProfileBrowser yourself.
+=20
+ 	TimeProfileBrowser spyOn:  [20 timesRepeat:=20
+ 			[Transcript show: 100 factorial printString]]
+=20
+ 	In Memory of Andreas Raab.  Author, Friend, Colleague. 	http://forum.world=
.st/In-Memory-of-Andreas-Raab-td4663424.html
+ 	Released by Ron, Julie and David!

Item was added:
+ ----- Method: AndreasSystemProfiler class>>LICENSE (in category 'LICENSE') =
-----
+ LICENSE
+ 	^'Project Squeak
+=20
+ 	In Memory of Andreas Raab.  Author, Friend, Colleague. 	http://forum.world=
.st/In-Memory-of-Andreas-Raab-td4663424.html
+ 	Copyright (c) 2005-2013, 3D Immersive Collaboration Consulting, LLC., All =
Rights Reserved
+=20
+ 	Redistributions in source code form must reproduce the above
+ 	copyright and this condition.
+=20
+ Licensed under MIT License (MIT)
+ Permission is hereby granted, free of charge, to any person obtaining a cop=
y of this software and associated documentation files (the "Software"), to de=
al in the Software without restriction, including without limitation the righ=
ts to use, copy, modify, merge, publish, distribute, sublicense, and/or sell =
copies of the Software, and to permit persons to whom the Software is furnish=
ed to do so, subject to the following conditions:
+=20
+ The above copyright notice and this permission notice shall be included in =
all copies or substantial portions of the Software.
+=20
+ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR =
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITN=
ESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHO=
RS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, =
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR =
IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.=
'!

Item was added:
+ ----- Method: AndreasSystemProfiler class>>canWork (in category 'testing') =
-----
+ canWork
+ 	"
+ 	AndreasSystemProfiler canWork
+ 	"
+ 	Smalltalk highResClock =3D 0 ifTrue: [ ^false ].
+ 	[
+ 		Smalltalk profileSemaphore: nil.
+ 		Smalltalk profileStart: 0 ] on: Error do: [ ^false ].
+ 	^true!

Item was added:
+ ----- Method: AndreasSystemProfiler class>>default (in category 'spying') -=
----
+ default
+ 	^self new!

Item was added:
+ ----- Method: AndreasSystemProfiler class>>spyFor: (in category 'spying') -=
----
+ spyFor: seconds
+ 	"Run the system profiler for the specified number of seconds"
+ 	"AndreasSystemProfiler spyFor: 5"
+ 	^self spyOn:[(Delay forSeconds: seconds) wait].!

Item was added:
+ ----- Method: AndreasSystemProfiler class>>spyOn: (in category 'spying') --=
---
+ spyOn: aBlock
+ 	"AndreasSystemProfiler spyOn:[10000 timesRepeat: [3.14159 printString]]"
+ 	| profiler |
+ 	profiler :=3D self new.
+ 	^[profiler spyOn: aBlock] ensure: [profiler doReport]!

Item was added:
+ ----- Method: AndreasSystemProfiler class>>spyOnWorldFor: (in category 'spy=
ing') -----
+ spyOnWorldFor: seconds
+ 	"Run the system profiler for the specified number of seconds,
+ 	 spying on the morphic world in which it was launched.=20
+ 	 Handy for running Workspace do-its."
+=20
+ 	^self spyOn: [  | deadline |
+ 		deadline :=3D Time totalSeconds + seconds.
+ 		[Time totalSeconds < deadline]
+ 			whileTrue: [ World doOneCycle ]].!

Item was added:
+ ----- Method: AndreasSystemProfiler>>doReport (in category 'reporting') ---=
--
+ doReport
+ 	"Report the results of this profiler run"
+ 	UIManager default edit: self report label: 'Spy Results'.!

Item was added:
+ ----- Method: AndreasSystemProfiler>>report (in category 'reporting') -----
+ report
+ 	"Answer a report, with cutoff percentage of each element of the tree"
+ 	^String streamContents:[:s| self report: s].!

Item was added:
+ ----- Method: AndreasSystemProfiler>>report: (in category 'reporting') -----
+ report: strm=20
+ 	"Print a report, with cutoff percentage of each element of the tree=20
+ 	(leaves, roots, tree)=3D2, on the stream, strm."
+=20
+ 	self report: strm cutoff: 1!

Item was added:
+ ----- Method: AndreasSystemProfiler>>report:cutoff: (in category 'reporting=
') -----
+ report: strm cutoff: threshold=20
+ 	tallyRoot tally =3D 0 ifTrue:[
+ 		strm nextPutAll: ' - no tallies obtained'
+ 	] ifFalse:[
+ 		strm nextPutAll: 'Reporting - ', totalTally asStringWithCommas,' tallies,=
 ',
+ 							 totalTime asStringWithCommas, ' msec.'; cr; cr.
+ 		tallyRoot fullPrintOn: strm tallyExact: false orThreshold: threshold time=
: totalTime.
+ 	].
+ 	totalTime isZero ifFalse:[
+ 		self reportGCStatsOn: strm.
+ 		self reportProcessStatsOn: strm.
+ 	].!

Item was added:
+ ----- Method: AndreasSystemProfiler>>reportGCStatsOn: (in category 'reporti=
ng') -----
+ reportGCStatsOn: str
+ 	| oldSpaceEnd youngSpaceEnd memoryEnd fullGCs fullGCTime incrGCs incrGCTim=
e tenureCount upTime rootOverflows |
+ 	upTime :=3D totalTime.
+ 	oldSpaceEnd			:=3D vmStats at: 1.
+ 	youngSpaceEnd		:=3D vmStats at: 2.
+ 	memoryEnd			:=3D vmStats at: 3.
+ 	fullGCs				:=3D vmStats at: 7.
+ 	fullGCTime			:=3D vmStats at: 8.
+ 	incrGCs				:=3D vmStats at: 9.
+ 	incrGCTime			:=3D vmStats at: 10.
+ 	tenureCount			:=3D vmStats at: 11.
+ 	rootOverflows		:=3D vmStats at: 22.
+=20
+ 	str cr.
+ 	str	nextPutAll: '**Memory**'; cr.
+ 	str	nextPutAll:	'	old			';
+ 		nextPutAll: (oldSpaceEnd asStringWithCommasSigned: true); nextPutAll: ' b=
ytes'; cr.
+ 	str	nextPutAll: '	young		';
+ 		nextPutAll: ((youngSpaceEnd - oldSpaceEnd) asStringWithCommasSigned: true=
); nextPutAll: ' bytes'; cr.
+ 	str	nextPutAll: '	used		';
+ 		nextPutAll: (youngSpaceEnd asStringWithCommasSigned: true); nextPutAll: '=
 bytes'; cr.
+ 	str	nextPutAll: '	free		';
+ 		nextPutAll: ((memoryEnd - youngSpaceEnd) asStringWithCommasSigned: true);=
 nextPutAll: ' bytes'; cr.
+=20
+ 	str cr.
+ 	str	nextPutAll: '**GCs**'; cr.
+ 	str	nextPutAll: '	full			';
+ 		print: fullGCs; nextPutAll: ' totalling '; nextPutAll: fullGCTime asStrin=
gWithCommas; nextPutAll: 'ms (';
+ 		print: ((fullGCTime / upTime * 100) roundTo: 1.0);
+ 		nextPutAll: '% uptime)'.
+ 	fullGCs =3D 0 ifFalse:
+ 		[str	nextPutAll: ', avg '; print: ((fullGCTime / fullGCs) roundTo: 1.0); =
nextPutAll: 'ms'].
+ 	str	cr.
+ 	str	nextPutAll: '	incr		';
+ 		print: incrGCs; nextPutAll: ' totalling '; nextPutAll: incrGCTime asStrin=
gWithCommas; nextPutAll: 'ms (';
+ 		print: ((incrGCTime / upTime * 100) roundTo: 1.0);
+ 		nextPutAll: '% uptime)'.
+ 	incrGCs =3D 0 ifFalse:
+ 		[str nextPutAll:', avg '; print: ((incrGCTime / incrGCs) roundTo: 1.0); n=
extPutAll: 'ms'].
+ 	str cr.
+ 	str	nextPutAll: '	tenures		';
+ 		nextPutAll: tenureCount asStringWithCommas.
+ 	tenureCount =3D 0 ifFalse:
+ 		[str nextPutAll: ' (avg '; print: (incrGCs / tenureCount) asInteger; next=
PutAll: ' GCs/tenure)'].
+ 	str	cr.
+ 	str	nextPutAll: '	root table	';
+ 		nextPutAll: rootOverflows asStringWithCommas; nextPutAll:' overflows'.
+ 	str cr.
+ !

Item was added:
+ ----- Method: AndreasSystemProfiler>>reportProcessStatsOn: (in category 're=
porting') -----
+ reportProcessStatsOn: str
+ 	| totalSwitches pageOverflows pageDivorces actualSwitches |
+ 	vmStats size >=3D 61 ifFalse:[^self]. "don't try this on the closure VM"
+ 	totalSwitches :=3D vmStats at: 56.
+ 	actualSwitches :=3D totalSwitches - (2*totalTally). "exclude to/from profi=
ler"
+ 	pageOverflows :=3D vmStats at: 60.
+ 	pageDivorces :=3D vmStats at: 61.
+=20
+ 	str cr; nextPutAll: '**Processes**'; cr.
+ 	str tab; nextPutAll: 'Total process switches: '; print: totalSwitches; cr.
+ 	str tab; nextPutAll: 'Without Profiler: '; print: actualSwitches; cr.
+ 	str tab; nextPutAll: 'Stack page overflows: '; print: pageOverflows; cr.
+ 	str tab; nextPutAll: 'Stack page divorces: '; print: pageDivorces; cr!

Item was added:
+ ----- Method: AndreasSystemProfiler>>runProfilerProcess (in category 'profi=
ling') -----
+ runProfilerProcess
+ 	"Run the profiler process"
+ 	| process tallyStart tallyTicks tallyStop method leaf |
+ 	tallyRoot :=3D ASPTally new class: nil method: nil.
+ 	totalTally :=3D 0.
+ 	Smalltalk profileSemaphore: semaphore.
+ 	totalTicks :=3D 0.
+ 	tallyStart :=3D tallyStop :=3D Smalltalk highResClock.
+ 	[true] whileTrue:[
+ 		tallyStart :=3D tallyStop.
+ 		tallyStart :=3D Smalltalk highResClock.
+ 		Smalltalk profileStart: ticks. "run for n ticks"
+ 		semaphore wait.
+ 		tallyStop :=3D Smalltalk highResClock.
+ 		tallyTicks :=3D tallyStop - tallyStart.
+ 		totalTicks :=3D totalTicks + tallyTicks.
+ 		process :=3D Smalltalk profileSample.
+ 		method :=3D Smalltalk profilePrimitive.
+ 		totalTally :=3D totalTally + 1.
+ 		process ifNotNil:[
+ 			leaf :=3D tallyRoot tally: (process suspendedContext ifNil:[thisContext]=
) by: tallyTicks.
+ 			method ifNotNil:[leaf tallyMethod: method by: tallyTicks].
+ 		].
+ 	].
+ !

Item was added:
+ ----- Method: AndreasSystemProfiler>>spyOn: (in category 'profiling') -----
+ spyOn: aBlock
+ 	"Profile system activity during execution of aBlock.=20
+ 	The argument is the desired samples per *milli* second.
+ 	Mostly for polymorphism with MessageTally."
+ 	self startProfiling.
+ 	^ aBlock ensure:[self stopProfiling].
+ !

Item was added:
+ ----- Method: AndreasSystemProfiler>>startProfiling (in category 'profiling=
') -----
+ startProfiling
+ 	"Start the profiler process taking samplesPerMsec samples per *milli* seco=
nd"
+ 	| t0 tS |
+ 	semaphore :=3D Semaphore new.
+ 	"Run a 10 msec busy loop to figure out the ticks per msec"
+ 	"First step to the next clock granule"
+ 	t0 :=3D Time utcMicrosecondClock + 1000.
+ 	[(tS :=3D Time utcMicrosecondClock) >=3D t0] whileFalse.
+ 	"Now run for 10 ms"
+ 	ticksPerMSec :=3D Smalltalk highResClock.
+ 	[Time utcMicrosecondClock >=3D (tS + 10000)] whileFalse.
+ 	ticksPerMSec :=3D (Smalltalk highResClock - ticksPerMSec)=20
+ 						// (Time utcMicrosecondClock - tS).
+ 	"Try to get 10 samples per msec"
+ 	ticks :=3D ticksPerMSec // 10.
+ 	vmStats :=3D Smalltalk getVMParameters.
+ 	startTime :=3D Time utcMicrosecondClock.
+ 	profilerProcess :=3D [self runProfilerProcess] forkAt: Processor timingPri=
ority - 1
+=20
+ 	"How granular is the microsecond clock?  Not very..."
+ 	"| times st t nt |
+ 	times :=3D OrderedCollection with: (st :=3D t :=3D Time utcMicrosecondCloc=
k).
+ 	[times size < 100] whileTrue:
+ 		[[(nt :=3D Time utcMicrosecondClock) =3D t] whileTrue.
+ 		 times addLast: (t :=3D nt)].
+ 	times collect: [:time| time - st]"!

Item was added:
+ ----- Method: AndreasSystemProfiler>>stopProfiling (in category 'profiling'=
) -----
+ stopProfiling
+ 	"Stop the profiler process"
+ 	Smalltalk profileSemaphore: nil.
+ 	Smalltalk profileStart: 0. "<- profile stops now"
+ 	totalTime :=3D (Time utcMicrosecondClock - startTime) + 500 // 1000.
+ 	Smalltalk getVMParameters keysAndValuesDo:
+ 		[:idx :value|=20
+ 		value isInteger ifTrue: [vmStats at: idx put: (value - ((vmStats at: idx)=
 ifNil: [0]))]].
+ 	profilerProcess ifNotNil:
+ 		[profilerProcess suspend.
+ 		 profilerProcess :=3D nil]
+ !

Item was changed:
  MessageSet subclass: #TimeProfileBrowser
  	instanceVariableNames: 'block tally methodReferences'
  	classVariableNames: 'TextMenu'
  	poolDictionaries: ''
+ 	category: 'Tools-Profiler'!
- 	category: 'Tools-Debugger'!
 =20
  !TimeProfileBrowser commentStamp: '<historical>' prior: 0!
  A TimeProfileBrowser is a browser visualizing the runtime profile of an exe=
cuted Smalltalk block.  It is useful for finding performance bottlenecks in c=
ode. When optimizing code it can
  be hard to know what methods actually constitute the bulk of the execution =
time. Is it a few
  methods that take very long time to execute or is it perhaps a single metho=
d that gets executed a thousand times?
 =20
  The block is first spied on using a MessageTally instance (which has even m=
ore funtionality than used by the TimeProfileBrowser) which samples the block=
 during it's execution and collects the amount of time approximately spent in=
 the methods executed. Then the methods are shown in the browser with their r=
elative execution time in percent.
 =20
  Example:
  TimeProfileBrowser onBlock: [20 timesRepeat:  [Transcript show: 100 factori=
al printString]]
  !


--===============8487908697088631255==--


From lewis@mail.msen.com Sat Oct 19 14:42:04 2024
From: lewis@mail.msen.com
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] Re: AndreasProfiler (was Re: the form projector)
Date: Sat, 19 Oct 2024 10:38:17 -0400
Message-ID: <1729348904-998708@mid.hostedemail.com>
In-Reply-To:
 <CAC20JE2AsdJuMnC+iXOJeDAgNw7v5_7CqWsOU=2fQet7sOiPAA@mail.gmail.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============1363141685961132855=="

--===============1363141685961132855==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

On 2024-10-15T14:09:54-07:00, eliot.miranda(a)gmail.com wrote:
> On Tue, Oct 15, 2024 at 12:28â€¯PM Tim Rowledge <tim(a)rowledge.org> wrote:
> 
> >
> > > On 2024-10-15, at 12:02 PM, Eliot Miranda <eliot.miranda(a)gmail.com>
> > wrote:
> > >
> > > Use AndreasSystemProfiler at source.squeak.org/VMMaker; it is accurate
> > about primitives as well as normal methods, which isn't the case for the
> > TimeProfiler.
> >
> > Is there any good reason we don't have that in image by default? It
> > doesn't appear to be a huge package, or dangerous.
> >
> 
> IMO it should replace TimeProfiler. There is simply the need/desire to keep
> the copyright notices that assert Andreas' authorship of the code.
> 

I submitted Tools-dtl.1277 to the inbox for consideration.

Dave


---
Sent from Squeak Inbox Talk

--===============1363141685961132855==--


From tim@rowledge.org Sat Oct 19 16:10:11 2024
From: Tim Rowledge <tim@rowledge.org>
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] Re: AndreasProfiler (was Re: the form projector)
Date: Sat, 19 Oct 2024 09:10:03 -0700
Message-ID: <A557C299-7FFE-48B0-B693-055A4C8450FB@rowledge.org>
In-Reply-To: <1729348904-998708@mid.hostedemail.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============0724771767029657180=="

--===============0724771767029657180==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable



> On 2024-10-19, at 7:38 AM, lewis(a)mail.msen.com wrote:
>=20
> I submitted Tools-dtl.1277 to the inbox for consideration.

I like that.

tim
--
tim Rowledge; tim(a)rowledge.org; http://www.rowledge.org/tim
Useful random insult:- A gross ignoramus -- 144 times worse than an ordinary =
ignoramus.



--===============0724771767029657180==--


From drurowin@gmail.com Sat Oct 19 19:34:54 2024
From: Lauren Pullen <drurowin@gmail.com>
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] BitBlt ray casting, now with portals
Date: Sat, 19 Oct 2024 13:34:41 -0600
Message-ID: <da96835e-e706-df79-ea19-08c77268b7e7@gmail.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============0066104467511169209=="

--===============0066104467511169209==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit

Hi List,

The biggest unique feature of the ray caster, stage links, is now live
in the BitBlt rendering engine as of RayCaster-Core-lrnp.14.  Try it in
the Morphic Dungeon in the BitBlt modes.

Stage links allow you to seamlessly stitch maps together in 3D, much
like how certain older games like the GBA Pokemon games can combine
smaller overworld maps into one big one without using loading zones.
Because this is in first person, though, you can also use it to change
map scales (an overworld scale and an inside scale) and create illegal
geometry without overlaps.  In something like Pokemon, drawing the
inside of a building from the overworld would result in tile overlaps
because the inside uses more tiles than the overworld map has room for,
hence the loading zone.

Because how I'm doing GPU acceleration there is no support at present
for the GPU rendering engine, but that will be coming soon.

--===============0066104467511169209==--


From marcel.taeumel@hpi.de Sun Oct 20 18:49:05 2024
From: Marcel Taeumel <marcel.taeumel@hpi.de>
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] Re: The Inbox: Tools-dtl.1277.mcz
Date: Sun, 20 Oct 2024 11:48:47 -0700
Message-ID: <d47fabd5-8b33-429f-9021-c66b989f9d47@hpi.de>
In-Reply-To: <20241019143500.0F65C583CA3@mail.squeak.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============8942170890170918458=="

--===============8942170890170918458==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

Thank you Dave! =3D)

Am 19.10.2024 um 07:34 schrieb commits(a)source.squeak.org:
> A new version of Tools was added to project The Inbox:
> http://source.squeak.org/inbox/Tools-dtl.1277.mcz
>
> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Summary =3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
>
> Name: Tools-dtl.1277
> Author: dtl
> Time: 19 October 2024, 10:34:55.015309 am
> UUID: eaca989d-4997-466c-9033-a54aaa8f2d72
> Ancestors: Tools-eem.1276
>
> Adopt AndreasSystemProfiler previously hosted in package AndreasProfiler at=
 repository source.squeak.org/VMMaker. Prior version history remains in that =
repository. Move both TimeProfileBrowser and AndreasSystemProfiler to Tools-P=
rofiler.
>
> Original commit notice:
>
> Name: AndreasProfiler-RJT.1
> Author: RJT (unregistered author)
> Time: 23 January 2013, 3:45:02.195 pm
> UUID: 8f209849-3ec4-2548-9047-4fc87eb45976
> Ancestors:
>
> Released In Memory of Andreas Raab.  Author, Friend, Colleague.http://forum=
.world.st/In-Memory-of-Andreas-Raab-td4663424.html Released by Ron, Julie and=
 David
>
> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Diff against Tools-eem.1276 =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
>
> Item was changed:
>    SystemOrganization addCategory: #'Tools-ArchiveViewer'!
>    SystemOrganization addCategory: #'Tools-Base'!
>    SystemOrganization addCategory: #'Tools-Browser'!
>    SystemOrganization addCategory: #'Tools-Changes'!
>    SystemOrganization addCategory: #'Tools-Debugger'!
>    SystemOrganization addCategory: #'Tools-Explorer'!
>    SystemOrganization addCategory: #'Tools-File Contents Browser'!
>    SystemOrganization addCategory: #'Tools-FileList'!
>    SystemOrganization addCategory: #'Tools-Inspector'!
>    SystemOrganization addCategory: #'Tools-Menus'!
>    SystemOrganization addCategory: #'Tools-MethodFinder'!
>    SystemOrganization addCategory: #'Tools-Process Browser'!
> + SystemOrganization addCategory: #'Tools-Profiler'!
>
> Item was added:
> + Link subclass: #ASPTally
> + 	instanceVariableNames: 'class method receivers tally senders blockNestin=
g'
> + 	classVariableNames: ''
> + 	poolDictionaries: ''
> + 	category: 'Tools-Profiler'!
> +
> + !ASPTally commentStamp: '<historical>' prior: 0!
> + Tally for assembling system profiles. It's a subclass of Link so we can c=
hain tallies together in the receivers list.!
>
> Item was added:
> + ----- Method: ASPTally class>>LICENSE (in category 'LICENSE') -----
> + LICENSE
> + 	^'Project Squeak
> +
> + 	In Memory of Andreas Raab.  Author, Friend, Colleague. 	http://forum.wor=
ld.st/In-Memory-of-Andreas-Raab-td4663424.html
> + 	Copyright (c) 2005-2013, 3D Immersive Collaboration Consulting, LLC., Al=
l Rights Reserved
> +
> + 	Redistributions in source code form must reproduce the above
> + 	copyright and this condition.
> +
> + Licensed under MIT License (MIT)
> + Permission is hereby granted, free of charge, to any person obtaining a c=
opy of this software and associated documentation files (the "Software"), to =
deal in the Software without restriction, including without limitation the ri=
ghts to use, copy, modify, merge, publish, distribute, sublicense, and/or sel=
l copies of the Software, and to permit persons to whom the Software is furni=
shed to do so, subject to the following conditions:
> +
> + The above copyright notice and this permission notice shall be included i=
n all copies or substantial portions of the Software.
> +
> + THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS O=
R IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FI=
TNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUT=
HORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY=
, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF O=
R IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWAR=
E.'!
>
> Item was added:
> + ----- Method: ASPTally>>asArray (in category 'converting') -----
> + asArray
> + 	^Array streamContents:
> + 		[:s| | link |
> + 		link :=3D self.
> + 		[link =3D=3D nil] whileFalse:
> + 			[s nextPut: link.
> + 			 link :=3D link nextLink]]!
>
> Item was added:
> + ----- Method: ASPTally>>asSortedCollection: (in category 'converting') --=
---
> + asSortedCollection: aCollection
> + 	"Create a sorted collection from the given input"
> + 	^aCollection asSortedCollection:[:tA :tB| tA tally >=3D tB tally].!
>
> Item was added:
> + ----- Method: ASPTally>>blockNestingCount (in category 'accessing') -----
> + blockNestingCount
> + 	^blockNesting!
>
> Item was added:
> + ----- Method: ASPTally>>blockNestingCountOf: (in category 'tallying') ---=
--
> + blockNestingCountOf: context
> + 	| count nest |
> + 	count :=3D 0.
> + 	nest :=3D context.
> + 	[nest closure notNil] whileTrue:
> + 		[count :=3D count + 1.
> + 		 nest :=3D nest closure outerContext].
> + 	^count!
>
> Item was added:
> + ----- Method: ASPTally>>bump:fromSender: (in category 'report') -----
> + bump: hitCount fromSender: senderTally
> + 	"Add this hitCount to the total, and include a reference to the
> + 	sender responsible for the increment"
> + 	self bumpBy: hitCount.
> + 	senders ifNil:[senders :=3D OrderedCollection new].
> + 	senderTally ifNotNil:[senders add: (senderTally copyWithTally: hitCount)=
]!
>
> Item was added:
> + ----- Method: ASPTally>>bumpBy: (in category 'tallying') -----
> + bumpBy: count
> + 	"Bump this tally by the specified amount"
> + 	tally :=3D tally + count!
>
> Item was added:
> + ----- Method: ASPTally>>class:method: (in category 'initialize') -----
> + class: aClass method: aCompiledMethod
> + 	class :=3D aClass.
> + 	method :=3D aCompiledMethod.
> + 	tally :=3D blockNesting :=3D 0!
>
> Item was added:
> + ----- Method: ASPTally>>class:method:nesting: (in category 'initialize') =
-----
> + class: aClass method: aCompiledMethod nesting: blockNestingCount
> + 	class :=3D aClass.
> + 	method :=3D aCompiledMethod.
> + 	blockNesting :=3D blockNestingCount.
> + 	tally :=3D 0!
>
> Item was added:
> + ----- Method: ASPTally>>copyWithTally: (in category 'copying') -----
> + copyWithTally: hitCount
> + 	^(self class new class: class method: method) bumpBy: hitCount!
>
> Item was added:
> + ----- Method: ASPTally>>fullPrintOn:tallyExact:orThreshold:time: (in cate=
gory 'report') -----
> + fullPrintOn: aStream tallyExact: isExact orThreshold: perCent time: total=
Time
> + 	| threshold |
> + 	isExact ifFalse: [threshold :=3D (perCent asFloat / 100 * tally) rounded=
].
> + 	aStream nextPutAll: '**Tree**'; cr.
> + 	self treePrintOn: aStream
> + 		tabs: OrderedCollection new
> + 		thisTab: ''
> + 		total: tally
> + 		totalTime: totalTime
> + 		tallyExact: isExact
> + 		orThreshold: threshold.
> + 	aStream nextPut: Character newPage; cr.
> + 	aStream nextPutAll: '**Leaves**'; cr.
> + 	self leavesPrintOn: aStream
> + 		tallyExact: isExact
> + 		orThreshold: threshold
> + 		time: totalTime.!
>
> Item was added:
> + ----- Method: ASPTally>>into:fromSender: (in category 'report') -----
> + into: leafDict fromSender: senderTally
> + 	| leafNode |
> + 	leafNode :=3D leafDict
> + 					at: method
> + 					ifAbsentPut: [self class new class: class method: method].
> + 	leafNode bump: tally fromSender: senderTally!
>
> Item was added:
> + ----- Method: ASPTally>>isPrimitives (in category 'testing') -----
> + isPrimitives
> + 	"Detect pseudo node used to carry tally of local hits"
> + 	^ method =3D=3D nil!
>
> Item was added:
> + ----- Method: ASPTally>>leavesInto:fromSender: (in category 'report') ---=
--
> + leavesInto: leafDict fromSender: senderTally
> + 	| rcvrs |
> + 	rcvrs :=3D self sonsOver: 0.
> + 	rcvrs size =3D 0
> + 		ifTrue: [self into: leafDict fromSender: senderTally]
> + 		ifFalse: [rcvrs do:[:node |
> + 				node isPrimitives
> + 					ifTrue: [node leavesInto: leafDict fromSender: senderTally]
> + 					ifFalse: [node leavesInto: leafDict fromSender: self]]]!
>
> Item was added:
> + ----- Method: ASPTally>>leavesPrintOn:tallyExact:orThreshold:time: (in ca=
tegory 'report') -----
> + leavesPrintOn: aStream tallyExact: isExact orThreshold: threshold time: t=
otalTime
> + 	| dict |
> + 	dict :=3D IdentityDictionary new: 100.
> + 	self leavesInto: dict fromSender: nil.
> + 	isExact ifTrue:[
> + 		(self asSortedCollection: dict) do: [:node |
> + 			node printOn: aStream total: tally totalTime: nil tallyExact: isExact.
> + 			node printSenderCountsOn: aStream].
> + 	] ifFalse:[
> + 		((self asSortedCollection: dict)
> + 			select: [:node | node tally > threshold]) do: [:node |
> + 				node printOn: aStream total: tally totalTime: totalTime tallyExact: i=
sExact].
> + 	].!
>
> Item was added:
> + ----- Method: ASPTally>>maxClassNameSize (in category 'accessing') -----
> + maxClassNameSize
> + 	"Return the default maximum width of the class name alone"
> + 	^30!
>
> Item was added:
> + ----- Method: ASPTally>>maxClassPlusSelectorSize (in category 'accessing'=
) -----
> + maxClassPlusSelectorSize
> + 	"Return the default maximum width of the class plus selector together (n=
ot counting the '>>')"
> + 	^60!
>
> Item was added:
> + ----- Method: ASPTally>>maxTabs (in category 'accessing') -----
> + maxTabs
> + 	"Return the default number of tabs after which leading white space is co=
mpressed"
> + 	^36!
>
> Item was added:
> + ----- Method: ASPTally>>method (in category 'accessing') -----
> + method
> + 	"Answer the CompiledMethod associated with this tally"
> + 	^method!
>
> Item was added:
> + ----- Method: ASPTally>>primitives: (in category 'initialize') -----
> + primitives: anInteger
> + 	"Make the receiver be a node of unassigned primitives"
> + 	tally :=3D anInteger.
> + 	method :=3D nil. "indicates primitives"!
>
> Item was added:
> + ----- Method: ASPTally>>printOn: (in category 'report') -----
> + printOn: aStream
> + 	blockNesting ifNotNil:
> + 		[blockNesting timesRepeat:
> + 			[aStream nextPutAll: '[] in ']].
> + 	aStream print: class; nextPutAll: '>>'; print: (method ifNotNil:[method =
selector storeString]).
> + 	aStream nextPutAll: ' -- '; print: tally.!
>
> Item was added:
> + ----- Method: ASPTally>>printOn:total:totalTime:tallyExact: (in category =
'report') -----
> + printOn: aStream total: total totalTime: totalTime tallyExact: isExact
> + 	| className myTally aClass percentage |
> + 	isExact
> + 		ifTrue:
> + 			[myTally :=3D tally.
> + 			receivers ifNotNil:[receivers asArray do: [:r | myTally :=3D myTally -=
 r tally]].
> + 			aStream print: myTally; space]
> + 		ifFalse:
> + 			[(percentage :=3D tally asFloat / total * 100.0) printOn: aStream maxD=
ecimalPlaces: 2.
> + 			aStream
> + 				nextPutAll: ' (';
> + 				nextPutAll: (percentage * totalTime / 100) rounded asStringWithCommas;
> + 				nextPutAll: ')  '].
> + 	self isPrimitives
> + 		ifTrue:
> + 			[aStream nextPutAll: 'primitives'; cr]
> + 		ifFalse:
> + 			[aClass :=3D method methodClass.
> + 			className :=3D aClass name contractTo: self maxClassNameSize.
> + 			blockNesting > 0 ifTrue:
> + 				[aStream
> + 					next: blockNesting put: $[;
> + 					next: blockNesting put: $];
> + 					space].
> + 			aStream
> + 				nextPutAll: class name;
> + 				nextPutAll: (aClass =3D class
> + 							ifTrue: [' ']
> + 							ifFalse: ['(' , aClass name , ') ']);
> + 				nextPutAll: (method selector
> + 								contractTo: self maxClassPlusSelectorSize - className size);
> + 				cr]!
>
> Item was added:
> + ----- Method: ASPTally>>sonsOver: (in category 'report') -----
> + sonsOver: threshold
> + 	"Answer the sons with tallys over the given threshold"
> + 	receivers ifNil:[^#()].
> + 	^receivers asArray select:[:son | son tally > threshold].!
>
> Item was added:
> + ----- Method: ASPTally>>tally (in category 'accessing') -----
> + tally
> + 	"Answer the tally count for this node"
> + 	^tally!
>
> Item was added:
> + ----- Method: ASPTally>>tally:by: (in category 'tallying') -----
> + tally: context by: count
> + 	"Explicitly tally the specified context and its stack."
> + =09
> + 	^(context sender
> + 		ifNil: [ self bumpBy: count ]
> + 		ifNotNil: [ :root | self tally: root by: count ]) tallyPath: context by=
: count!
>
> Item was added:
> + ----- Method: ASPTally>>tallyMethod:by: (in category 'tallying') -----
> + tallyMethod: aMethod by: count
> + 	"Called explicitly and needs to decrement receiver's tally count"
> + 	| node |
> + 	node :=3D receivers.
> + 	[node =3D=3D nil] whileFalse:
> + 		[node method =3D=3D aMethod ifTrue:[^node bumpBy: count].
> + 		node :=3D node nextLink].
> + 	node :=3D self class new class: aMethod methodClass method: aMethod.
> + 	node nextLink: receivers.
> + 	receivers :=3D node.
> + 	^node bumpBy: count!
>
> Item was added:
> + ----- Method: ASPTally>>tallyPath:by: (in category 'tallying') -----
> + tallyPath: context by: count
> + 	"Tally the context chain"
> + 	| aMethod nesting theTally |
> + 	aMethod :=3D context method.
> + 	nesting :=3D self blockNestingCountOf: context.
> + 	theTally :=3D receivers.
> + 	[theTally =3D=3D nil] whileFalse:
> + 		[(theTally method =3D=3D aMethod
> + 		  and: [theTally blockNestingCount =3D nesting]) ifTrue:[^theTally bump=
By: count].
> + 		theTally :=3D theTally nextLink].
> + 	theTally :=3D self class new
> + 				class: context receiver class
> + 				method: aMethod
> + 				nesting: nesting.
> + 	theTally nextLink: receivers.
> + 	receivers :=3D theTally.
> + 	^theTally bumpBy: count!
>
> Item was added:
> + ----- Method: ASPTally>>treePrintOn:tabs:thisTab:total:totalTime:tallyExa=
ct:orThreshold: (in category 'report') -----
> + treePrintOn: aStream tabs: tabs thisTab: myTab total: total totalTime: to=
talTime tallyExact: isExact orThreshold: threshold
> + 	| sons sonTab |
> + 	tabs do: [:tab | aStream nextPutAll: tab].
> + 	tabs size > 0
> + 		ifTrue:[self printOn: aStream total: total totalTime: totalTime tallyEx=
act: isExact].
> + 	sons :=3D isExact ifTrue: [receivers] ifFalse: [self sonsOver: threshold=
].
> + 	sons isEmpty ifFalse:[
> + 		tabs addLast: myTab.
> + 		sons :=3D self asSortedCollection: sons.
> + 		1 to: sons size do:[:i |
> + 			sonTab :=3D i < sons size ifTrue: ['  |'] ifFalse: ['  '].
> + 			(sons at: i) treePrintOn: aStream
> + 						tabs: (tabs size < self maxTabs
> + 								ifTrue: [tabs]
> + 								ifFalse: [(tabs select: [:x | x =3D '[']) copyWith: '['])
> + 						thisTab: sonTab
> + 						total: total
> + 						totalTime: totalTime
> + 						tallyExact: isExact
> + 						orThreshold: threshold].
> + 			tabs removeLast]!
>
> Item was added:
> + Object subclass: #AndreasSystemProfiler
> + 	instanceVariableNames: 'semaphore ticks profilerProcess tallyRoot vmStat=
s totalTally totalTime startTime ticksPerMSec totalTicks'
> + 	classVariableNames: ''
> + 	poolDictionaries: ''
> + 	category: 'Tools-Profiler'!
> +
> + !AndreasSystemProfiler commentStamp: 'eem 8/2/2013 13:45' prior: 0!
> + AndreasSystemProfiler instances observe and report the amount of time spe=
nt in methods.  AndreasSystemProfiler uses sub-msec VM supported PC sampling.=
  AndreasSystemProfiler is a plug-in replacement for MessageTally.  It is mor=
e accurate because it uses VM support to tell it which primtiive was running =
when it took a sample.  MessageTally simply ascribes a primitive's cost to th=
e method at the next suspendsion point, which, in some contexts, can yield wi=
ldly misleading results.
> +
> + 	AndreasSystemProfiler spyOn:  [20 timesRepeat:
> + 			[Transcript show: 100 factorial printString]]
> +
> + NOTE: a higher-level user interface (combining the MessageTally result tr=
ee with a method browser) is available from TimeProfileBrowser.  But you'll h=
ave to plumb AndreasSystemProfiler into TimeProfileBrowser yourself.
> +
> + 	TimeProfileBrowser spyOn:  [20 timesRepeat:
> + 			[Transcript show: 100 factorial printString]]
> +
> + 	In Memory of Andreas Raab.  Author, Friend, Colleague. 	http://forum.wor=
ld.st/In-Memory-of-Andreas-Raab-td4663424.html
> + 	Released by Ron, Julie and David!
>
> Item was added:
> + ----- Method: AndreasSystemProfiler class>>LICENSE (in category 'LICENSE'=
) -----
> + LICENSE
> + 	^'Project Squeak
> +
> + 	In Memory of Andreas Raab.  Author, Friend, Colleague. 	http://forum.wor=
ld.st/In-Memory-of-Andreas-Raab-td4663424.html
> + 	Copyright (c) 2005-2013, 3D Immersive Collaboration Consulting, LLC., Al=
l Rights Reserved
> +
> + 	Redistributions in source code form must reproduce the above
> + 	copyright and this condition.
> +
> + Licensed under MIT License (MIT)
> + Permission is hereby granted, free of charge, to any person obtaining a c=
opy of this software and associated documentation files (the "Software"), to =
deal in the Software without restriction, including without limitation the ri=
ghts to use, copy, modify, merge, publish, distribute, sublicense, and/or sel=
l copies of the Software, and to permit persons to whom the Software is furni=
shed to do so, subject to the following conditions:
> +
> + The above copyright notice and this permission notice shall be included i=
n all copies or substantial portions of the Software.
> +
> + THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS O=
R IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FI=
TNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUT=
HORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY=
, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF O=
R IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWAR=
E.'!
>
> Item was added:
> + ----- Method: AndreasSystemProfiler class>>canWork (in category 'testing'=
) -----
> + canWork
> + 	"
> + 	AndreasSystemProfiler canWork
> + 	"
> + 	Smalltalk highResClock =3D 0 ifTrue: [ ^false ].
> + 	[
> + 		Smalltalk profileSemaphore: nil.
> + 		Smalltalk profileStart: 0 ] on: Error do: [ ^false ].
> + 	^true!
>
> Item was added:
> + ----- Method: AndreasSystemProfiler class>>default (in category 'spying')=
 -----
> + default
> + 	^self new!
>
> Item was added:
> + ----- Method: AndreasSystemProfiler class>>spyFor: (in category 'spying')=
 -----
> + spyFor: seconds
> + 	"Run the system profiler for the specified number of seconds"
> + 	"AndreasSystemProfiler spyFor: 5"
> + 	^self spyOn:[(Delay forSeconds: seconds) wait].!
>
> Item was added:
> + ----- Method: AndreasSystemProfiler class>>spyOn: (in category 'spying') =
-----
> + spyOn: aBlock
> + 	"AndreasSystemProfiler spyOn:[10000 timesRepeat: [3.14159 printString]]"
> + 	| profiler |
> + 	profiler :=3D self new.
> + 	^[profiler spyOn: aBlock] ensure: [profiler doReport]!
>
> Item was added:
> + ----- Method: AndreasSystemProfiler class>>spyOnWorldFor: (in category 's=
pying') -----
> + spyOnWorldFor: seconds
> + 	"Run the system profiler for the specified number of seconds,
> + 	 spying on the morphic world in which it was launched.
> + 	 Handy for running Workspace do-its."
> +
> + 	^self spyOn: [  | deadline |
> + 		deadline :=3D Time totalSeconds + seconds.
> + 		[Time totalSeconds < deadline]
> + 			whileTrue: [ World doOneCycle ]].!
>
> Item was added:
> + ----- Method: AndreasSystemProfiler>>doReport (in category 'reporting') -=
----
> + doReport
> + 	"Report the results of this profiler run"
> + 	UIManager default edit: self report label: 'Spy Results'.!
>
> Item was added:
> + ----- Method: AndreasSystemProfiler>>report (in category 'reporting') ---=
--
> + report
> + 	"Answer a report, with cutoff percentage of each element of the tree"
> + 	^String streamContents:[:s| self report: s].!
>
> Item was added:
> + ----- Method: AndreasSystemProfiler>>report: (in category 'reporting') --=
---
> + report: strm
> + 	"Print a report, with cutoff percentage of each element of the tree
> + 	(leaves, roots, tree)=3D2, on the stream, strm."
> +
> + 	self report: strm cutoff: 1!
>
> Item was added:
> + ----- Method: AndreasSystemProfiler>>report:cutoff: (in category 'reporti=
ng') -----
> + report: strm cutoff: threshold
> + 	tallyRoot tally =3D 0 ifTrue:[
> + 		strm nextPutAll: ' - no tallies obtained'
> + 	] ifFalse:[
> + 		strm nextPutAll: 'Reporting - ', totalTally asStringWithCommas,' tallie=
s, ',
> + 							 totalTime asStringWithCommas, ' msec.'; cr; cr.
> + 		tallyRoot fullPrintOn: strm tallyExact: false orThreshold: threshold ti=
me: totalTime.
> + 	].
> + 	totalTime isZero ifFalse:[
> + 		self reportGCStatsOn: strm.
> + 		self reportProcessStatsOn: strm.
> + 	].!
>
> Item was added:
> + ----- Method: AndreasSystemProfiler>>reportGCStatsOn: (in category 'repor=
ting') -----
> + reportGCStatsOn: str
> + 	| oldSpaceEnd youngSpaceEnd memoryEnd fullGCs fullGCTime incrGCs incrGCT=
ime tenureCount upTime rootOverflows |
> + 	upTime :=3D totalTime.
> + 	oldSpaceEnd			:=3D vmStats at: 1.
> + 	youngSpaceEnd		:=3D vmStats at: 2.
> + 	memoryEnd			:=3D vmStats at: 3.
> + 	fullGCs				:=3D vmStats at: 7.
> + 	fullGCTime			:=3D vmStats at: 8.
> + 	incrGCs				:=3D vmStats at: 9.
> + 	incrGCTime			:=3D vmStats at: 10.
> + 	tenureCount			:=3D vmStats at: 11.
> + 	rootOverflows		:=3D vmStats at: 22.
> +
> + 	str cr.
> + 	str	nextPutAll: '**Memory**'; cr.
> + 	str	nextPutAll:	'	old			';
> + 		nextPutAll: (oldSpaceEnd asStringWithCommasSigned: true); nextPutAll: '=
 bytes'; cr.
> + 	str	nextPutAll: '	young		';
> + 		nextPutAll: ((youngSpaceEnd - oldSpaceEnd) asStringWithCommasSigned: tr=
ue); nextPutAll: ' bytes'; cr.
> + 	str	nextPutAll: '	used		';
> + 		nextPutAll: (youngSpaceEnd asStringWithCommasSigned: true); nextPutAll:=
 ' bytes'; cr.
> + 	str	nextPutAll: '	free		';
> + 		nextPutAll: ((memoryEnd - youngSpaceEnd) asStringWithCommasSigned: true=
); nextPutAll: ' bytes'; cr.
> +
> + 	str cr.
> + 	str	nextPutAll: '**GCs**'; cr.
> + 	str	nextPutAll: '	full			';
> + 		print: fullGCs; nextPutAll: ' totalling '; nextPutAll: fullGCTime asStr=
ingWithCommas; nextPutAll: 'ms (';
> + 		print: ((fullGCTime / upTime * 100) roundTo: 1.0);
> + 		nextPutAll: '% uptime)'.
> + 	fullGCs =3D 0 ifFalse:
> + 		[str	nextPutAll: ', avg '; print: ((fullGCTime / fullGCs) roundTo: 1.0)=
; nextPutAll: 'ms'].
> + 	str	cr.
> + 	str	nextPutAll: '	incr		';
> + 		print: incrGCs; nextPutAll: ' totalling '; nextPutAll: incrGCTime asStr=
ingWithCommas; nextPutAll: 'ms (';
> + 		print: ((incrGCTime / upTime * 100) roundTo: 1.0);
> + 		nextPutAll: '% uptime)'.
> + 	incrGCs =3D 0 ifFalse:
> + 		[str nextPutAll:', avg '; print: ((incrGCTime / incrGCs) roundTo: 1.0);=
 nextPutAll: 'ms'].
> + 	str cr.
> + 	str	nextPutAll: '	tenures		';
> + 		nextPutAll: tenureCount asStringWithCommas.
> + 	tenureCount =3D 0 ifFalse:
> + 		[str nextPutAll: ' (avg '; print: (incrGCs / tenureCount) asInteger; ne=
xtPutAll: ' GCs/tenure)'].
> + 	str	cr.
> + 	str	nextPutAll: '	root table	';
> + 		nextPutAll: rootOverflows asStringWithCommas; nextPutAll:' overflows'.
> + 	str cr.
> + !
>
> Item was added:
> + ----- Method: AndreasSystemProfiler>>reportProcessStatsOn: (in category '=
reporting') -----
> + reportProcessStatsOn: str
> + 	| totalSwitches pageOverflows pageDivorces actualSwitches |
> + 	vmStats size >=3D 61 ifFalse:[^self]. "don't try this on the closure VM"
> + 	totalSwitches :=3D vmStats at: 56.
> + 	actualSwitches :=3D totalSwitches - (2*totalTally). "exclude to/from pro=
filer"
> + 	pageOverflows :=3D vmStats at: 60.
> + 	pageDivorces :=3D vmStats at: 61.
> +
> + 	str cr; nextPutAll: '**Processes**'; cr.
> + 	str tab; nextPutAll: 'Total process switches: '; print: totalSwitches; c=
r.
> + 	str tab; nextPutAll: 'Without Profiler: '; print: actualSwitches; cr.
> + 	str tab; nextPutAll: 'Stack page overflows: '; print: pageOverflows; cr.
> + 	str tab; nextPutAll: 'Stack page divorces: '; print: pageDivorces; cr!
>
> Item was added:
> + ----- Method: AndreasSystemProfiler>>runProfilerProcess (in category 'pro=
filing') -----
> + runProfilerProcess
> + 	"Run the profiler process"
> + 	| process tallyStart tallyTicks tallyStop method leaf |
> + 	tallyRoot :=3D ASPTally new class: nil method: nil.
> + 	totalTally :=3D 0.
> + 	Smalltalk profileSemaphore: semaphore.
> + 	totalTicks :=3D 0.
> + 	tallyStart :=3D tallyStop :=3D Smalltalk highResClock.
> + 	[true] whileTrue:[
> + 		tallyStart :=3D tallyStop.
> + 		tallyStart :=3D Smalltalk highResClock.
> + 		Smalltalk profileStart: ticks. "run for n ticks"
> + 		semaphore wait.
> + 		tallyStop :=3D Smalltalk highResClock.
> + 		tallyTicks :=3D tallyStop - tallyStart.
> + 		totalTicks :=3D totalTicks + tallyTicks.
> + 		process :=3D Smalltalk profileSample.
> + 		method :=3D Smalltalk profilePrimitive.
> + 		totalTally :=3D totalTally + 1.
> + 		process ifNotNil:[
> + 			leaf :=3D tallyRoot tally: (process suspendedContext ifNil:[thisContex=
t]) by: tallyTicks.
> + 			method ifNotNil:[leaf tallyMethod: method by: tallyTicks].
> + 		].
> + 	].
> + !
>
> Item was added:
> + ----- Method: AndreasSystemProfiler>>spyOn: (in category 'profiling') ---=
--
> + spyOn: aBlock
> + 	"Profile system activity during execution of aBlock.
> + 	The argument is the desired samples per *milli* second.
> + 	Mostly for polymorphism with MessageTally."
> + 	self startProfiling.
> + 	^ aBlock ensure:[self stopProfiling].
> + !
>
> Item was added:
> + ----- Method: AndreasSystemProfiler>>startProfiling (in category 'profili=
ng') -----
> + startProfiling
> + 	"Start the profiler process taking samplesPerMsec samples per *milli* se=
cond"
> + 	| t0 tS |
> + 	semaphore :=3D Semaphore new.
> + 	"Run a 10 msec busy loop to figure out the ticks per msec"
> + 	"First step to the next clock granule"
> + 	t0 :=3D Time utcMicrosecondClock + 1000.
> + 	[(tS :=3D Time utcMicrosecondClock) >=3D t0] whileFalse.
> + 	"Now run for 10 ms"
> + 	ticksPerMSec :=3D Smalltalk highResClock.
> + 	[Time utcMicrosecondClock >=3D (tS + 10000)] whileFalse.
> + 	ticksPerMSec :=3D (Smalltalk highResClock - ticksPerMSec)
> + 						// (Time utcMicrosecondClock - tS).
> + 	"Try to get 10 samples per msec"
> + 	ticks :=3D ticksPerMSec // 10.
> + 	vmStats :=3D Smalltalk getVMParameters.
> + 	startTime :=3D Time utcMicrosecondClock.
> + 	profilerProcess :=3D [self runProfilerProcess] forkAt: Processor timingP=
riority - 1
> +
> + 	"How granular is the microsecond clock?  Not very..."
> + 	"| times st t nt |
> + 	times :=3D OrderedCollection with: (st :=3D t :=3D Time utcMicrosecondCl=
ock).
> + 	[times size < 100] whileTrue:
> + 		[[(nt :=3D Time utcMicrosecondClock) =3D t] whileTrue.
> + 		 times addLast: (t :=3D nt)].
> + 	times collect: [:time| time - st]"!
>
> Item was added:
> + ----- Method: AndreasSystemProfiler>>stopProfiling (in category 'profilin=
g') -----
> + stopProfiling
> + 	"Stop the profiler process"
> + 	Smalltalk profileSemaphore: nil.
> + 	Smalltalk profileStart: 0. "<- profile stops now"
> + 	totalTime :=3D (Time utcMicrosecondClock - startTime) + 500 // 1000.
> + 	Smalltalk getVMParameters keysAndValuesDo:
> + 		[:idx :value|
> + 		value isInteger ifTrue: [vmStats at: idx put: (value - ((vmStats at: id=
x) ifNil: [0]))]].
> + 	profilerProcess ifNotNil:
> + 		[profilerProcess suspend.
> + 		 profilerProcess :=3D nil]
> + !
>
> Item was changed:
>    MessageSet subclass: #TimeProfileBrowser
>    	instanceVariableNames: 'block tally methodReferences'
>    	classVariableNames: 'TextMenu'
>    	poolDictionaries: ''
> + 	category: 'Tools-Profiler'!
> - 	category: 'Tools-Debugger'!
>   =20
>    !TimeProfileBrowser commentStamp: '<historical>' prior: 0!
>    A TimeProfileBrowser is a browser visualizing the runtime profile of an =
executed Smalltalk block.  It is useful for finding performance bottlenecks i=
n code. When optimizing code it can
>    be hard to know what methods actually constitute the bulk of the executi=
on time. Is it a few
>    methods that take very long time to execute or is it perhaps a single me=
thod that gets executed a thousand times?
>   =20
>    The block is first spied on using a MessageTally instance (which has eve=
n more funtionality than used by the TimeProfileBrowser) which samples the bl=
ock during it's execution and collects the amount of time approximately spent=
 in the methods executed. Then the methods are shown in the browser with thei=
r relative execution time in percent.
>   =20
>    Example:
>    TimeProfileBrowser onBlock: [20 timesRepeat:  [Transcript show: 100 fact=
orial printString]]
>    !
>
> Squeak-dev mailing list -- squeak-dev(a)lists.squeakfoundation.org
> To unsubscribe send an email to squeak-dev-leave(a)lists.squeakfoundation.o=
rg


--===============8942170890170918458==--


From commits@source.squeak.org Mon Oct 21 21:37:11 2024
From: commits@source.squeak.org
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] The Trunk: Tools-dtl.1277.mcz
Date: Mon, 21 Oct 2024 21:37:00 +0000
Message-ID: <20241021213705.C0CEF5826C0@mail.squeak.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============8781931369511504198=="

--===============8781931369511504198==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

David T. Lewis uploaded a new version of Tools to project The Trunk:
http://source.squeak.org/trunk/Tools-dtl.1277.mcz

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Summary =3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Name: Tools-dtl.1277
Author: dtl
Time: 19 October 2024, 10:34:55.015309 am
UUID: eaca989d-4997-466c-9033-a54aaa8f2d72
Ancestors: Tools-eem.1276

Adopt AndreasSystemProfiler previously hosted in package AndreasProfiler at r=
epository source.squeak.org/VMMaker. Prior version history remains in that re=
pository. Move both TimeProfileBrowser and AndreasSystemProfiler to Tools-Pro=
filer.

Original commit notice:

Name: AndreasProfiler-RJT.1
Author: RJT (unregistered author)
Time: 23 January 2013, 3:45:02.195 pm
UUID: 8f209849-3ec4-2548-9047-4fc87eb45976
Ancestors:=20

Released In Memory of Andreas Raab.  Author, Friend, Colleague.http://forum.w=
orld.st/In-Memory-of-Andreas-Raab-td4663424.html Released by Ron, Julie and D=
avid

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Diff against Tools-eem.1276 =3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Item was changed:
  SystemOrganization addCategory: #'Tools-ArchiveViewer'!
  SystemOrganization addCategory: #'Tools-Base'!
  SystemOrganization addCategory: #'Tools-Browser'!
  SystemOrganization addCategory: #'Tools-Changes'!
  SystemOrganization addCategory: #'Tools-Debugger'!
  SystemOrganization addCategory: #'Tools-Explorer'!
  SystemOrganization addCategory: #'Tools-File Contents Browser'!
  SystemOrganization addCategory: #'Tools-FileList'!
  SystemOrganization addCategory: #'Tools-Inspector'!
  SystemOrganization addCategory: #'Tools-Menus'!
  SystemOrganization addCategory: #'Tools-MethodFinder'!
  SystemOrganization addCategory: #'Tools-Process Browser'!
+ SystemOrganization addCategory: #'Tools-Profiler'!

Item was added:
+ Link subclass: #ASPTally
+ 	instanceVariableNames: 'class method receivers tally senders blockNesting'
+ 	classVariableNames: ''
+ 	poolDictionaries: ''
+ 	category: 'Tools-Profiler'!
+=20
+ !ASPTally commentStamp: '<historical>' prior: 0!
+ Tally for assembling system profiles. It's a subclass of Link so we can cha=
in tallies together in the receivers list.!

Item was added:
+ ----- Method: ASPTally class>>LICENSE (in category 'LICENSE') -----
+ LICENSE
+ 	^'Project Squeak
+=20
+ 	In Memory of Andreas Raab.  Author, Friend, Colleague. 	http://forum.world=
.st/In-Memory-of-Andreas-Raab-td4663424.html
+ 	Copyright (c) 2005-2013, 3D Immersive Collaboration Consulting, LLC., All =
Rights Reserved
+=20
+ 	Redistributions in source code form must reproduce the above
+ 	copyright and this condition.
+=20
+ Licensed under MIT License (MIT)
+ Permission is hereby granted, free of charge, to any person obtaining a cop=
y of this software and associated documentation files (the "Software"), to de=
al in the Software without restriction, including without limitation the righ=
ts to use, copy, modify, merge, publish, distribute, sublicense, and/or sell =
copies of the Software, and to permit persons to whom the Software is furnish=
ed to do so, subject to the following conditions:
+=20
+ The above copyright notice and this permission notice shall be included in =
all copies or substantial portions of the Software.
+=20
+ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR =
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITN=
ESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHO=
RS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, =
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR =
IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.=
'!

Item was added:
+ ----- Method: ASPTally>>asArray (in category 'converting') -----
+ asArray
+ 	^Array streamContents:
+ 		[:s| | link |
+ 		link :=3D self.
+ 		[link =3D=3D nil] whileFalse:
+ 			[s nextPut: link.
+ 			 link :=3D link nextLink]]!

Item was added:
+ ----- Method: ASPTally>>asSortedCollection: (in category 'converting') -----
+ asSortedCollection: aCollection
+ 	"Create a sorted collection from the given input"
+ 	^aCollection asSortedCollection:[:tA :tB| tA tally >=3D tB tally].!

Item was added:
+ ----- Method: ASPTally>>blockNestingCount (in category 'accessing') -----
+ blockNestingCount
+ 	^blockNesting!

Item was added:
+ ----- Method: ASPTally>>blockNestingCountOf: (in category 'tallying') -----
+ blockNestingCountOf: context
+ 	| count nest |
+ 	count :=3D 0.
+ 	nest :=3D context.
+ 	[nest closure notNil] whileTrue:
+ 		[count :=3D count + 1.
+ 		 nest :=3D nest closure outerContext].
+ 	^count!

Item was added:
+ ----- Method: ASPTally>>bump:fromSender: (in category 'report') -----
+ bump: hitCount fromSender: senderTally
+ 	"Add this hitCount to the total, and include a reference to the
+ 	sender responsible for the increment"
+ 	self bumpBy: hitCount.
+ 	senders ifNil:[senders :=3D OrderedCollection new].
+ 	senderTally ifNotNil:[senders add: (senderTally copyWithTally: hitCount)]!

Item was added:
+ ----- Method: ASPTally>>bumpBy: (in category 'tallying') -----
+ bumpBy: count
+ 	"Bump this tally by the specified amount"
+ 	tally :=3D tally + count!

Item was added:
+ ----- Method: ASPTally>>class:method: (in category 'initialize') -----
+ class: aClass method: aCompiledMethod
+ 	class :=3D aClass.
+ 	method :=3D aCompiledMethod.
+ 	tally :=3D blockNesting :=3D 0!

Item was added:
+ ----- Method: ASPTally>>class:method:nesting: (in category 'initialize') --=
---
+ class: aClass method: aCompiledMethod nesting: blockNestingCount
+ 	class :=3D aClass.
+ 	method :=3D aCompiledMethod.
+ 	blockNesting :=3D blockNestingCount.
+ 	tally :=3D 0!

Item was added:
+ ----- Method: ASPTally>>copyWithTally: (in category 'copying') -----
+ copyWithTally: hitCount
+ 	^(self class new class: class method: method) bumpBy: hitCount!

Item was added:
+ ----- Method: ASPTally>>fullPrintOn:tallyExact:orThreshold:time: (in catego=
ry 'report') -----
+ fullPrintOn: aStream tallyExact: isExact orThreshold: perCent time: totalTi=
me
+ 	| threshold | =20
+ 	isExact ifFalse: [threshold :=3D (perCent asFloat / 100 * tally) rounded].
+ 	aStream nextPutAll: '**Tree**'; cr.
+ 	self treePrintOn: aStream
+ 		tabs: OrderedCollection new
+ 		thisTab: ''
+ 		total: tally
+ 		totalTime: totalTime
+ 		tallyExact: isExact
+ 		orThreshold: threshold.
+ 	aStream nextPut: Character newPage; cr.
+ 	aStream nextPutAll: '**Leaves**'; cr.
+ 	self leavesPrintOn: aStream
+ 		tallyExact: isExact
+ 		orThreshold: threshold
+ 		time: totalTime.!

Item was added:
+ ----- Method: ASPTally>>into:fromSender: (in category 'report') -----
+ into: leafDict fromSender: senderTally
+ 	| leafNode |
+ 	leafNode :=3D leafDict
+ 					at: method
+ 					ifAbsentPut: [self class new class: class method: method].
+ 	leafNode bump: tally fromSender: senderTally!

Item was added:
+ ----- Method: ASPTally>>isPrimitives (in category 'testing') -----
+ isPrimitives
+ 	"Detect pseudo node used to carry tally of local hits"
+ 	^ method =3D=3D nil!

Item was added:
+ ----- Method: ASPTally>>leavesInto:fromSender: (in category 'report') -----
+ leavesInto: leafDict fromSender: senderTally
+ 	| rcvrs |
+ 	rcvrs :=3D self sonsOver: 0.
+ 	rcvrs size =3D 0
+ 		ifTrue: [self into: leafDict fromSender: senderTally]
+ 		ifFalse: [rcvrs do:[:node |
+ 				node isPrimitives
+ 					ifTrue: [node leavesInto: leafDict fromSender: senderTally]
+ 					ifFalse: [node leavesInto: leafDict fromSender: self]]]!

Item was added:
+ ----- Method: ASPTally>>leavesPrintOn:tallyExact:orThreshold:time: (in cate=
gory 'report') -----
+ leavesPrintOn: aStream tallyExact: isExact orThreshold: threshold time: tot=
alTime
+ 	| dict |
+ 	dict :=3D IdentityDictionary new: 100.
+ 	self leavesInto: dict fromSender: nil.
+ 	isExact ifTrue:[
+ 		(self asSortedCollection: dict) do: [:node |
+ 			node printOn: aStream total: tally totalTime: nil tallyExact: isExact.
+ 			node printSenderCountsOn: aStream].
+ 	] ifFalse:[
+ 		((self asSortedCollection: dict)
+ 			select: [:node | node tally > threshold]) do: [:node |
+ 				node printOn: aStream total: tally totalTime: totalTime tallyExact: isE=
xact].
+ 	].!

Item was added:
+ ----- Method: ASPTally>>maxClassNameSize (in category 'accessing') -----
+ maxClassNameSize
+ 	"Return the default maximum width of the class name alone"
+ 	^30!

Item was added:
+ ----- Method: ASPTally>>maxClassPlusSelectorSize (in category 'accessing') =
-----
+ maxClassPlusSelectorSize
+ 	"Return the default maximum width of the class plus selector together (not=
 counting the '>>')"
+ 	^60!

Item was added:
+ ----- Method: ASPTally>>maxTabs (in category 'accessing') -----
+ maxTabs
+ 	"Return the default number of tabs after which leading white space is comp=
ressed"
+ 	^36!

Item was added:
+ ----- Method: ASPTally>>method (in category 'accessing') -----
+ method
+ 	"Answer the CompiledMethod associated with this tally"
+ 	^method!

Item was added:
+ ----- Method: ASPTally>>primitives: (in category 'initialize') -----
+ primitives: anInteger
+ 	"Make the receiver be a node of unassigned primitives"
+ 	tally :=3D anInteger.
+ 	method :=3D nil. "indicates primitives"!

Item was added:
+ ----- Method: ASPTally>>printOn: (in category 'report') -----
+ printOn: aStream
+ 	blockNesting ifNotNil:
+ 		[blockNesting timesRepeat:
+ 			[aStream nextPutAll: '[] in ']].
+ 	aStream print: class; nextPutAll: '>>'; print: (method ifNotNil:[method se=
lector storeString]).
+ 	aStream nextPutAll: ' -- '; print: tally.!

Item was added:
+ ----- Method: ASPTally>>printOn:total:totalTime:tallyExact: (in category 'r=
eport') -----
+ printOn: aStream total: total totalTime: totalTime tallyExact: isExact=20
+ 	| className myTally aClass percentage |
+ 	isExact
+ 		ifTrue:
+ 			[myTally :=3D tally.
+ 			receivers ifNotNil:[receivers asArray do: [:r | myTally :=3D myTally - r=
 tally]].
+ 			aStream print: myTally; space]
+ 		ifFalse:
+ 			[(percentage :=3D tally asFloat / total * 100.0) printOn: aStream maxDec=
imalPlaces: 2.
+ 			aStream
+ 				nextPutAll: ' (';
+ 				nextPutAll: (percentage * totalTime / 100) rounded asStringWithCommas;
+ 				nextPutAll: ')  '].
+ 	self isPrimitives
+ 		ifTrue:
+ 			[aStream nextPutAll: 'primitives'; cr]
+ 		ifFalse:
+ 			[aClass :=3D method methodClass.
+ 			className :=3D aClass name contractTo: self maxClassNameSize.
+ 			blockNesting > 0 ifTrue:
+ 				[aStream
+ 					next: blockNesting put: $[;
+ 					next: blockNesting put: $];
+ 					space].
+ 			aStream
+ 				nextPutAll: class name;
+ 				nextPutAll: (aClass =3D class=20
+ 							ifTrue: [' ']
+ 							ifFalse: ['(' , aClass name , ') ']);
+ 				nextPutAll: (method selector
+ 								contractTo: self maxClassPlusSelectorSize - className size);
+ 				cr]!

Item was added:
+ ----- Method: ASPTally>>sonsOver: (in category 'report') -----
+ sonsOver: threshold
+ 	"Answer the sons with tallys over the given threshold"
+ 	receivers ifNil:[^#()].
+ 	^receivers asArray select:[:son | son tally > threshold].!

Item was added:
+ ----- Method: ASPTally>>tally (in category 'accessing') -----
+ tally
+ 	"Answer the tally count for this node"
+ 	^tally!

Item was added:
+ ----- Method: ASPTally>>tally:by: (in category 'tallying') -----
+ tally: context by: count
+ 	"Explicitly tally the specified context and its stack."
+ =09
+ 	^(context sender=20
+ 		ifNil: [ self bumpBy: count ]
+ 		ifNotNil: [ :root | self tally: root by: count ]) tallyPath: context by: =
count!

Item was added:
+ ----- Method: ASPTally>>tallyMethod:by: (in category 'tallying') -----
+ tallyMethod: aMethod by: count
+ 	"Called explicitly and needs to decrement receiver's tally count"
+ 	| node |
+ 	node :=3D receivers.
+ 	[node =3D=3D nil] whileFalse:
+ 		[node method =3D=3D aMethod ifTrue:[^node bumpBy: count].
+ 		node :=3D node nextLink].
+ 	node :=3D self class new class: aMethod methodClass method: aMethod.
+ 	node nextLink: receivers.
+ 	receivers :=3D node.
+ 	^node bumpBy: count!

Item was added:
+ ----- Method: ASPTally>>tallyPath:by: (in category 'tallying') -----
+ tallyPath: context by: count
+ 	"Tally the context chain"
+ 	| aMethod nesting theTally |
+ 	aMethod :=3D context method.
+ 	nesting :=3D self blockNestingCountOf: context.
+ 	theTally :=3D receivers.
+ 	[theTally =3D=3D nil] whileFalse:
+ 		[(theTally method =3D=3D aMethod
+ 		  and: [theTally blockNestingCount =3D nesting]) ifTrue:[^theTally bumpBy=
: count].
+ 		theTally :=3D theTally nextLink].
+ 	theTally :=3D self class new
+ 				class: context receiver class
+ 				method: aMethod
+ 				nesting: nesting.
+ 	theTally nextLink: receivers.
+ 	receivers :=3D theTally.
+ 	^theTally bumpBy: count!

Item was added:
+ ----- Method: ASPTally>>treePrintOn:tabs:thisTab:total:totalTime:tallyExact=
:orThreshold: (in category 'report') -----
+ treePrintOn: aStream tabs: tabs thisTab: myTab total: total totalTime: tota=
lTime tallyExact: isExact orThreshold: threshold=20
+ 	| sons sonTab |
+ 	tabs do: [:tab | aStream nextPutAll: tab].
+ 	tabs size > 0=20
+ 		ifTrue:[self printOn: aStream total: total totalTime: totalTime tallyExac=
t: isExact].
+ 	sons :=3D isExact ifTrue: [receivers] ifFalse: [self sonsOver: threshold].
+ 	sons isEmpty ifFalse:[
+ 		tabs addLast: myTab.
+ 		sons :=3D self asSortedCollection: sons.
+ 		1 to: sons size do:[:i |=20
+ 			sonTab :=3D i < sons size ifTrue: ['  |'] ifFalse: ['  '].
+ 			(sons at: i) treePrintOn: aStream
+ 						tabs: (tabs size < self maxTabs=20
+ 								ifTrue: [tabs]
+ 								ifFalse: [(tabs select: [:x | x =3D '[']) copyWith: '['])
+ 						thisTab: sonTab
+ 						total: total
+ 						totalTime: totalTime
+ 						tallyExact: isExact
+ 						orThreshold: threshold].
+ 			tabs removeLast]!

Item was added:
+ Object subclass: #AndreasSystemProfiler
+ 	instanceVariableNames: 'semaphore ticks profilerProcess tallyRoot vmStats =
totalTally totalTime startTime ticksPerMSec totalTicks'
+ 	classVariableNames: ''
+ 	poolDictionaries: ''
+ 	category: 'Tools-Profiler'!
+=20
+ !AndreasSystemProfiler commentStamp: 'eem 8/2/2013 13:45' prior: 0!
+ AndreasSystemProfiler instances observe and report the amount of time spent=
 in methods.  AndreasSystemProfiler uses sub-msec VM supported PC sampling.  =
AndreasSystemProfiler is a plug-in replacement for MessageTally.  It is more =
accurate because it uses VM support to tell it which primtiive was running wh=
en it took a sample.  MessageTally simply ascribes a primitive's cost to the =
method at the next suspendsion point, which, in some contexts, can yield wild=
ly misleading results.
+=20
+ 	AndreasSystemProfiler spyOn:  [20 timesRepeat:=20
+ 			[Transcript show: 100 factorial printString]]
+=20
+ NOTE: a higher-level user interface (combining the MessageTally result tree=
 with a method browser) is available from TimeProfileBrowser.  But you'll hav=
e to plumb AndreasSystemProfiler into TimeProfileBrowser yourself.
+=20
+ 	TimeProfileBrowser spyOn:  [20 timesRepeat:=20
+ 			[Transcript show: 100 factorial printString]]
+=20
+ 	In Memory of Andreas Raab.  Author, Friend, Colleague. 	http://forum.world=
.st/In-Memory-of-Andreas-Raab-td4663424.html
+ 	Released by Ron, Julie and David!

Item was added:
+ ----- Method: AndreasSystemProfiler class>>LICENSE (in category 'LICENSE') =
-----
+ LICENSE
+ 	^'Project Squeak
+=20
+ 	In Memory of Andreas Raab.  Author, Friend, Colleague. 	http://forum.world=
.st/In-Memory-of-Andreas-Raab-td4663424.html
+ 	Copyright (c) 2005-2013, 3D Immersive Collaboration Consulting, LLC., All =
Rights Reserved
+=20
+ 	Redistributions in source code form must reproduce the above
+ 	copyright and this condition.
+=20
+ Licensed under MIT License (MIT)
+ Permission is hereby granted, free of charge, to any person obtaining a cop=
y of this software and associated documentation files (the "Software"), to de=
al in the Software without restriction, including without limitation the righ=
ts to use, copy, modify, merge, publish, distribute, sublicense, and/or sell =
copies of the Software, and to permit persons to whom the Software is furnish=
ed to do so, subject to the following conditions:
+=20
+ The above copyright notice and this permission notice shall be included in =
all copies or substantial portions of the Software.
+=20
+ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR =
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITN=
ESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHO=
RS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, =
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR =
IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.=
'!

Item was added:
+ ----- Method: AndreasSystemProfiler class>>canWork (in category 'testing') =
-----
+ canWork
+ 	"
+ 	AndreasSystemProfiler canWork
+ 	"
+ 	Smalltalk highResClock =3D 0 ifTrue: [ ^false ].
+ 	[
+ 		Smalltalk profileSemaphore: nil.
+ 		Smalltalk profileStart: 0 ] on: Error do: [ ^false ].
+ 	^true!

Item was added:
+ ----- Method: AndreasSystemProfiler class>>default (in category 'spying') -=
----
+ default
+ 	^self new!

Item was added:
+ ----- Method: AndreasSystemProfiler class>>spyFor: (in category 'spying') -=
----
+ spyFor: seconds
+ 	"Run the system profiler for the specified number of seconds"
+ 	"AndreasSystemProfiler spyFor: 5"
+ 	^self spyOn:[(Delay forSeconds: seconds) wait].!

Item was added:
+ ----- Method: AndreasSystemProfiler class>>spyOn: (in category 'spying') --=
---
+ spyOn: aBlock
+ 	"AndreasSystemProfiler spyOn:[10000 timesRepeat: [3.14159 printString]]"
+ 	| profiler |
+ 	profiler :=3D self new.
+ 	^[profiler spyOn: aBlock] ensure: [profiler doReport]!

Item was added:
+ ----- Method: AndreasSystemProfiler class>>spyOnWorldFor: (in category 'spy=
ing') -----
+ spyOnWorldFor: seconds
+ 	"Run the system profiler for the specified number of seconds,
+ 	 spying on the morphic world in which it was launched.=20
+ 	 Handy for running Workspace do-its."
+=20
+ 	^self spyOn: [  | deadline |
+ 		deadline :=3D Time totalSeconds + seconds.
+ 		[Time totalSeconds < deadline]
+ 			whileTrue: [ World doOneCycle ]].!

Item was added:
+ ----- Method: AndreasSystemProfiler>>doReport (in category 'reporting') ---=
--
+ doReport
+ 	"Report the results of this profiler run"
+ 	UIManager default edit: self report label: 'Spy Results'.!

Item was added:
+ ----- Method: AndreasSystemProfiler>>report (in category 'reporting') -----
+ report
+ 	"Answer a report, with cutoff percentage of each element of the tree"
+ 	^String streamContents:[:s| self report: s].!

Item was added:
+ ----- Method: AndreasSystemProfiler>>report: (in category 'reporting') -----
+ report: strm=20
+ 	"Print a report, with cutoff percentage of each element of the tree=20
+ 	(leaves, roots, tree)=3D2, on the stream, strm."
+=20
+ 	self report: strm cutoff: 1!

Item was added:
+ ----- Method: AndreasSystemProfiler>>report:cutoff: (in category 'reporting=
') -----
+ report: strm cutoff: threshold=20
+ 	tallyRoot tally =3D 0 ifTrue:[
+ 		strm nextPutAll: ' - no tallies obtained'
+ 	] ifFalse:[
+ 		strm nextPutAll: 'Reporting - ', totalTally asStringWithCommas,' tallies,=
 ',
+ 							 totalTime asStringWithCommas, ' msec.'; cr; cr.
+ 		tallyRoot fullPrintOn: strm tallyExact: false orThreshold: threshold time=
: totalTime.
+ 	].
+ 	totalTime isZero ifFalse:[
+ 		self reportGCStatsOn: strm.
+ 		self reportProcessStatsOn: strm.
+ 	].!

Item was added:
+ ----- Method: AndreasSystemProfiler>>reportGCStatsOn: (in category 'reporti=
ng') -----
+ reportGCStatsOn: str
+ 	| oldSpaceEnd youngSpaceEnd memoryEnd fullGCs fullGCTime incrGCs incrGCTim=
e tenureCount upTime rootOverflows |
+ 	upTime :=3D totalTime.
+ 	oldSpaceEnd			:=3D vmStats at: 1.
+ 	youngSpaceEnd		:=3D vmStats at: 2.
+ 	memoryEnd			:=3D vmStats at: 3.
+ 	fullGCs				:=3D vmStats at: 7.
+ 	fullGCTime			:=3D vmStats at: 8.
+ 	incrGCs				:=3D vmStats at: 9.
+ 	incrGCTime			:=3D vmStats at: 10.
+ 	tenureCount			:=3D vmStats at: 11.
+ 	rootOverflows		:=3D vmStats at: 22.
+=20
+ 	str cr.
+ 	str	nextPutAll: '**Memory**'; cr.
+ 	str	nextPutAll:	'	old			';
+ 		nextPutAll: (oldSpaceEnd asStringWithCommasSigned: true); nextPutAll: ' b=
ytes'; cr.
+ 	str	nextPutAll: '	young		';
+ 		nextPutAll: ((youngSpaceEnd - oldSpaceEnd) asStringWithCommasSigned: true=
); nextPutAll: ' bytes'; cr.
+ 	str	nextPutAll: '	used		';
+ 		nextPutAll: (youngSpaceEnd asStringWithCommasSigned: true); nextPutAll: '=
 bytes'; cr.
+ 	str	nextPutAll: '	free		';
+ 		nextPutAll: ((memoryEnd - youngSpaceEnd) asStringWithCommasSigned: true);=
 nextPutAll: ' bytes'; cr.
+=20
+ 	str cr.
+ 	str	nextPutAll: '**GCs**'; cr.
+ 	str	nextPutAll: '	full			';
+ 		print: fullGCs; nextPutAll: ' totalling '; nextPutAll: fullGCTime asStrin=
gWithCommas; nextPutAll: 'ms (';
+ 		print: ((fullGCTime / upTime * 100) roundTo: 1.0);
+ 		nextPutAll: '% uptime)'.
+ 	fullGCs =3D 0 ifFalse:
+ 		[str	nextPutAll: ', avg '; print: ((fullGCTime / fullGCs) roundTo: 1.0); =
nextPutAll: 'ms'].
+ 	str	cr.
+ 	str	nextPutAll: '	incr		';
+ 		print: incrGCs; nextPutAll: ' totalling '; nextPutAll: incrGCTime asStrin=
gWithCommas; nextPutAll: 'ms (';
+ 		print: ((incrGCTime / upTime * 100) roundTo: 1.0);
+ 		nextPutAll: '% uptime)'.
+ 	incrGCs =3D 0 ifFalse:
+ 		[str nextPutAll:', avg '; print: ((incrGCTime / incrGCs) roundTo: 1.0); n=
extPutAll: 'ms'].
+ 	str cr.
+ 	str	nextPutAll: '	tenures		';
+ 		nextPutAll: tenureCount asStringWithCommas.
+ 	tenureCount =3D 0 ifFalse:
+ 		[str nextPutAll: ' (avg '; print: (incrGCs / tenureCount) asInteger; next=
PutAll: ' GCs/tenure)'].
+ 	str	cr.
+ 	str	nextPutAll: '	root table	';
+ 		nextPutAll: rootOverflows asStringWithCommas; nextPutAll:' overflows'.
+ 	str cr.
+ !

Item was added:
+ ----- Method: AndreasSystemProfiler>>reportProcessStatsOn: (in category 're=
porting') -----
+ reportProcessStatsOn: str
+ 	| totalSwitches pageOverflows pageDivorces actualSwitches |
+ 	vmStats size >=3D 61 ifFalse:[^self]. "don't try this on the closure VM"
+ 	totalSwitches :=3D vmStats at: 56.
+ 	actualSwitches :=3D totalSwitches - (2*totalTally). "exclude to/from profi=
ler"
+ 	pageOverflows :=3D vmStats at: 60.
+ 	pageDivorces :=3D vmStats at: 61.
+=20
+ 	str cr; nextPutAll: '**Processes**'; cr.
+ 	str tab; nextPutAll: 'Total process switches: '; print: totalSwitches; cr.
+ 	str tab; nextPutAll: 'Without Profiler: '; print: actualSwitches; cr.
+ 	str tab; nextPutAll: 'Stack page overflows: '; print: pageOverflows; cr.
+ 	str tab; nextPutAll: 'Stack page divorces: '; print: pageDivorces; cr!

Item was added:
+ ----- Method: AndreasSystemProfiler>>runProfilerProcess (in category 'profi=
ling') -----
+ runProfilerProcess
+ 	"Run the profiler process"
+ 	| process tallyStart tallyTicks tallyStop method leaf |
+ 	tallyRoot :=3D ASPTally new class: nil method: nil.
+ 	totalTally :=3D 0.
+ 	Smalltalk profileSemaphore: semaphore.
+ 	totalTicks :=3D 0.
+ 	tallyStart :=3D tallyStop :=3D Smalltalk highResClock.
+ 	[true] whileTrue:[
+ 		tallyStart :=3D tallyStop.
+ 		tallyStart :=3D Smalltalk highResClock.
+ 		Smalltalk profileStart: ticks. "run for n ticks"
+ 		semaphore wait.
+ 		tallyStop :=3D Smalltalk highResClock.
+ 		tallyTicks :=3D tallyStop - tallyStart.
+ 		totalTicks :=3D totalTicks + tallyTicks.
+ 		process :=3D Smalltalk profileSample.
+ 		method :=3D Smalltalk profilePrimitive.
+ 		totalTally :=3D totalTally + 1.
+ 		process ifNotNil:[
+ 			leaf :=3D tallyRoot tally: (process suspendedContext ifNil:[thisContext]=
) by: tallyTicks.
+ 			method ifNotNil:[leaf tallyMethod: method by: tallyTicks].
+ 		].
+ 	].
+ !

Item was added:
+ ----- Method: AndreasSystemProfiler>>spyOn: (in category 'profiling') -----
+ spyOn: aBlock
+ 	"Profile system activity during execution of aBlock.=20
+ 	The argument is the desired samples per *milli* second.
+ 	Mostly for polymorphism with MessageTally."
+ 	self startProfiling.
+ 	^ aBlock ensure:[self stopProfiling].
+ !

Item was added:
+ ----- Method: AndreasSystemProfiler>>startProfiling (in category 'profiling=
') -----
+ startProfiling
+ 	"Start the profiler process taking samplesPerMsec samples per *milli* seco=
nd"
+ 	| t0 tS |
+ 	semaphore :=3D Semaphore new.
+ 	"Run a 10 msec busy loop to figure out the ticks per msec"
+ 	"First step to the next clock granule"
+ 	t0 :=3D Time utcMicrosecondClock + 1000.
+ 	[(tS :=3D Time utcMicrosecondClock) >=3D t0] whileFalse.
+ 	"Now run for 10 ms"
+ 	ticksPerMSec :=3D Smalltalk highResClock.
+ 	[Time utcMicrosecondClock >=3D (tS + 10000)] whileFalse.
+ 	ticksPerMSec :=3D (Smalltalk highResClock - ticksPerMSec)=20
+ 						// (Time utcMicrosecondClock - tS).
+ 	"Try to get 10 samples per msec"
+ 	ticks :=3D ticksPerMSec // 10.
+ 	vmStats :=3D Smalltalk getVMParameters.
+ 	startTime :=3D Time utcMicrosecondClock.
+ 	profilerProcess :=3D [self runProfilerProcess] forkAt: Processor timingPri=
ority - 1
+=20
+ 	"How granular is the microsecond clock?  Not very..."
+ 	"| times st t nt |
+ 	times :=3D OrderedCollection with: (st :=3D t :=3D Time utcMicrosecondCloc=
k).
+ 	[times size < 100] whileTrue:
+ 		[[(nt :=3D Time utcMicrosecondClock) =3D t] whileTrue.
+ 		 times addLast: (t :=3D nt)].
+ 	times collect: [:time| time - st]"!

Item was added:
+ ----- Method: AndreasSystemProfiler>>stopProfiling (in category 'profiling'=
) -----
+ stopProfiling
+ 	"Stop the profiler process"
+ 	Smalltalk profileSemaphore: nil.
+ 	Smalltalk profileStart: 0. "<- profile stops now"
+ 	totalTime :=3D (Time utcMicrosecondClock - startTime) + 500 // 1000.
+ 	Smalltalk getVMParameters keysAndValuesDo:
+ 		[:idx :value|=20
+ 		value isInteger ifTrue: [vmStats at: idx put: (value - ((vmStats at: idx)=
 ifNil: [0]))]].
+ 	profilerProcess ifNotNil:
+ 		[profilerProcess suspend.
+ 		 profilerProcess :=3D nil]
+ !

Item was changed:
  MessageSet subclass: #TimeProfileBrowser
  	instanceVariableNames: 'block tally methodReferences'
  	classVariableNames: 'TextMenu'
  	poolDictionaries: ''
+ 	category: 'Tools-Profiler'!
- 	category: 'Tools-Debugger'!
 =20
  !TimeProfileBrowser commentStamp: '<historical>' prior: 0!
  A TimeProfileBrowser is a browser visualizing the runtime profile of an exe=
cuted Smalltalk block.  It is useful for finding performance bottlenecks in c=
ode. When optimizing code it can
  be hard to know what methods actually constitute the bulk of the execution =
time. Is it a few
  methods that take very long time to execute or is it perhaps a single metho=
d that gets executed a thousand times?
 =20
  The block is first spied on using a MessageTally instance (which has even m=
ore funtionality than used by the TimeProfileBrowser) which samples the block=
 during it's execution and collects the amount of time approximately spent in=
 the methods executed. Then the methods are shown in the browser with their r=
elative execution time in percent.
 =20
  Example:
  TimeProfileBrowser onBlock: [20 timesRepeat:  [Transcript show: 100 factori=
al printString]]
  !


--===============8781931369511504198==--


From commits@source.squeak.org Tue Oct 22 20:18:19 2024
From: commits@source.squeak.org
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] The Trunk: Compiler-eem.511.mcz
Date: Tue, 22 Oct 2024 20:18:09 +0000
Message-ID: <20241022201813.4CDB5582624@mail.squeak.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============3802183608843620041=="

--===============3802183608843620041==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

Eliot Miranda uploaded a new version of Compiler to project The Trunk:
http://source.squeak.org/trunk/Compiler-eem.511.mcz

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Summary =3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Name: Compiler-eem.511
Author: eem
Time: 22 October 2024, 1:18:06.311005 pm
UUID: b15f082f-2aa3-4673-b352-7d1fbf7991a1
Ancestors: Compiler-eem.510

Fix a regression in MethodNode preening introduced by Compiler-eem.504/505/50=
6.

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Diff against Compiler-eem.510 =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Item was changed:
  ----- Method: MethodNode>>preenIfNotNilNode: (in category 'converting-priva=
te') -----
  preenIfNotNilNode: messageNode
  	"Transform a (var :=3D expr) ifNil: [...] ifNotNil: [...] where var is onl=
y used in the ifNotNil: block
  	 and convert it to expr ifNil: [...] ifNotNil: [:var| ...].  Deal both wit=
h the pretty-print case where
  	 the block already declares the variable and the decompile case where it d=
oes not."
 =20
  	| variable |
  	self assert: (messageNode isMessageNode
  				and: [messageNode macroPrinter =3D=3D #printIfNilNotNil:indent:
  				and: [messageNode receiver receiver isAssignmentNode]]).
  	variable :=3D messageNode receiver receiver variable.
  	self assert: (variable isTemp and: [variable isRemote not]).
  	messageNode arguments last arguments isEmpty
  		ifTrue: [messageNode arguments last arguments: { variable }]
  		ifFalse:
  			[self assert: messageNode arguments last arguments asArray =3D { variabl=
e }.
  			 variable :=3D nil].
  	messageNode receiver receiver: messageNode receiver receiver value.
  	variable ifNil: [^self].
  	self nodesDo:
  		[:node|
  		((node =3D=3D self or: [node isBlockNode])
+ 		 and: [node temporaries anySatisfy: [:temp| temp is: variable]]) ifTrue:
+ 			[node temporaries: (node temporaries reject: [:temp| temp is: variable])=
]]!
- 		 and: [node temporaries includes: variable]) ifTrue:
- 			[node temporaries: (node temporaries copyWithout: variable)]]!


--===============3802183608843620041==--


From commits@source.squeak.org Tue Oct 22 20:40:22 2024
From: commits@source.squeak.org
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] The Trunk: Compiler-eem.512.mcz
Date: Tue, 22 Oct 2024 20:40:14 +0000
Message-ID: <20241022204017.EAE86582624@mail.squeak.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============4302989130475915644=="

--===============4302989130475915644==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

Eliot Miranda uploaded a new version of Compiler to project The Trunk:
http://source.squeak.org/trunk/Compiler-eem.512.mcz

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Summary =3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Name: Compiler-eem.512
Author: eem
Time: 22 October 2024, 1:40:11.619395 pm
UUID: a9b572a3-93fa-4a2b-aaed-01757884b892
Ancestors: Compiler-eem.511

Fix parsing/compiling of blocks containing comments. Blocks cannot end with a=
 comment node; attach the comment somewhere sensible. Fix printing of empty-a=
rmed ifTrue:ifFalse: nodes so that parsed comments are not lost.

Add a custom field to inspectors of Parsers so that one can see Parser variab=
les without the typeTable getting in the way.

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Diff against Compiler-eem.511 =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Item was changed:
  ----- Method: BlockNode>>printStatementsOn:indent: (in category 'printing')=
 -----
  printStatementsOn: aStream indent: levelOrZero
  	| len shown thisStatement level |
  	level :=3D 1 max: levelOrZero.
  	len :=3D shown :=3D statements size.
  	(levelOrZero =3D 0 "top level" and: [statements last isReturnSelf])
  		ifTrue: [shown :=3D 1 max: shown - 1]
  		ifFalse: ["should a trailing nil be printed or not? Not if it is an impli=
cit result, not if the last statement answers nil."
  				((arguments size > 0 and: [len =3D 0])
  				 or: [((statements at: len) isJust: NodeNil)
  					and: [len =3D 1
  						or: [len > 1
  							and: [(statements at: len - 1) isMessageNode
  							and: [(statements at: len - 1) isNilIf
  								or: [(statements at: len - 1) isOptimizedWhileLoop]]]]]])
  					ifTrue: [shown :=3D shown - 1]].
  	1 to: shown do:=20
  		[:i |=20
  		thisStatement :=3D statements at: i.
  		thisStatement printOn: aStream indent: level.
+ 		i < shown ifTrue:
+ 			[thisStatement isCommentNode ifFalse:
+ 				[aStream nextPut: $.; crtab: level]].
- 		i < shown ifTrue: [aStream nextPut: $.; crtab: level].
  		(thisStatement comment ~~ nil and: [thisStatement comment size > 0])
  			ifTrue:=20
  				[i =3D shown ifTrue: [aStream crtab: level].
  				thisStatement printCommentOn: aStream indent: level.
  				i < shown ifTrue: [aStream crtab: level]]]!

Item was added:
+ ----- Method: CommentNode>>isCommentNode (in category 'testing') -----
+ isCommentNode
+ 	^true!

Item was added:
+ ----- Method: CommentNode>>printOn:indent: (in category 'printing') -----
+ printOn: aStream indent: indent
+ 	"This is a no-op in CommentNode.
+ 	 Comment printing is explicit in BlockNode>>#printStatementsOn:indent: via=
 a send of
+ 		printCommentOn:indent:"!

Item was added:
+ ----- Method: CommentNode>>sizeCodeForReturn: (in category 'code generation=
') -----
+ sizeCodeForReturn: encoder
+ 	self shouldNotImplement!

Item was changed:
  ----- Method: MessageNode>>printIfOn:indent: (in category 'printing') -----
  printIfOn: aStream indent: level
 =20
+ 	| isIfTrueIfFalse |
  	receiver ifNotNil:
  		[receiver printOn: aStream indent: level + 1 precedence: precedence].
+ 	isIfTrueIfFalse :=3D #(ifTrue:ifFalse: ifFalse:ifTrue:) identityIncludes: =
selector key.
+ 	(selector key =3D=3D #ifTrue:
+ 	 or: [isIfTrueIfFalse and: [arguments last isJust: NodeNil]]) ifTrue:
- 	(arguments last isJust: NodeNil) ifTrue:
  		[^self printKeywords: #ifTrue: arguments: (Array with: arguments first)
  					on: aStream indent: level].
+ 	(selector key =3D=3D #ifFalse:
+ 	 or: [isIfTrueIfFalse and: [arguments first isJust: NodeNil]]) ifTrue:
+ 		[^self printKeywords: #ifFalse: arguments: (Array with: arguments last)
+ 					on: aStream indent: level].
  	(arguments last isJust: NodeFalse) ifTrue:
  		[^self printKeywords: #and: arguments: (Array with: arguments first)
  					on: aStream indent: level].
- 	(arguments first isJust: NodeNil) ifTrue:
- 		[^self printKeywords: #ifFalse: arguments: (Array with: arguments last)
- 					on: aStream indent: level].
  	(arguments first isJust: NodeTrue) ifTrue:
  		[^self printKeywords: #or: arguments: (Array with: arguments last)
  					on: aStream indent: level].
  	self printKeywords: #ifTrue:ifFalse: arguments: arguments
  					on: aStream indent: level!

Item was added:
+ ----- Method: ParseNode>>isCommentNode (in category 'testing') -----
+ isCommentNode
+ 	^false!

Item was changed:
  ----- Method: Parser>>blockExpression (in category 'expression types') -----
  blockExpression
  	"[ ({:var} |) (| {temps} |) (statements) ] =3D> BlockNode."
 =20
  	| blockNode variableNodes temporaryBlockVariables start |
  	blockNode :=3D BlockNode new.
- 	blockNode comment: currentComment.
- 	currentComment :=3D nil.
  	variableNodes :=3D OrderedCollection new.
  	start :=3D prevMark + requestorOffset.
  	"Gather parameters."
  	[self match: #colon] whileTrue:
  		[variableNodes addLast: (encoder bindBlockArg: self argumentName within: =
blockNode)].
  	(variableNodes size > 0 & (hereType ~~ #rightBracket) and: [(self match: #=
verticalBar) not]) ifTrue:
  		[^self expected: 'Vertical bar'].
 =20
  	temporaryBlockVariables :=3D self temporaryBlockVariablesFor: blockNode.
  	self statements: variableNodes innerBlock: true blockNode: blockNode.
  	blockNode temporaries: temporaryBlockVariables.
 =20
  	(self match: #rightBracket) ifFalse: [^self expected: 'Period or right bra=
cket'].
 =20
  	blockNode noteSourceRangeStart: start end: self endOfLastToken encoder: en=
coder.
 =20
  	"The scope of the parameters and temporary block variables is no longer ac=
tive."
  	temporaryBlockVariables do: [:variable | variable scope: -1].
  	variableNodes do: [:variable | variable scope: -1]!

Item was added:
+ ----- Method: Parser>>customInspectorFieldsFor: (in category 'user interfac=
e') -----
+ customInspectorFieldsFor: anInspector
+=20
+ 	^{(anInspector newFieldForType: #parsingVars key: #parsingVars)
+ 			name: 'parsing variables' translated; emphasizeName;
+ 			valueGetter: [:obj | String streamContents:
+ 									[:s|
+ 									#(mark hereChar aheadChar token tokenType currentComment here here=
Type hereMark hereEnd prevMark prevEnd parseNode tempsMark)
+ 										with: {mark. hereChar. aheadChar. token. tokenType. currentCommen=
t. here. hereType. hereMark. hereEnd. prevMark. prevEnd. parseNode. tempsMark}
+ 										do: [:key :value|
+ 											s nextPutAll: key; nextPut: $:; space; print: value; cr]]];
+ 			printValueAsIs;
+ 			yourself }!

Item was changed:
  ----- Method: Parser>>statements:innerBlock:blockNode: (in category 'expres=
sion types') -----
  statements: argNodes innerBlock: inner blockNode: theBlockNode
 =20
+ 	| stmts returns start savedComment sz |
- 	| stmts returns start savedComment |
- 	inner
- 		ifTrue: "give comment to message which has this block as an argument, not=
 to this block."
- 			[savedComment :=3D currentComment]
- 		ifFalse:"give initial comment to block, since others trail statements"
- 			[theBlockNode comment: currentComment].
- 	currentComment :=3D nil.
  	stmts :=3D OrderedCollection new.
  	returns :=3D false.
+ 	currentComment ifNotNil:
+ 		[inner
+ 			ifTrue:
+ 				[theBlockNode comment
+ 					ifNotNil:"If the block already has a comment then introduce a CommentN=
ode."
+ 						[stmts addLast: (CommentNode new comment: currentComment)]
+ 					ifNil: "otherwise give comment to message which has this block as an a=
rgument, not to this block."
+ 						[savedComment :=3D currentComment]]
+ 			ifFalse: "give initial comment to block, since others trail statements"
+ 				[theBlockNode comment: currentComment].
+ 		currentComment :=3D nil].
  	hereType ~~ #rightBracket ifTrue:
  		[[theBlockNode startOfLastStatement: (start :=3D self startOfNextToken).
  		 currentComment ifNotNil:
  			[stmts addLast: (CommentNode new comment: currentComment).
  			 currentComment :=3D nil].
  		  (returns :=3D self matchReturn)
  			ifTrue:=20
  				[self expression ifFalse:
  					[^self expected: 'Expression to return'].
  				 self addComment.
  				 stmts addLast: (parseNode isReturningIf
  								ifTrue: [parseNode]
  								ifFalse: [ReturnNode new
  											expr: parseNode
  											encoder: encoder
  											sourceRange: (start to: self endOfLastToken)])]
  			ifFalse:=20
  				[self expression
  					ifTrue:=20
  						[self addComment.
  						"if both branches return, following code is unreachable, let's avoid =
this.
  						But only if interactive, we don't want to prevent loading of legacy c=
ode"
  						self interactive ifTrue: [returns :=3D parseNode isReturningIf].
  						 stmts addLast: parseNode]
  					ifFalse:=20
  						[self addComment.
  						 stmts size =3D 0 ifTrue:=20
  							[stmts addLast:=20
  								(encoder encodeVariable:
  									(inner ifTrue: ['nil'] ifFalse: ['self']))]]].
  		  returns ifTrue:=20
  			[self match: #period.
  			 (hereType =3D=3D #rightBracket or: [hereType =3D=3D #doIt]) ifFalse:
  				[^self expected: 'End of block']].
  		  returns not and: [self match: #period]] whileTrue].
+ 	"Can't leave a comment at the end of a block without breaking the code gen=
erator.
+ 	 Attach it to a node somewhere."
+ 	((sz :=3D stmts size) > 0
+ 	and: [(stmts at: sz) isCommentNode]) ifTrue:
+ 		[sz > 1
+ 			ifTrue:
+ 				[(stmts at: sz - 1) comment
+ 					ifNil: [(stmts at: sz - 1) comment: (stmts at: sz) comment]
+ 					ifNotNil:
+ 						[(stmts at: sz - 1) comment addAllLast: (stmts at: sz) comment].
+ 				stmts removeLast]
+ 			ifFalse:
+ 				[stmts addLast: (encoder encodeVariable: 'nil')]].
  	theBlockNode
  		arguments: argNodes
  		statements: stmts
  		returns: returns
  		from: encoder.
  	parseNode :=3D theBlockNode.
  	currentComment :=3D savedComment.
  	^true!


--===============4302989130475915644==--


From commits@source.squeak.org Tue Oct 22 23:08:06 2024
From: commits@source.squeak.org
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] The Trunk: EToys-eem.520.mcz
Date: Tue, 22 Oct 2024 23:07:53 +0000
Message-ID: <20241022230800.CA5E95826D1@mail.squeak.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============4162464243767911914=="

--===============4162464243767911914==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

Eliot Miranda uploaded a new version of EToys to project The Trunk:
http://source.squeak.org/trunk/EToys-eem.520.mcz

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Summary =3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Name: EToys-eem.520
Author: eem
Time: 22 October 2024, 4:07:43.994443 pm
UUID: a13a92ec-da2e-46fa-91dd-4d89a65595b3
Ancestors: EToys-eem.519

Bring DialectParser class>>test up-to-date (CompiledMethodTrailer aware). It'=
s a useful test of pretty-printing.

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D Diff against EToys-eem.519 =3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

Item was changed:
  ----- Method: DialectParser class>>test (in category 'as yet unclassified')=
 -----
+ test=20
+    "DialectParser test"
- test    "DialectParser test"
 =20
+ 	"PrettyPrints the source for every method in the system in the alternative=
 syntax, and then compiles that source and verifies that it generates identic=
al code.  No changes are actually made to the system.  At the time of this wr=
iting, only two methods caused complaints (reported in Transcript and display=
ed in browse window after running):
- "PrettyPrints the source for every method in the system in the alternative =
syntax, and then compiles that source and verifies that it generates identica=
l code.  No changes are actually made to the system.  At the time of this wri=
ting, only two methods caused complaints (reported in Transcript and displaye=
d in browse window after running):
 =20
+ 		BalloonEngineSimulation circleCosTable and
+ 		BalloonEngineSimulation circleSinTable.
- 	BalloonEngineSimulation circleCosTable and
- 	BalloonEngineSimulation circleSinTable.
 =20
+ 	These are not errors, but merely a case of Floats embedded in literal arra=
ys, and thus not specially checked for roundoff errors.
- These are not errors, but merely a case of Floats embedded in literal array=
s, and thus not specially checked for roundoff errors.
 =20
+ 	Note that if an error or interruption occurs during execution of this meth=
od, the alternativeSyntax preference will be left on.
- Note that if an error or interruption occurs during execution of this metho=
d, the alternativeSyntax preference will be left on.
 =20
+ 	NOTE:  Some methods may not compare properly until the system has been rec=
ompiled once.  Do this by executing...
+ 			Smalltalk recompileAllFrom: 'AARDVAARK'.
+ 	"
- NOTE:  Some methods may not compare properly until the system has been reco=
mpiled once.  Do this by executing...
- 		Smalltalk recompileAllFrom: 'AARDVAARK'.
- "
 =20
+ 	| badOnes useColorWhenPrettyPrinting origAllowBlockAssignment |
- 	 | newCodeString methodNode oldMethod newMethod badOnes n heading |
  	Preferences enable: #printAlternateSyntax.
+ 	useColorWhenPrettyPrinting :=3D [Preferences colorWhenPrettyPrinting]
+ 											on: MessageNotUnderstood
+ 											do: [false].
+ 	origAllowBlockAssignment :=3D Scanner allowBlockArgumentAssignment.
+ 	Scanner allowBlockArgumentAssignment: true.
+ 	[badOnes :=3D OrderedCollection new.
- 	badOnes :=3D OrderedCollection new.
  	Transcript clear.
+ 	'Formatting and recompiling all classes...'
+ 		displayProgressAt: Sensor cursorPoint
+ 		from: 0 to: CompiledMethod instanceCount
+ 		during:
+ 			[:bar | | n |
+ 			 n :=3D 0.
+ 			Smalltalk allClassesDo:  "{MethodNode} do:"  "<- to check one class"
+ 				[:nonMeta |  "Transcript cr; show: nonMeta name."
+ 				{nonMeta. nonMeta class} do:
+ 					[:cls |
+ 					cls selectors do:
+ 						[:selector | | newCodeString methodNode oldMethod newMethod  heading |
+ 						(n :=3D n+1) \\ 100 =3D 0 ifTrue: [bar value: n].
+ 						oldMethod :=3D cls compiledMethodAt: selector.
+ 						newCodeString :=3D cls compilerClass new
+ 												format: oldMethod getSource asString
+ 												in: cls
+ 												notifying: nil
+ 												decorated: useColorWhenPrettyPrinting.
+ 						heading :=3D cls organization categoryOfElement: selector.
+ 						methodNode :=3D cls compilerClass new
+ 											compile: newCodeString
+ 											in: cls
+ 											notifying: nil
+ 											ifFail: [].
+ 						newMethod :=3D methodNode generate: oldMethod trailer.
+ 						"Transcript cr; show: cls name , ' ' , selector."
+ 						oldMethod =3D newMethod ifFalse:
+ 							[Transcript cr; show: '***' , cls name , ' ' , selector.
+ 							oldMethod size =3D newMethod size ifFalse:
+ 								[Transcript show: ' difft size'].
+ 							oldMethod header =3D newMethod header ifFalse:
+ 								[Transcript show: ' difft header'].
+ 							oldMethod literals =3D newMethod literals ifFalse:
+ 								[Transcript show: ' difft literals'].
+ 							Transcript endEntry.
+ 							badOnes add: cls name , ' ' , selector]]]]].
+ 	self systemNavigation browseMessageList: badOnes sort name: 'Formatter Dis=
crepancies']
+ 		ensure:
+ 			[Preferences disable: #printAlternateSyntax.
+ 			Scanner allowBlockArgumentAssignment: origAllowBlockAssignment]!
- 'Formatting and recompiling all classes...'
- displayProgressAt: Sensor cursorPoint
- from: 0 to: CompiledMethod instanceCount
- during: [:bar | n :=3D 0.
- 	Smalltalk allClassesDo:  "{MethodNode} do:"  "<- to check one class"
- 		[:nonMeta |  "Transcript cr; show: nonMeta name."
- 		{nonMeta. nonMeta class} do:
- 		[:cls |
- 		cls selectors do:
- 			[:selector | (n :=3D n+1) \\ 100 =3D 0 ifTrue: [bar value: n].
- 			newCodeString :=3D (cls compilerClass new)
- 				format: (cls sourceCodeAt: selector)
- 				in: cls notifying: nil decorated: Preferences colorWhenPrettyPrinting.
- 			heading :=3D cls organization categoryOfElement: selector.
- 			methodNode :=3D cls compilerClass new
- 						compile: newCodeString
- 						in: cls notifying: (SyntaxError new category: heading)
- 						ifFail: [].
- 			newMethod :=3D methodNode generate: CompiledMethodTrailer empty.
- 			oldMethod :=3D cls compiledMethodAt: selector.
- 			"Transcript cr; show: cls name , ' ' , selector."
- 			oldMethod =3D newMethod ifFalse:
- 				[Transcript cr; show: '***' , cls name , ' ' , selector.
- 				oldMethod size =3D newMethod size ifFalse:
- 					[Transcript show: ' difft size'].
- 				oldMethod header =3D newMethod header ifFalse:
- 					[Transcript show: ' difft header'].
- 				oldMethod literals =3D newMethod literals ifFalse:
- 					[Transcript show: ' difft literals'].
- 				Transcript endEntry.
- 				badOnes add: cls name , ' ' , selector]]]].
- ].
- 	self systemNavigation browseMessageList: badOnes sort name: 'Formatter Dis=
crepancies'.
- 	Preferences disable: #printAlternateSyntax.
- !


--===============4162464243767911914==--


From lasnikr@tuta.io Thu Oct 24 02:13:09 2024
From: lasnikr@tuta.io
To: squeak-dev@lists.squeakfoundation.org
Subject: [squeak-dev] Linux "/dev/..." dependencies
Date: Tue, 22 Oct 2024 16:13:55 +0000
Message-ID: <O9p-Nct--B-9@tuta.io>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="===============2145095121610231461=="

--===============2145095121610231461==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

Hi everyone,

I'm encountering an issue when trying to launch Squeak on my Linux-x86_64 mac=
hine running Wayland. Squeak is requesting access to the following files: `/d=
ev/tty*`, `/dev/fb*`, `/dev/input/event*`, and `/dev/input/mouse0`. However, =
on another machine also running Wayland, Squeak runs fine without needing acc=
ess to these files. Does anyone know why there's a difference?

In any case, I granted my user access to these files, but now Squeak is tryin=
g to open `/dev/fb0`, `/dev/fb`, and `/dev/fb0current`. I don't have any of t=
hese - only `/dev/fb1` - so I still can't start Squeak.

I'm running a fairly minimal Arch installation, and I suspect I'm missing som=
e dependency, with the files in `/dev/...` being fallback options for that mi=
ssing component. Ideally, I'd like to resolve this by installing the correct =
dependency, but any advice would be greatly appreciated.

Thanks!



--===============2145095121610231461==
Content-Type: text/html
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="attachment.html"
MIME-Version: 1.0

PGh0bWw+CiAgPGhlYWQ+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJjb250ZW50LXR5cGUiIGNvbnRl
bnQ9InRleHQvaHRtbDsgY2hhcnNldD1VVEYtOCI+CiAgPC9oZWFkPgogIDxib2R5Pgo8ZGl2IGRp
cj0iYXV0byI+PGRpdiBkaXI9ImF1dG8iPkhpIGV2ZXJ5b25lLDxicj48L2Rpdj48L2Rpdj48ZGl2
IGRpcj0iYXV0byI+PGJyPjwvZGl2PjxkaXYgZGlyPSJhdXRvIj5JJ20gZW5jb3VudGVyaW5nIGFu
IGlzc3VlIHdoZW4gdHJ5aW5nIHRvIGxhdW5jaCBTcXVlYWsgb24gbXkgTGludXgteDg2XzY0IG1h
Y2hpbmUgcnVubmluZyBXYXlsYW5kLiBTcXVlYWsgaXMgcmVxdWVzdGluZyBhY2Nlc3MgdG8gdGhl
IGZvbGxvd2luZyBmaWxlczogYC9kZXYvdHR5KmAsIGAvZGV2L2ZiKmAsIGAvZGV2L2lucHV0L2V2
ZW50KmAsIGFuZCBgL2Rldi9pbnB1dC9tb3VzZTBgLiBIb3dldmVyLCBvbiBhbm90aGVyIG1hY2hp
bmUgYWxzbyBydW5uaW5nIFdheWxhbmQsIFNxdWVhayBydW5zIGZpbmUgd2l0aG91dCBuZWVkaW5n
IGFjY2VzcyB0byB0aGVzZSBmaWxlcy4gRG9lcyBhbnlvbmUga25vdyB3aHkgdGhlcmUncyBhIGRp
ZmZlcmVuY2U/PGJyPjwvZGl2PjxkaXYgZGlyPSJhdXRvIj48YnI+PC9kaXY+PGRpdiBkaXI9ImF1
dG8iPkluIGFueSBjYXNlLCBJIGdyYW50ZWQgbXkgdXNlciBhY2Nlc3MgdG8gdGhlc2UgZmlsZXMs
IGJ1dCBub3cgU3F1ZWFrIGlzIHRyeWluZyB0byBvcGVuIGAvZGV2L2ZiMGAsIGAvZGV2L2ZiYCwg
YW5kIGAvZGV2L2ZiMGN1cnJlbnRgLiBJIGRvbid0IGhhdmUgYW55IG9mIHRoZXNlIC0gb25seSBg
L2Rldi9mYjFgIC0gc28gSSBzdGlsbCBjYW4ndCBzdGFydCBTcXVlYWsuPGJyPjwvZGl2PjxkaXYg
ZGlyPSJhdXRvIj48YnI+PC9kaXY+PGRpdiBkaXI9ImF1dG8iPkknbSBydW5uaW5nIGEgZmFpcmx5
IG1pbmltYWwgQXJjaCBpbnN0YWxsYXRpb24sIGFuZCBJIHN1c3BlY3QgSSdtIG1pc3Npbmcgc29t
ZSBkZXBlbmRlbmN5LCB3aXRoIHRoZSBmaWxlcyBpbiBgL2Rldi8uLi5gIGJlaW5nIGZhbGxiYWNr
IG9wdGlvbnMgZm9yIHRoYXQgbWlzc2luZyBjb21wb25lbnQuIElkZWFsbHksIEknZCBsaWtlIHRv
IHJlc29sdmUgdGhpcyBieSBpbnN0YWxsaW5nIHRoZSBjb3JyZWN0IGRlcGVuZGVuY3ksIGJ1dCBh
bnkgYWR2aWNlIHdvdWxkIGJlIGdyZWF0bHkgYXBwcmVjaWF0ZWQuPGJyPjwvZGl2PjxkaXYgZGly
PSJhdXRvIj48YnI+PC9kaXY+PGRpdiBkaXI9ImF1dG8iPlRoYW5rcyE8YnI+PC9kaXY+ICA8L2Jv
ZHk+CjwvaHRtbD4K

--===============2145095121610231461==--


