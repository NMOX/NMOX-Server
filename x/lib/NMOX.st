TestCase subclass: #NMOXTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!NMOXTests methodsFor: 'PAGE' stamp: 'DCL 8/27/2024 10:10'!testPageContainsArray    | rx result |    result := ''.    rx := PAGE new with: #('Hello').    result := rx render.    self assert: result = '<!!DOCTYPE html>Hello'.! !!NMOXTests methodsFor: 'PAGE' stamp: 'DCL 8/27/2024 09:49'!testPageContainsString    | rx result |    result := ''.    rx := PAGE new with: ''.    result := rx render.    self assert: result = '<!!DOCTYPE html>'.! !!NMOXTests methodsFor: 'PAGE' stamp: 'DCL 8/27/2024 11:09'!testPageContainsX    | rx result |    result := ''.    rx := PAGE new with: (X x: 'EXAMPLE').    result := rx render.    self assert: result = '<!!DOCTYPE html>EXAMPLE'.! !!NMOXTests methodsFor: 'HTML5' stamp: 'DCL 8/27/2024 13:19'!testHTML5ContainsArray    | rx |    rx := (X x: (PAGE x: (HTML5 x: (X new with: #('An' 'array' 'of' 'text' 'strings'))))).    self assert: rx render = '<!!DOCTYPE html><html>Anarrayoftextstrings</html>'.! !!NMOXTests methodsFor: 'HTML5' stamp: 'DCL 8/27/2024 11:27'!testHTML5ContainsString    | rx |    rx := HTML5 new with: 'Hello!!'.    self assert: rx render equals: '<html>Hello!!</html>'.! !!NMOXTests methodsFor: 'HTML5' stamp: 'DCL 8/27/2024 13:15'!testHTML5ContainsX    | rx |    rx := (X x: (PAGE x: (HTML5 x: (X new with: 'An X Object.')))).    self assert: rx render = '<!!DOCTYPE html><html>An X Object.</html>'.! !!NMOXTests methodsFor: 'HTML5' stamp: 'DCL 9/3/2024 10:26'!testIMGWithAttributes    "This tests IMG with attributes with 7 layers of recursion."    | rx myImage result |    myImage := IMG new.    myImage setXId: 'myOwnId'; setXClass: 'myCoolClass'; setXStyle: 'border: 1px solid black;'.    myImage setXSrc: 'https://i.imgur.com/VD00jAK.jpeg'; setXWidth: '300'; setXHeight: '200'.    rx := X x:      (PAGE x: "One"     (HTML5 x: "Two"        (Array with: "Three" (HEAD x: "Four" (TITLE x: 'Testing 7 Layers of Recursion')) "Five"               with: "Three" (BODY x: "Four" (DIV x: "Five" (Array with: "Six" (P x: 'P1')                                             with: (P x: 'The comments contain information')                                             with: (P x: 'about nested layers of recursion.')                                             with: "Six" (IMG x: myImage) "myImage is the 7th recursion layer")))))).result := rx render.self assert: result equals: '<!!DOCTYPE html><html><head><title>Testing 7 Layers of Recursion</title></head><body><div><p>P1</p><p>The comments contain information</p><p>about nested layers of recursion.</p><img src="https://i.imgur.com/VD00jAK.jpeg" width="300" height="200" style="border: 1px solid black;" id="myOwnId" class="myCoolClass" /></div></body></html>'.! !!NMOXTests methodsFor: 'x' stamp: 'DCL 8/27/2024 09:43'!testXContainsArray    | rx mx |    rx := X new.    mx := #('Hello!!').    rx with: mx.    self assert: ((rx x) isKindOf: Array)! !!NMOXTests methodsFor: 'x' stamp: 'DCL 8/27/2024 09:12'!testXContainsString    | result |    Transcript show: 'testXContainsString'; cr.! !!NMOXTests methodsFor: 'x' stamp: 'DCL 8/27/2024 09:41'!testXContainsX    | rx mx |    rx := X new.    mx := X new.    rx with: mx.    self assert: ((rx x) isKindOf: X)! !!NMOXTests methodsFor: 'learning' stamp: 'DCL 8/27/2024 09:39'!test7    "This tests 7 layers of recursion."    | rx myImage result |    myImage := IMG new.    myImage setXId: 'myOwnId'; setXClass: 'myCoolClass'; setXStyle: 'border: 1px solid black;'.    myImage setXSrc: 'https://i.imgur.com/VD00jAK.jpeg'; setXWidth: '300'; setXHeight: '200'.    rx := X x:      (PAGE x: "One"     (HTML5 x: "Two"        (Array with: "Three" (HEAD x: "Four" (TITLE x: 'Testing 7 Layers of Recursion')) "Five"               with: "Three" (BODY x: "Four" (DIV x: "Five" (Array with: "Six" (P x: 'P1')                                             with: (P x: 'The comments contain information')                                             with: (P x: 'about nested layers of recursion.')                                             with: "Six" (IMG x: myImage) "myImage is the 7th recursion layer")))))).result := rx render.self assert: result = '<!!DOCTYPE html><html><head><title>Testing 7 Layers of Recursion</title></head><body><div><p>P1</p><p>The comments contain information</p><p>about nested layers of recursion.</p><img src="https://i.imgur.com/VD00jAK.jpeg" width="300" height="200" style="border: 1px solid black;" id="myOwnId" class="myCoolClass" /></div></body></html>'.! !!NMOXTests methodsFor: 'learning' stamp: 'DCL 8/25/2024 12:18'!testAddition    | result |    result := 3 + 4.    self assert: result = 7.! !!NMOXTests methodsFor: 'learning' stamp: 'DCL 8/25/2024 16:23'!testDIVContainsPWithText    "This test ensures that a DIV object renders correctly when it contains a P object with text."    | div p result |    p := P new with: 'Hello World'.    div := DIV new with: p.    result := div render.    self assert: result equals: '<div><p>Hello World</p></div>'.! !!NMOXTests methodsFor: 'learning' stamp: 'DCL 8/25/2024 13:02'!testMultiplication    "Use `TestRunner open.` and find NMOX in the categories."    | result |    result := 3 * 4.    self assert: result = 12.! !!NMOXTests methodsFor: 'learning' stamp: 'DCL 8/25/2024 12:57'!testSubtraction    | result |    result := 3 - 4.    self assert: result = -1.! !Object subclass: #X	instanceVariableNames: 'x'	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!X commentStamp: 'DCL 8/14/2024 20:07' prior: 0!X is the foundation. Lowercase x holds data as code and code as data.!!X methodsFor: 'core' stamp: 'DCL 8/23/2024 09:33'!add: content    "I add content to x, which I force as an array"    "Author: DCL"    x := Array new copyWith: x.    x := x copyWith: content.! !!X methodsFor: 'core' stamp: 'DCL 8/23/2024 09:34'!initialize    "Author: DCL"  "super initialize."  "Transcript show: 'The initialize method has been called in the X class...'; cr."  x := 'INIT'.! !!X methodsFor: 'core' stamp: 'DCL 8/23/2024 09:34'!initialize: aContent    "Author: DCL"    x := aContent! !!X methodsFor: 'core' stamp: 'DCL 8/23/2024 09:34'!new    "Author: DCL"    ^super new initialize.! !!X methodsFor: 'core' stamp: 'DCL 9/5/2024 19:17'!reflectType    "This method returns the type of the instance variable x: either 'String', 'Array', or 'X' for objects of class X. If none of these, it returns 'Unknown'."    x isNil ifTrue: [ ^ 'Nil' ].    (x isKindOf: String) ifTrue: [ ^ 'String' ].    (x isKindOf: Array) ifTrue: [ ^ 'Array' ].    (x isKindOf: X) ifTrue: [ ^ 'X' ].    ^ 'Unknown'! !!X methodsFor: 'core' stamp: 'DCL 8/23/2024 09:34'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^contentString! !!X methodsFor: 'core' stamp: 'DCL 9/3/2024 08:59'!serialize    | json |    json := Dictionary new.    self class allInstVarNames do: [ :varName |        | value |        value := self instVarNamed: varName.        json at: varName put: (self serializeValue: value) ].    ^ json asJSONString.! !!X methodsFor: 'core' stamp: 'DCL 9/3/2024 09:00'!serializeValue: aValue    ^ (aValue isKindOf: X)         ifTrue: [ aValue serialize ]        ifFalse: [ aValue ].! !!X methodsFor: 'core' stamp: 'DCL 10/7/2024 18:25'!serve| rx serverSocket clientSocket response buffer timeout startTime |rx := X new with:      (PAGE new with:    (HTML5 new with:      (BODY new with:          (DIV new with:              (P new with: 'Hello, world!!'))))).serverSocket := Socket newTCP.serverSocket listenOn: 1337 backlogSize: 10.[    [        "Wait for a connection"        clientSocket := serverSocket waitForAcceptFor: 10.        "Only proceed if a connection was made"        clientSocket ifNotNil: [            "Create a buffer for incoming data"            buffer := ''.            timeout := 10. "Timeout in seconds"            startTime := Time millisecondClockValue.            "Read data from the socket"            [                buffer := buffer, (clientSocket receiveData).                Transcript show: 'Buffer so far: ', buffer; cr.                (buffer endsWith: (String crlf, String crlf))                or: [ (Time millisecondClockValue - startTime) > timeout * 1000 ]            ] whileFalse.            "Log the request"            Transcript show: 'Received request: ', buffer; cr.            "Serve HTML response"            response := 'HTTP/1.1 200 OK', String crlf,                        'Content-Type: text/html; charset=UTF-8', String crlf, String crlf,                        rx render. "Use the render method to convert rx to HTML"            "Send the response"            clientSocket sendData: response.            clientSocket close.        ].                "If clientSocket is nil, do nothing and wait for the next connection attempt."    ] repeat] fork.! !!X methodsFor: 'core' stamp: 'DCL 8/23/2024 09:35'!with: aValue    "Author: DCL"    "(aValue isKindOf: String) ifTrue: [ x := aValue ].    (aValue isKindOf: Array) ifTrue: [ x := aValue ].    (aValue isKindOf: X) ifTrue: [ x := aValue ]."    x := aValue.    ^self! !!X methodsFor: 'core' stamp: 'DCL 8/27/2024 09:20'!x    ^x! !!X methodsFor: 'core' stamp: 'DCL 8/23/2024 09:35'!xArrayTest    "Author: DCL"    | v concatenatedString |    v := Array with: 'boop' with: 'boop' with: 'boop'.    concatenatedString := ''.    v do: [:each | concatenatedString := concatenatedString, each].    Transcript show: concatenatedString.! !!X methodsFor: 'core' stamp: 'DCL 8/23/2024 09:35'!xFullTest    "Author: DCL"    | rx head body div p1 p2 |    head := HEAD new with: '<title>Hello, world!!</title>'.    body := BODY new.    div := DIV new.    p1 := P new with: 'Hello'.    p2 := P new with: 'World'.    div with: p1; add: p2.    body with: div.    rx := PAGE new with:    (HTML5 new with:      (HEAD new with: '<title>Hello, world!!</title>';                 add: (BODY new with: (DIV new with: p1; add: p2)))).Transcript show: rx render.! !!X methodsFor: 'core' stamp: 'DCL 8/23/2024 09:35'!xHelloWorldTest    "Author: DCL"    | rx |    Transcript clear.    Transcript show: 'NMOX: New Media On X. Squeak Smalltalk Edition v1.0.0.'; cr.    rx := X new with:      (PAGE new with:    (HTML5 new with:      (BODY new with:          (DIV new with:              (P new with: 'Hello, world!!'))))).Transcript show: rx render; cr.! !!X methodsFor: 'core' stamp: 'DCL 8/23/2024 09:35'!xHelloWorldTest2    "Author: DCL"    | rx |    Transcript clear. "Gives us a fresh Transcript."    Transcript show: 'NMOX: New Media On X. Squeak Smalltalk Edition v1.0.0.'; cr. "ID"    rx := X x: "Everything is on X"     (PAGE x: "PAGE adds <!!DOCTYPE html>"   (HTML5 x: "<html></html>"     (BODY x: "<body></body>"        (DIV x: "<div></div>"            (P x: 'Hello, world!!'))))).Transcript show: rx render; cr.! !!X methodsFor: 'core' stamp: 'DCL 8/23/2024 09:35'!xHelloWorldTest3    "Author: DCL"    | rx |    Transcript clear. "Gives us a fresh Transcript."    "Transcript show: 'NMOX: New Media On X. Squeak Smalltalk Edition v1.0.0.'; cr." "ID"    rx := X x: "Everything is on X"     (PAGE x: "PAGE adds <!!DOCTYPE html>"   (HTML5 x: "<html></html>"    (Array with: (HEAD x: '<title>Hello, world!!</title>')               with: (BODY x: "<body></body>"                           (DIV x: "<div></div>"                               (Array with: (P x: 'Hello, world!!')                                          with: (P x: 'Hi.'))))))).Transcript show: rx render; cr.! !!X methodsFor: 'core' stamp: 'DCL 8/23/2024 09:35'!xHelloWorldTest4    "Author: DCL"    | rx |    Transcript clear. "Gives us a fresh Transcript."    rx := X x: "Everything is on X"     (PAGE x: "PAGE adds <!!DOCTYPE html>"   (HTML5 x: "<html></html>"    (Array with: (HEAD x: (TITLE x: 'Hello, World!!'))               with: (BODY x: "<body></body>"                           (DIV x: "<div></div>"                               (Array with: (P x: 'Hello, world!!')                                          with: (P x: 'Hi.')                                          with: (P x: 'Oh, hello.'))))))).Transcript show: rx render; cr.! !!X methodsFor: 'core' stamp: 'DCL 8/23/2024 09:35'!xHelloWorldTest5    "Author: DCL"    | rx pmodule |    Transcript clear. "Gives us a fresh Transcript."    pmodule := (Array with: (P x: 'Hello, world!!')                      with: (P x: 'Hiya.')                      with: (P x: 'Oh yes, hello.')).    rx := X x: "Everything is on X"      (PAGE x: "PAGE adds <!!DOCTYPE html>"     (HTML5 x: "<html></html>"        (Array with: (HEAD x: (TITLE x: 'Hello, World!!'))               with: (BODY x: "<body></body>"                           (DIV x: "<div></div>"                               pmodule))))).Transcript show: rx render; cr.! !!X methodsFor: 'core' stamp: 'DCL 9/3/2024 10:58'!xHelloWorldTest6    "Author: DCL"    | rx myImage |    Transcript clear.    myImage := IMG new.    myImage setXId: 'myId'; setXClass: 'myClass'; setXStyle: 'border: 0;'.    myImage setXSrc: 'imgURL'; setXWidth: '120'; setXHeight: '120'.    rx := X x:      (PAGE x:     (HTML5 x:        (Array with: (HEAD x: (TITLE x: 'xHelloWorldTest6'))               with: (BODY x: (DIV x: (Array with: (P x: 'P1')                                             with: (P x: 'P2')                                             with: (P x: 'P3')                                             with: (IMG x: myImage))))))).Transcript show: rx render.! !!X methodsFor: 'core' stamp: 'DCL 8/23/2024 09:35'!xTest    "Author: DCL"    | rx |    rx := PAGE new with:      (HTML5 new with:           (DIV new with:            (P new with: (X new with: 'Hello!!')    ))).    Transcript show: rx render.! !!X methodsFor: 'core' stamp: 'DCL 8/23/2024 09:36'!xTestChatGPT    "Author: DCL"    | chat prompt |    chat := ChatGPT new.    prompt := Prompt new.    chat demo.! !!X methodsFor: 'core' stamp: 'DCL 8/23/2024 09:36'!xTestDCHMClient    "Author: DCL"    | myclient |    myclient := DCHMClient new.    myclient demo.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!X class	instanceVariableNames: ''!!X class methodsFor: 'as yet unclassified' stamp: 'DCL 8/19/2024 11:25'!x: anItem    ^ self new with: anItem! !X subclass: #API	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!API commentStamp: 'DCL 8/14/2024 19:42' prior: 0!An API is an X that wants to serve data.!!API methodsFor: 'CRUD' stamp: 'DCL 8/22/2024 12:22'!create    Transcript show: 'API Create method called.'! !!API methodsFor: 'CRUD' stamp: 'DCL 8/22/2024 13:43'!delete    "delete"    Transcript show: 'API DELETE method called.'! !!API methodsFor: 'CRUD' stamp: 'DCL 8/22/2024 13:41'!read    "read"    Transcript show: 'API READ method called.'! !!API methodsFor: 'CRUD' stamp: 'DCL 8/22/2024 13:43'!update    "update"    Transcript show: 'API UPDATE method called.'! !!API methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:50'!render    "Author: DCL"    Transcript show: 'I am an API.'; cr.! !!API methodsFor: 'as yet unclassified' stamp: 'DCL 8/14/2024 19:22'!send: message  Transcript show: 'Sending ', message; cr.! !API subclass: #GRPC	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!GRPC commentStamp: 'DCL 8/14/2024 19:42' prior: 0!gRPC, or Google's Remote Procedure Calls.!!GRPC methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:51'!render    "Author: DCL"    Transcript show: 'I am a gRPC API.'; cr.! !X subclass: #MEDIA	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!MEDIA methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:51'!render    "Author: DCL"    Transcript show: 'I am MEDIA.'; cr.! !MEDIA subclass: #GIF	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!GIF methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:52'!render    "Author: DCL"    Transcript show: 'I am a GIF.'; cr.! !MEDIA subclass: #JPG	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!JPG methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:52'!render    "Author: DCL"    Transcript show: 'I am a JPG.'; cr.! !X subclass: #PAGE	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!PAGE methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:44'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<!!DOCTYPE html>', contentString! !PAGE subclass: #HTML5	instanceVariableNames: 'xalt xaria xattributes xclass xcontenteditable xdata xdir xdisabled xdraggable xheight xhidden xhref xid xlang xmaxlength xminlength xname xpattern xplaceholder xreadonly xrel xrole xsizes xspellcheck xsrc xstyle xtabindex xtag xtarget xtitle xtype xtranslate xvalue xwidth'	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!HTML5 methodsFor: 'core' stamp: 'DCL 9/10/2024 13:06'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<html', xattributes,'>', contentString, '</html>'! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 18:03'!setXAlt: altToSet    xalt := altToSet.! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/26/2024 13:26'!setXAria: ariaToSet    xaria := ariaToSet.! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/26/2024 08:41'!setXClass: classToSet    xclass := classToSet. "Smalltalk uses 'class', so we adapt by using myClass"! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 09:26'!setXHeight: heightToSet    xheight := heightToSet.! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 09:27'!setXId: idToSet 	xid := idToSet.! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 09:24'!setXSrc: srcToSet    xsrc := srcToSet.! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/26/2024 13:19'!setXStyle: styleToSet    xstyle := styleToSet! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 09:23'!setXTag: tagToSet    xtag := tagToSet.! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 09:25'!setXWidth: widthToSet    xwidth := widthToSet.! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/26/2024 13:33'!xalt    ^xalt! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/26/2024 13:27'!xaria    ^xaria! !!HTML5 methodsFor: 'x' stamp: 'DCL 9/11/2024 17:11'!xattributes    "I return a concatenation of all of the tag attributes as a string."    | attributes |    attributes := ''.    "Add the alt attribute if xalt is not nil"    xalt isNil ifFalse: [        attributes := attributes , ' alt="', xalt, '"'    ].    "Add the aria attribute if xaria is not nil"    xaria isNil ifFalse: [        attributes := attributes , ' aria="', xaria, '"'    ].    "Add the class attribute if xclass is not nil"    xclass isNil ifFalse: [        attributes := attributes , ' class="', xclass, '"'    ].    "Add the contenteditable attribute if xcontenteditable is not nil"    xcontenteditable isNil ifFalse: [        attributes := attributes , ' contenteditable="', xcontenteditable, '"'    ].    "Add the data attribute if xdata is not nil"    xdata isNil ifFalse: [        attributes := attributes , ' data="', xdata, '"'    ].    "Add the dir attribute if xdir is not nil"    xdir isNil ifFalse: [        attributes := attributes , ' dir="', xdir, '"'    ].    "Add the disabled attribute if xdisabled is not nil"    xdisabled isNil ifFalse: [        attributes := attributes , ' disabled="', xdisabled, '"'    ].    "Add the draggable attribute if xdraggable is not nil"    xdraggable isNil ifFalse: [        attributes := attributes , ' draggable="', xdraggable, '"'    ].    "Add the height attribute if xheight is not nil"    xheight isNil ifFalse: [        attributes := attributes , ' height="', xheight, '"'    ].    "Add the hidden attribute if xhidden is not nil"    xhidden isNil ifFalse: [        attributes := attributes , ' hidden="', xhidden, '"'    ].    "Add the href attribute if xhref is not nil"    xhref isNil ifFalse: [        attributes := attributes , ' href="', xhref, '"'    ].    "Add the id attribute if xid is not nil"    xid isNil ifFalse: [        attributes := attributes , ' id="', xid, '"'    ].    "Add the lang attribute if xlang is not nil"    xlang isNil ifFalse: [        attributes := attributes , ' lang="', xlang, '"'    ].    "Add the maxlength attribute if xmaxlength is not nil"    xmaxlength isNil ifFalse: [        attributes := attributes , ' maxlength="', xmaxlength, '"'    ].    "Add the minlength attribute if xminlength is not nil"    xminlength isNil ifFalse: [        attributes := attributes , ' minlength="', xminlength, '"'    ].    "Add the name attribute if xname is not nil"    xname isNil ifFalse: [        attributes := attributes , ' name="', xname, '"'    ].    "Add the pattern attribute if xpattern is not nil"    xpattern isNil ifFalse: [        attributes := attributes , ' pattern="', xpattern, '"'    ].    "Add the placeholder attribute if xplaceholder is not nil"    xplaceholder isNil ifFalse: [        attributes := attributes , ' placeholder="', xplaceholder, '"'    ].    "Add the readonly attribute if xreadonly is not nil"    xreadonly isNil ifFalse: [        attributes := attributes , ' readonly="', xreadonly, '"'    ].    "Add the rel attribute if xrel is not nil"    xrel isNil ifFalse: [        attributes := attributes , ' rel="', xrel, '"'    ].    "Add the role attribute if xrole is not nil"    xrole isNil ifFalse: [        attributes := attributes , ' role="', xrole, '"'    ].    "Add the sizes attribute if xsizes is not nil"    xsizes isNil ifFalse: [        attributes := attributes , ' sizes="', xsizes, '"'    ].    "Add the spellcheck attribute if xspellcheck is not nil"    xspellcheck isNil ifFalse: [        attributes := attributes , ' spellcheck="', xspellcheck, '"'    ].    "Add the src attribute if xsrc is not nil"    xsrc isNil ifFalse: [        attributes := attributes , ' src="', xsrc, '"'    ].    "Add the style attribute if xstyle is not nil"    xstyle isNil ifFalse: [        attributes := attributes , ' style="', xstyle, '"'    ].    "Add the sizes attribute if xsizes is not nil"    xsizes isNil ifFalse: [        attributes := attributes , ' sizes="', xsizes, '"'    ].    "Add the spellcheck attribute if xspellcheck is not nil"    xspellcheck isNil ifFalse: [        attributes := attributes , ' spellcheck="', xspellcheck, '"'    ].    "Add the src attribute if xsrc is not nil"    xsrc isNil ifFalse: [        attributes := attributes , ' src="', xsrc, '"'    ].    "Add the style attribute if xstyle is not nil"    xstyle isNil ifFalse: [        attributes := attributes , ' style="', xstyle, '"'    ].    "Add the tabindex attribute if xtabindex is not nil"    xtabindex isNil ifFalse: [        attributes := attributes , ' tabindex="', xtabindex, '"'    ].    "Add the tag attribute if xtag is not nil"    xtag isNil ifFalse: [        attributes := attributes , ' tag="', xtag, '"'    ].    "Add the target attribute if xtarget is not nil"    xtarget isNil ifFalse: [        attributes := attributes , ' target="', xtarget, '"'    ].    "Add the title attribute if xtitle is not nil"    xtitle isNil ifFalse: [        attributes := attributes , ' title="', xtitle, '"'    ].    "Add the translate attribute if xtranslate is not nil"    xtranslate isNil ifFalse: [        attributes := attributes , ' translate="', xtranslate, '"'    ].    "Add the type attribute if xtype is not nil"    xtype isNil ifFalse: [        attributes := attributes , ' type="', xtype, '"'    ].    "Add the value attribute if xvalue is not nil"    xvalue isNil ifFalse: [        attributes := attributes , ' value="', xvalue, '"'    ].    "Add the width attribute if xwidth is not nil"    xwidth isNil ifFalse: [        attributes := attributes , ' width="', xwidth, '"'    ].    ^attributes.! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/26/2024 13:27'!xclass    ^xclass! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/26/2024 13:33'!xcontenteditable    ^xcontenteditable! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/26/2024 13:33'!xdata    ^xdata! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/26/2024 13:34'!xdir    ^xdir! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/26/2024 13:34'!xdisabled    ^xdisabled! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/26/2024 13:35'!xdraggable    ^xdraggable! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/26/2024 13:36'!xheight    ^xheight! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/26/2024 13:36'!xhidden    ^xhidden! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/26/2024 13:36'!xhref    ^xhref! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/26/2024 13:58'!xid    ^xid! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/26/2024 13:58'!xlang    ^xlang! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 17:56'!xmaxlength    ^xmaxlength! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 17:56'!xminlength    ^xminlength! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 17:56'!xname    ^xname.! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 17:57'!xpattern    ^xpattern! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 17:57'!xplaceholder    ^xplaceholder! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 17:57'!xreadonly    ^xreadonly! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 17:57'!xrel    ^xrel.! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 17:58'!xrole    ^xrole.! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 17:58'!xsizes    ^xsizes.! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 17:58'!xspellcheck    ^xspellcheck! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 09:33'!xsrc    ^xsrc.! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 09:33'!xstyle    ^xstyle.! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 17:59'!xtabindex    ^xtabindex.! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 17:59'!xtag    ^xtag.! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 17:59'!xtarget    ^xtarget.! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 18:00'!xtitle    ^xtitle.! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 18:00'!xtranslate    ^xtranslate.! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 18:00'!xtype    ^xtype.! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/27/2024 18:01'!xvalue    ^xvalue.! !!HTML5 methodsFor: 'x' stamp: 'DCL 8/26/2024 08:52'!xwidth    ^xwidth! !HTML5 subclass: #A	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!A methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:44'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<a href="#">', contentString, '</a>'! !HTML5 subclass: #ABBR	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!ABBR methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 12:57'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<abbr>', contentString, '</abbr>'! !HTML5 subclass: #ADDRESS	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!ADDRESS methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 12:58'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<address>', contentString, '</address>'! !HTML5 subclass: #ARTICLE	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!ARTICLE methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 12:58'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<article>', contentString, '</article>'! !HTML5 subclass: #ASIDE	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!ASIDE methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 12:59'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<aside>', contentString, '</aside>'! !HTML5 subclass: #B	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!B methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 12:59'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<b>', contentString, '</b>'! !HTML5 subclass: #BLOCKQUOTE	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!BLOCKQUOTE methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 13:00'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<blockquote>', contentString, '</blockquote>'! !HTML5 subclass: #BODY	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!BODY methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:44'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<body>', contentString, '</body>'! !HTML5 subclass: #BUTTON	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!BUTTON methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 13:01'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<button>', contentString, '</button>'! !HTML5 subclass: #CANVAS	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!CANVAS methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 13:02'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<canvas>', contentString, '</canvas>'! !HTML5 subclass: #CITE	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!CITE methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 13:03'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<cite>', contentString, '</cite>'! !HTML5 subclass: #CODE	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!CODE methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:14'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<code>', contentString, '</code>'! !HTML5 subclass: #DETAILS	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!DETAILS methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:15'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<details>', contentString, '</details>'! !HTML5 subclass: #DFN	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!DFN methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:16'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<dfn>', contentString, '</dfn>'! !HTML5 subclass: #DIV	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!DIV methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:44'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<div>', contentString, '</div>'! !HTML5 subclass: #EM	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!EM methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:19'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<em>', contentString, '</em>'! !HTML5 subclass: #FIELDSET	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!FIELDSET methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:19'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<fieldset>', contentString, '</fieldset>'! !HTML5 subclass: #FIGCAPTION	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!FIGCAPTION methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:19'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<figcaption>', contentString, '</figcaption>'! !HTML5 subclass: #FIGURE	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!FIGURE methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:22'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<figure>', contentString, '</figure>'! !HTML5 subclass: #FOOTER	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!FOOTER methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:23'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<footer>', contentString, '</footer>'! !HTML5 subclass: #FORM	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!FORM methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:25'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<form>', contentString, '</form>'! !HTML5 subclass: #H1	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!H1 methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:44'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<h1>', contentString, '</h1>'! !HTML5 subclass: #H2	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!H2 methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:45'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<h2>', contentString, '</h2>'! !HTML5 subclass: #H3	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!H3 methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:45'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<h3>', contentString, '</h3>'! !HTML5 subclass: #H4	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!H4 methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:45'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<h4>', contentString, '</h4>'! !HTML5 subclass: #H5	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!H5 methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:45'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<h5>', contentString, '</h5>'! !HTML5 subclass: #H6	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!H6 methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:45'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<h6>', contentString, '</h6>'! !HTML5 subclass: #HEAD	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!HEAD methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:45'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<head>', contentString, '</head>'! !HTML5 subclass: #HEADER	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!HEADER methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:25'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<header>', contentString, '</header>'! !HTML5 subclass: #HR	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!HR methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:45'!render    "Author: DCL"    ^ '<hr />'.! !HTML5 subclass: #I	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!I methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:26'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<i>', contentString, '</i>'! !HTML5 subclass: #IMG	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!IMG methodsFor: 'core' stamp: 'DCL 8/27/2024 18:15'!initialize    "Author: DCL"    "TODO: Start with this method as the one that can handle attributes"    self setXTag: 'img'.    self setXSrc: ''.    self setXWidth: ''.    self setXHeight: ''.    self setXStyle: ''.    self setXId: ''.    self setXClass: ''.! !!IMG methodsFor: 'core' stamp: 'DCL 8/27/2024 18:15'!render    "Author: DCL"    "TODO: Start with this method as the one that can handle attributes"    ^ '<', xtag, ' src="', x xsrc, '" width="', x xwidth, '" height="', x xheight, '" style="', x xstyle, '" id="', x xid, '" class="', x xclass, '" />'.! !HTML5 subclass: #LABEL	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!LABEL methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:28'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<label>', contentString, '</label>'! !HTML5 subclass: #LEGEND	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!LEGEND methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:28'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<legend>', contentString, '</legend>'! !HTML5 subclass: #LI	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!LI methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:46'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<li>', contentString, '</li>'! !HTML5 subclass: #MAIN	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!MAIN methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:29'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<main>', contentString, '</main>'! !HTML5 subclass: #NAV	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!NAV methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:29'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<nav>', contentString, '</nav>'! !HTML5 subclass: #NOSCRIPT	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!NOSCRIPT methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:29'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<noscript>', contentString, '</noscript>'! !HTML5 subclass: #OBJECT	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!OBJECT methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:30'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<object>', contentString, '</object>'! !HTML5 subclass: #OL	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!OL methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:30'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<ol>', contentString, '</ol>'! !HTML5 subclass: #OPTGROUP	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!OPTGROUP methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:31'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<optgroup>', contentString, '</optgroup>'! !HTML5 subclass: #OPTION	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!OPTION methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:31'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<option>', contentString, '</option>'! !HTML5 subclass: #OUTPUT	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!OUTPUT methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:31'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<output>', contentString, '</output>'! !HTML5 subclass: #P	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!P methodsFor: 'as yet unclassified' stamp: 'DCL 9/10/2024 13:03'!render    "Author: DCL"    | contentString attributes |    "Initialize contentString as empty"    contentString := ''.    "If x is not nil, build the content string"    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    "Initialize attributes as an empty string"    attributes := self xattributes.    "Return the rendered <p> tag with attributes"    ^'<p', attributes, '>', contentString, '</p>'! !PAGE subclass: #PDF	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!PDF methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:47'!render    "Author: DCL"    Transcript show: 'I am a PDF!!'; cr.! !MEDIA subclass: #PNG	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!PNG methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:52'!render    "Author: DCL"    Transcript show: 'I am a PNG.'; cr.! !HTML5 subclass: #PRE	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!PRE methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:33'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<pre>', contentString, '</pre>'! !HTML5 subclass: #PROGRESS	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!PROGRESS methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:33'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<progress>', contentString, '</progress>'! !HTML5 subclass: #Q	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!Q methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:33'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<q>', contentString, '</q>'! !API subclass: #REST	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!REST commentStamp: 'DCL 8/23/2024 09:21' prior: 0!THIS COMMENT HAS NO CLASS!!!!REST methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:51'!render    "Author: DCL"    Transcript show: 'I am a REST API.'; cr.! !HTML5 subclass: #S	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!S methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:34'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<s>', contentString, '</s>'! !HTML5 subclass: #SAMP	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!SAMP methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:34'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<samp>', contentString, '</samp>'! !HTML5 subclass: #SECTION	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!SECTION methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:35'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<section>', contentString, '</section>'! !HTML5 subclass: #SELECT	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!SELECT methodsFor: 'as yet unclassified' stamp: 'DCL 8/24/2024 18:35'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<select>', contentString, '</select>'! !HTML5 subclass: #SMALL	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!HTML5 subclass: #SPAN	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!SPAN methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:46'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<span>', contentString, '</span>'! !HTML5 subclass: #TABLE	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!TABLE methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:46'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<table>', contentString, '</table>'! !HTML5 subclass: #TD	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!TD methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:46'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<td>', contentString, '</td>'! !HTML5 subclass: #TH	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!TH methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:46'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<th>', contentString, '</th>'! !HTML5 subclass: #TITLE	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!TITLE methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:47'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<title>', contentString, '</title>'! !HTML5 subclass: #TR	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!TR methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:47'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<tr>', contentString, '</tr>'! !HTML5 subclass: #UL	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!UL methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:47'!render    "Author: DCL"    | contentString |    contentString := ''.    x isNil ifFalse: [        (x isKindOf: Array) ifTrue: [            contentString := x inject: '' into: [:acc :each | acc , ((each isKindOf: String) ifTrue: [each] ifFalse: [each render])]        ] ifFalse: [            contentString := (x isKindOf: String) ifTrue: [x] ifFalse: [x render]        ].    ].    ^'<ul>', contentString, '</ul>'! !PAGE subclass: #XML	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!XML methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:48'!render    "Author: DCL"    Transcript show: 'I am XML.'; cr.! !XML subclass: #XHTML	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NMOX'!!XHTML methodsFor: 'as yet unclassified' stamp: 'DCL 8/23/2024 09:49'!render    "Author: DCL"    Transcript show: 'I am XHTML.'; cr.! !