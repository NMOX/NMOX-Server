MessageNotUnderstood: SmalltalkImage>>fileOutCategory:toFileNamed:2 December 2024 3:55:57.531528 pmVM: Mac OS - SmalltalkImage: Squeak6.0 [latest update: #22153]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir /Users/david/vcs/git/github/nmox/NMOX-Server/x/libTrusted Dir /Users/david/vcs/git/github/nmox/NMOX-Server/x/lib/secureUntrusted Dir /Users/david/vcs/git/github/nmox/NMOX-Server/x/lib/My SqueakSmalltalkImage(Object)>>doesNotUnderstand: #fileOutCategory:toFileNamed:	Receiver: Smalltalk	Arguments and temporary variables: 		aMessage: 	fileOutCategory: 'NMOX' toFileNamed: 'NMOX.st'		exception: 	MessageNotUnderstood: SmalltalkImage>>fileOutCategory:toFileNamed:		resumeValue: 	nil	Receiver's instance variables: 		globals: 	SmalltalkUndefinedObject>>DoIt	Receiver: nil	Arguments and temporary variables: 	Receiver's instance variables: nilCompiler>>evaluateCue:ifFail:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in Compiler>>evaluateCue:ifFail:logged:		methodNode: 	DoIt	^ Smalltalk fileOutCategory: 'NMOX' toFileNamed: 'NMOX.st'		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(829556)")		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluateCue:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:...etc...		logFlag: 	true		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluate:in:to:environment:notifying:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		textOrStream: 	a ReadStream		aContext: 	nil		receiver: 	nil		anEnvironment: 	Smalltalk		aRequestor: 	a SmalltalkEditor		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:...etc...		logFlag: 	true	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCue[] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		aBlock: 	[closure] in SmalltalkEditor(TextEditor)>>evaluateSelection		result: 	nil		rcvr: 	nil		ctxt: 	nil	Receiver's instance variables: 		morph: 	a TextMorphForEditView(1078813)		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 109 and character $S and rectangle 6@340...etc...		pointBlock: 	a CharacterBlock with index 166 and character Character return and ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextColor code: (Color r: 0.863 g: 0.196 b: 0.185)}		lastParenLocation: 	nil		otherInterval: 	(143 to: 154)		oldInterval: 	(167 to: 166)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistoryFullBlockClosure(BlockClosure)>>on:do:	Receiver: [closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Arguments and temporary variables: 		exceptionOrExceptionSet: 	OutOfScopeNotification		handlerAction: 	[closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:...etc...		handlerActive: 	true		handlerRearmed: 	false	Receiver's instance variables: 		outerContext: 	SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:		startpcOrMethod: 	([] in TextEditor>>#evaluateSelectionAndDo: "a CompiledBlock(3...etc...		numArgs: 	0		receiver: 	a SmalltalkEditorSmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		aBlock: 	[closure] in SmalltalkEditor(TextEditor)>>evaluateSelection		result: 	nil		rcvr: 	nil		ctxt: 	nil	Receiver's instance variables: 		morph: 	a TextMorphForEditView(1078813)		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 109 and character $S and rectangle 6@340...etc...		pointBlock: 	a CharacterBlock with index 166 and character Character return and ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextColor code: (Color r: 0.863 g: 0.196 b: 0.185)}		lastParenLocation: 	nil		otherInterval: 	(143 to: 154)		oldInterval: 	(167 to: 166)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistorySmalltalkEditor(TextEditor)>>evaluateSelection	Receiver: a SmalltalkEditor	Arguments and temporary variables: 	Receiver's instance variables: 		morph: 	a TextMorphForEditView(1078813)		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 109 and character $S and rectangle 6@340...etc...		pointBlock: 	a CharacterBlock with index 166 and character Character return and ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextColor code: (Color r: 0.863 g: 0.196 b: 0.185)}		lastParenLocation: 	nil		otherInterval: 	(143 to: 154)		oldInterval: 	(167 to: 166)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistorySmalltalkEditor(TextEditor)>>doIt	Receiver: a SmalltalkEditor	Arguments and temporary variables: 	Receiver's instance variables: 		morph: 	a TextMorphForEditView(1078813)		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 109 and character $S and rectangle 6@340...etc...		pointBlock: 	a CharacterBlock with index 166 and character Character return and ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextColor code: (Color r: 0.863 g: 0.196 b: 0.185)}		lastParenLocation: 	nil		otherInterval: 	(143 to: 154)		oldInterval: 	(167 to: 166)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory[] in PluggableTextMorphPlus(PluggableTextMorph)>>doIt	Receiver: a PluggableTextMorphPlus(3628983)	Arguments and temporary variables: 	Receiver's instance variables: 		bounds: 	1605@949 corner: 2169@1421		owner: 	a PluggableSystemWindow<Workspace>(370723)		submorphs: 	{a TransformMorph(3838707)}		fullBounds: 	1605@949 corner: 2169@1421		color: 	(Color r: 0.152 g: 0.156 b: 0.133)		extension: 	a MorphExtension (3473619) [other:  (wrapBorderColor -> (Translucent...etc...		borderWidth: 	0		borderColor: 	(Color r: 0.147 g: 0.145 b: 0.124)		model: 	a Workspace		slotName: 	nil		open: 	false		scrollBar: 	a ScrollBar(607661)		scroller: 	a TransformMorph(3838707)		retractableScrollBar: 	false		scrollBarOnLeft: 	false		getMenuSelector: 	#codePaneMenu:shifted:		getMenuTitleSelector: 	nil		hasFocus: 	false		hScrollBar: 	a ScrollBar(4028793)		hScrollBarPolicy: 	#never		vScrollBarPolicy: 	#whenNeeded		scrollBarThickness: 	19		textMorph: 	a TextMorphForEditView(1078813)		getTextSelector: 	#contents		setTextSelector: 	#contents:notifying:		getSelectionSelector: 	#contentsSelection		hasUnacceptedEdits: 	true		hasUserEdited: 	true		askBeforeDiscardingEdits: 	true		selectionInterval: 	(119 to: 154)		hasEditingConflicts: 	false		editTextSelector: 	nil		wantsWrapBorder: 	false		getFontSelector: 	nil		getTextStyleSelector: 	nil		getColorSelector: 	nil		acceptAction: 	nil		unstyledAcceptText: 	nil		styler: 	a SHTextStylerST80		getTextColorSelector: 	nilTextMorphForEditView(TextMorph)>>handleEdit:	Receiver: a TextMorphForEditView(1078813)	Arguments and temporary variables: 		editBlock: 	[closure] in PluggableTextMorphPlus(PluggableTextMorph)>>doIt		result: 	nil	Receiver's instance variables: 		bounds: 	0@0 corner: 564@442		owner: 	a TransformMorph(3838707)		submorphs: 	#()		fullBounds: 	0@0 corner: 564@442		color: 	(Color r: 0.973 g: 0.973 b: 0.949)		extension: 	a MorphExtension (2686075) [other:  (unfocusedSelectionColor -> (Col...etc...		borderWidth: 	0		borderColor: 	Color black		textStyle: 	a TextStyle(11) BitstreamVeraSansForSqueak		text: 	a Text for '| x |x := X new.x serve.x xHelloWorldTest6.


"Replac...etc...		wrapFlag: 	true		paragraph: 	a NewParagraph		editor: 	a SmalltalkEditor		container: 	nil		predecessor: 	nil		successor: 	nil		backgroundColor: 	nil		margins: 	6@0 corner: 6@0		readOnly: 	false		autoFit: 	true		plainTextOnly: 	false		numCharactersPerLine: 	nil		editView: 	a PluggableTextMorphPlus(3628983)		acceptOnCR: 	falsePluggableTextMorphPlus(PluggableTextMorph)>>handleEdit:	Receiver: a PluggableTextMorphPlus(3628983)	Arguments and temporary variables: 		editBlock: 	[closure] in PluggableTextMorphPlus(PluggableTextMorph)>>doIt		result: 	nil	Receiver's instance variables: 		bounds: 	1605@949 corner: 2169@1421		owner: 	a PluggableSystemWindow<Workspace>(370723)		submorphs: 	{a TransformMorph(3838707)}		fullBounds: 	1605@949 corner: 2169@1421		color: 	(Color r: 0.152 g: 0.156 b: 0.133)		extension: 	a MorphExtension (3473619) [other:  (wrapBorderColor -> (Translucent...etc...		borderWidth: 	0		borderColor: 	(Color r: 0.147 g: 0.145 b: 0.124)		model: 	a Workspace		slotName: 	nil		open: 	false		scrollBar: 	a ScrollBar(607661)		scroller: 	a TransformMorph(3838707)		retractableScrollBar: 	false		scrollBarOnLeft: 	false		getMenuSelector: 	#codePaneMenu:shifted:		getMenuTitleSelector: 	nil		hasFocus: 	false		hScrollBar: 	a ScrollBar(4028793)		hScrollBarPolicy: 	#never		vScrollBarPolicy: 	#whenNeeded		scrollBarThickness: 	19		textMorph: 	a TextMorphForEditView(1078813)		getTextSelector: 	#contents		setTextSelector: 	#contents:notifying:		getSelectionSelector: 	#contentsSelection		hasUnacceptedEdits: 	true		hasUserEdited: 	true		askBeforeDiscardingEdits: 	true		selectionInterval: 	(119 to: 154)		hasEditingConflicts: 	false		editTextSelector: 	nil		wantsWrapBorder: 	false		getFontSelector: 	nil		getTextStyleSelector: 	nil		getColorSelector: 	nil		acceptAction: 	nil		unstyledAcceptText: 	nil		styler: 	a SHTextStylerST80		getTextColorSelector: 	nilPluggableTextMorphPlus(PluggableTextMorph)>>doIt	Receiver: a PluggableTextMorphPlus(3628983)	Arguments and temporary variables: 	Receiver's instance variables: 		bounds: 	1605@949 corner: 2169@1421		owner: 	a PluggableSystemWindow<Workspace>(370723)		submorphs: 	{a TransformMorph(3838707)}		fullBounds: 	1605@949 corner: 2169@1421		color: 	(Color r: 0.152 g: 0.156 b: 0.133)		extension: 	a MorphExtension (3473619) [other:  (wrapBorderColor -> (Translucent...etc...		borderWidth: 	0		borderColor: 	(Color r: 0.147 g: 0.145 b: 0.124)		model: 	a Workspace		slotName: 	nil		open: 	false		scrollBar: 	a ScrollBar(607661)		scroller: 	a TransformMorph(3838707)		retractableScrollBar: 	false		scrollBarOnLeft: 	false		getMenuSelector: 	#codePaneMenu:shifted:		getMenuTitleSelector: 	nil		hasFocus: 	false		hScrollBar: 	a ScrollBar(4028793)		hScrollBarPolicy: 	#never		vScrollBarPolicy: 	#whenNeeded		scrollBarThickness: 	19		textMorph: 	a TextMorphForEditView(1078813)		getTextSelector: 	#contents		setTextSelector: 	#contents:notifying:		getSelectionSelector: 	#contentsSelection		hasUnacceptedEdits: 	true		hasUserEdited: 	true		askBeforeDiscardingEdits: 	true		selectionInterval: 	(119 to: 154)		hasEditingConflicts: 	false		editTextSelector: 	nil		wantsWrapBorder: 	false		getFontSelector: 	nil		getTextStyleSelector: 	nil		getColorSelector: 	nil		acceptAction: 	nil		unstyledAcceptText: 	nil		styler: 	a SHTextStylerST80		getTextColorSelector: 	nilWorkspace(Object)>>perform:orSendTo:	Receiver: a Workspace	Arguments and temporary variables: 		selector: 	#doIt		otherTarget: 	a PluggableTextMorphPlus(3628983)	Receiver's instance variables: 		dependents: 	a DependentsArray(a PluggableSystemWindow<Workspace>(370723) a PluggableTextMorphPlus...etc...		contents: 	''		bindings: 	a Dictionary()		acceptDroppedMorphs: 	false		acceptAction: 	nil		mustDeclareVariables: 	false		shouldStyle: 	nil		environment: 	Smalltalk		windowTitle: 	'Workspace'		fileDirectory: 	nil		fileLineEndConvention: 	nil[] in MenuItemMorph>>invokeWithEvent:	Receiver: a MenuItemMorph(141156)'do it (d)'	Arguments and temporary variables: 		evt: 	[1719@1351 mouseUp ( red ) 171420]		world: 	a PasteUpMorph(2434915) [world]	Receiver's instance variables: 		bounds: 	1694@1336 corner: 2007@1372		owner: 	a MenuMorph(1098308)		submorphs: 	#()		fullBounds: 	1694@1336 corner: 2007@1372		color: 	(Color r: 0.973 g: 0.973 b: 0.949)		extension: 	a MorphExtension (1244890) [other:  (layoutProperties -> (LayoutProp...etc...		font: 	a TTCFont(BitstreamVeraSansForSqueak Roman 10.5pt 192ppi 28px)		emphasis: 	0		contents: 	'do it (d)'		hasFocus: 	false		isEnabled: 	true		subMenu: 	nil		isSelected: 	false		target: 	a Workspace		selector: 	#perform:orSendTo:		arguments: 	{#doIt . a PluggableTextMorphPlus(3628983)}		icon: 	Form(32x32x32)FullBlockClosure(BlockClosure)>>ensure:	Receiver: [closure] in MenuItemMorph>>invokeWithEvent:	Arguments and temporary variables: 		aBlock: 	[closure] in CursorWithMask(Cursor)>>showWhile:		complete: 	nil		returnValue: 	nil	Receiver's instance variables: 		outerContext: 	MenuItemMorph>>invokeWithEvent:		startpcOrMethod: 	([] in MenuItemMorph>>#invokeWithEvent: "a CompiledBlock(14762...etc...		numArgs: 	0		receiver: 	a MenuItemMorph(141156)'do it (d)'CursorWithMask(Cursor)>>showWhile:	Receiver: ((CursorWithMask	extent: 16@16	depth: 1	fromArray: #(		2r0		2r10000000000000000000000...etc...	Arguments and temporary variables: 		aBlock: 	[closure] in MenuItemMorph>>invokeWithEvent:		oldcursor: 	((CursorWithMask	extent: 16@16	depth: 1	fromArray: #(		2r0		2r1...etc...	Receiver's instance variables: 		bits: 	a Bitmap of length 16		width: 	16		height: 	16		depth: 	1		offset: 	-1@ -1		maskForm: 	Form(16x16x1)MenuItemMorph>>invokeWithEvent:	Receiver: a MenuItemMorph(141156)'do it (d)'	Arguments and temporary variables: 		evt: 	[1719@1351 mouseUp ( red ) 171420]		world: 	a PasteUpMorph(2434915) [world]	Receiver's instance variables: 		bounds: 	1694@1336 corner: 2007@1372		owner: 	a MenuMorph(1098308)		submorphs: 	#()		fullBounds: 	1694@1336 corner: 2007@1372		color: 	(Color r: 0.973 g: 0.973 b: 0.949)		extension: 	a MorphExtension (1244890) [other:  (layoutProperties -> (LayoutProp...etc...		font: 	a TTCFont(BitstreamVeraSansForSqueak Roman 10.5pt 192ppi 28px)		emphasis: 	0		contents: 	'do it (d)'		hasFocus: 	false		isEnabled: 	true		subMenu: 	nil		isSelected: 	false		target: 	a Workspace		selector: 	#perform:orSendTo:		arguments: 	{#doIt . a PluggableTextMorphPlus(3628983)}		icon: 	Form(32x32x32)--- The full stack ---SmalltalkImage(Object)>>doesNotUnderstand: #fileOutCategory:toFileNamed:UndefinedObject>>DoItCompiler>>evaluateCue:ifFail:Compiler>>evaluateCue:ifFail:logged:Compiler>>evaluate:in:to:environment:notifying:ifFail:logged:[] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:FullBlockClosure(BlockClosure)>>on:do:SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:SmalltalkEditor(TextEditor)>>evaluateSelectionSmalltalkEditor(TextEditor)>>doIt[] in PluggableTextMorphPlus(PluggableTextMorph)>>doItTextMorphForEditView(TextMorph)>>handleEdit:PluggableTextMorphPlus(PluggableTextMorph)>>handleEdit:PluggableTextMorphPlus(PluggableTextMorph)>>doItWorkspace(Object)>>perform:orSendTo:[] in MenuItemMorph>>invokeWithEvent:FullBlockClosure(BlockClosure)>>ensure:CursorWithMask(Cursor)>>showWhile:MenuItemMorph>>invokeWithEvent: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -MenuItemMorph>>mouseUp:MenuItemMorph>>handleMouseUp:MouseButtonEvent>>sentTo:MenuItemMorph(Morph)>>handleEvent:MorphicEventDispatcher>>dispatchEvent:withHandler:withMorph:MorphicEventDispatcher>>dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:MenuItemMorph(Morph)>>processEvent:using:MenuItemMorph(Morph)>>processEvent:[] in MorphicEventDispatcher>>dispatchEvent:toSubmorphsOf:Array(SequenceableCollection)>>do:MenuMorph(Morph)>>submorphsDo:MorphicEventDispatcher>>dispatchEvent:toSubmorphsOf:MorphicEventDispatcher>>dispatchEvent:withHandler:withMorph:MorphicEventDispatcher>>dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:MenuMorph(Morph)>>processEvent:using:MorphicEventDispatcher>>doProcessingForFocusEvent:with:MorphicEventDispatcher>>dispatchFocusEventFully:with:MenuMorph>>processFocusEvent:using:MenuMorph(Morph)>>processFocusEvent:[] in [] in [] in HandMorph>>sendFocusEvent:to:clear:[] in ActiveEventVariable class(DynamicVariable class)>>value:during:FullBlockClosure(BlockClosure)>>ensure:ActiveEventVariable class(DynamicVariable class)>>value:during:[] in ActiveEventVariable class>>value:during:FullBlockClosure(BlockClosure)>>ensure:ActiveEventVariable class>>value:during:MouseButtonEvent(MorphicEvent)>>becomeActiveDuring:[] in [] in HandMorph>>sendFocusEvent:to:clear:[] in ActiveHandVariable class(DynamicVariable class)>>value:during:FullBlockClosure(BlockClosure)>>ensure:ActiveHandVariable class(DynamicVariable class)>>value:during:[] in ActiveHandVariable class>>value:during:FullBlockClosure(BlockClosure)>>ensure:ActiveHandVariable class>>value:during:HandMorph>>becomeActiveDuring:[] in HandMorph>>sendFocusEvent:to:clear:[] in ActiveWorldVariable class(DynamicVariable class)>>value:during:FullBlockClosure(BlockClosure)>>ensure:ActiveWorldVariable class(DynamicVariable class)>>value:during:[] in ActiveWorldVariable class>>value:during:-- and more not shown --